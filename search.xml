<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[react初识]]></title>
      <url>/React-%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5/react/react/</url>
      <content type="html"><![CDATA[<h2 id="React-认识"><a href="#React-认识" class="headerlink" title="React 认识"></a>React 认识</h2><p>通过学习不同的框架去感受各自的魅力以及优缺点更加的去丰富自己的知识开阔自己的思维。前端框架的出现从传统的前端过度到webApp模式。Vue让我学习到组件化、局部更新、数据驱动、数据传递、状态管理、虚拟DOM等等一系列东西。通过学习React，感受到Vue更加的符合开发者个人的习惯。React更加的灵活它的 <code>JSX</code> 与 <code>JavaScript</code> 表达式的结合创造了更多的可能。<code>JSX</code> 成就了React。React的思想也对其他的框架有着广泛的影响。</p>
<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><p>React是什么？官网解释React是声明式，组件化的视图框架。React生态包括了 <code>React Router</code> 、<code>redux</code> <code>redux-thunk</code>、<code>redux-saga</code>、<code>react-redux</code> 等等。其中 <code>JSX</code> 是React中最为标志性，代表性的内容</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        text: <span class="string">'按钮'</span></span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">'btn'</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.handleClick&#125;&gt;&#123; this.state.text &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用JSX是为了将html与逻辑结合到一起，它其实是js的一个语法扩展，像是一个模板但是具有js的功能。编写一个react组件可以使用JSX也可以不使用。</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> React.createElement(</span><br><span class="line">    <span class="string">"div"</span>,</span><br><span class="line">    &#123; <span class="attr">className</span>: <span class="string">"box"</span>,onClick=&#123;alert(<span class="string">'点击'</span>)&#125; &#125;,</span><br><span class="line">    <span class="string">"按钮"</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相比较肯定JSX的书写方式上更加简洁，实际上JSX最后编译还是按照第二种方式。类似Vue中最后都是通过render函数生成。还可以发现在JSX中可以使用表达式。这也就是说JSX具有js的功能（表达式）。可以在js任何地方使用JSX</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Button = <span class="function"><span class="params">()</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">'btn'</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Button</span>/&gt;</span></span>, root)</span><br></pre></td></tr></table></figure>
<p>这里需要说明一下react中组件名称需要使用驼峰命名，jsx在解析时才会将其识别成为组件。虽然w3c规范中也有<code>button</code> 元素。为了避免冲突，应当遵守规范，以及类名的书写使用 <code>className</code> 。事件的绑定也采用驼峰方式。会让刚接触人不太适应~</p>
<p><strong>不能写js语法在JSX中</strong> 例如if…else 相反使用三木运算符表达式是可以的。因为JSX最终还是编译成createElement</p>
<p>没办法去执行js的语法，除了表达式，函数调用。因为在书写js代码的时候更多我们需要进行一个调试但是在jsx中没有办法很好进行调试，就可以将其抽成一个函数。这也是为什么JSX书写表达式与函数是更好的选择。也让JSX更加的灵活。<code>HOC</code>、<code>render prop</code> 也是基于此。因为也是初学所以很多关于JSX高深的地方还没有发现，以后进行补充。</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>React的组件写法有Component，Functional Component。</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">count</span>: <span class="number">1</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    handleClick() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            count: <span class="keyword">this</span>.state.count + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Functional Component</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123; this.props.count &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有些组件具有状态，有些组件没有状态纯展示（无状态组件 or UI组件）如果一个组件没有过多的状态之做为容器进行展示，使用ES6的方式书写未免有些冗余。函数式组件只是少了继承Component，会更加的方便。</p>
<p>在React中存在一个组件叫做 <code>PureComponent</code> 继承自 <code>Component</code> 只是内部使用了 <code>shouldComponentUpdate</code> 功能与原来的没什么区别，但是会对属性状态进行渐层比较。</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pure</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; state, props &#125; = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.compare(nextState ,state) &amp;&amp; <span class="keyword">this</span>.compare(nextProps, props)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    compare(a, b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a === b || <span class="built_in">Object</span>.keys(a).every(<span class="function"><span class="params">k</span> =&gt;</span> a[k] === b[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>shouldComponentUpdate</code>  是一个生命周期函数，可以理解为每次组件状态属性改变都会去触发render函数，每次进行询问是 <strong>否应该执行组件更新呢</strong> 默认返回true更新，<code>PureComponent</code> 的作用就是会减少render函数一些没必要的渲染工作。</p>
<h3 id="组件状态"><a href="#组件状态" class="headerlink" title="组件状态"></a>组件状态</h3><p>定义组件的时候需要在初始化过程中声明state，react不推荐直接修改state而是使用setState更新  <strong>setState并不都是异步更新</strong></p>
<p>侯策大佬说，React 控制的事件处理过程，setState 不会同步更新 this.state。而在 React 控制之外的情况， setState 会同步更新 this.state。</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    onClick() &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        count: <span class="keyword">this</span>.state.count + <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">      <span class="built_in">document</span>.querySelectorAll(<span class="string">'#btn-raw'</span>)</span><br><span class="line">        .addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.onClick)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;React.Fragment&gt;</span><br><span class="line">          &lt;button id=<span class="string">"btn-raw"</span>&gt;</span><br><span class="line">            click out React</span><br><span class="line">          &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          &lt;button onClick=&#123;this.onClick&#125;&gt;</span></span><br><span class="line"><span class="regexp">            click in React</span></span><br><span class="line"><span class="regexp">          &lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/React.Fragment&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p>id 为 btn-raw 的 button 上绑定的事件，是在 componentDidMount 方法中通过 addEventListener 完成的，这是脱离于 React 事件之外的，因此它是同步更新的。反之，代码中第二个 button 所绑定的事件处理函数对应的 setState 是异步更新的。</p>
<p>这里可能会碰到一个问题</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state: &#123; <span class="attr">count</span>: <span class="number">1</span> &#125;</span><br><span class="line">    </span><br><span class="line">    componentDidMounted() &#123;</span><br><span class="line">		<span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            count: <span class="keyword">this</span>.state.count + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.count) <span class="comment">// 1</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为在React处理范围之内setState是异步的所以并不能及时获取到更新的值，这时候需要存储一下</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="keyword">this</span>.state.count + <span class="number">1</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123; count &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(count) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p>另外setState第二个参数也可以写成函数，可以确保在更新之后可以获取到值</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123; <span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span> &#125;, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.count)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>但是还会涉及到一个问题，因为是回调。不是很方便使用更新的值，使用promisify</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promisifyState = <span class="function">(<span class="params">that, state</span>) =&gt;</span> (</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    that.setState(state, () =&gt; &#123;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 这种做法看似很有意思 还是少用为好</span></span><br></pre></td></tr></table></figure>
<p>react会对多次setState进行合并以提升性能</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">componentDidMounted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;)</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;)</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">count</span>: <span class="keyword">this</span>.state.count + <span class="number">1</span>&#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.count) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于setState的用法具体可以去官网查看详细的教程</p>
<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>react中的事件是合成事件所有的事件都是通过docment代理实现，更好的做到事件的注册与同意销毁更加的节省了性能减少了复杂程度不会频繁的创建销毁事件</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onClick</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event); <span class="comment">// =&gt; nullified object.</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.type); <span class="comment">// =&gt; "click"</span></span><br><span class="line">  <span class="keyword">const</span> eventType = event.type; <span class="comment">// =&gt; "click"</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// event.persist() 持久化合成事件  </span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 不能异步的访问事件对象</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event); <span class="comment">// =&gt; undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(eventType); <span class="comment">// =&gt; "click"</span></span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不起作用，this.state.clickEvent 的值将会只包含 null</span></span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">clickEvent</span>: event&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你仍然可以导出事件属性</span></span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;<span class="attr">eventType</span>: event.type&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果你想异步访问事件属性，你需在事件上调用 <code>event.persist()</code>，此方法会从池中移除合成事件，允许用户代码保留对事件的引用。</p>
</blockquote>
<p>另外牵连出来的问题就是react中的事件不能阻止原生的事件冒泡</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'document click'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleClick = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'div click'</span>)</span><br><span class="line">  e.stopPropagation() <span class="comment">// 无效的</span></span><br><span class="line">  <span class="comment">// e.nativeEvent.stopImmediatePropagation() 通过nativeEvent可以访问原生事件类似Vue中native</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;</span><br><span class="line">      click</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="this问题"><a href="#this问题" class="headerlink" title="this问题"></a>this问题</h3><p>react中事件绑定其实是将事件做为回调传入的会经常碰到一个问题就是this的指向丢失，通常我们更加希望在组件中任何地方this的指向都是当前 <code>component instance</code> </p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        count: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	handleClick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.count) <span class="comment">// undefined this是div对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JSX中写事件处理函数，会将handleClick存起来，当document事件触发执行handleClick内部的this是找不到当前组件实例的，需要通过显示的绑定执行this或者使用箭头函数</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            count: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.handleClick = <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	handleClick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.count) <span class="comment">// undefined this是div对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="comment">// return &lt;div onClick=&#123;this.handleClick.bind(this)&#125;&gt;&lt;/div&gt;</span></span><br><span class="line">        <span class="comment">// reutrn &lt;div onClick=&#123;() =&gt; this.handleClick&#125;&gt;&lt;/div&gt;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实react是完全可以将this指向组件实例，react应该是为了怕避免污染this原本的指向。这个问题是js的问题与react无关。实现以下这个场景</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">‘use strict’</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Demo(<span class="string">'react'</span>)</span><br><span class="line">d.show() <span class="comment">// react</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> otherD = d.show</span><br><span class="line">otherD() <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
<p>如果修改一下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">‘use strict’</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Demo(<span class="string">'react'</span>)</span><br><span class="line">d.show = d.show.bind(d)</span><br><span class="line"><span class="keyword">const</span> otherD = d.show</span><br><span class="line">otherD() <span class="comment">// react</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">‘use strict’</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.show = <span class="keyword">this</span>.show.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    show() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Demo(<span class="string">'react'</span>)</span><br><span class="line"><span class="keyword">const</span> otherD = d.show</span><br><span class="line">otherD() <span class="comment">// react</span></span><br></pre></td></tr></table></figure>
<p>所以react事件中的this问题其实是js的问题与它无关</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, cb)</span><br></pre></td></tr></table></figure>
<p><code>cb</code> 相当于在react注册的事件最终统一通过 <code>document</code> 代理 <code>cb</code> 的 <code>this</code> 指向就是当前的dom对象 简单理解一下 因为react是合成事件具体肯定要去查看源码了 如果react对此 <code>cb</code> 中 <code>this</code> 指向进行修改也有点违背事件绑定调用的回调中this确实本该指向当前dom对象</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这段时间的学习对react有了一个基本的认识，也查了很多资料，看文档解释。但是这个过程是很有意思的，其实看了蛮多一次也说不完，重点在于细细品味。毕竟react生态中还是有很多内容的，多总结梳理，未完待续~本次就简单的总结一下几点</p>
<ul>
<li>JSX</li>
<li>组件<ul>
<li>状态</li>
<li>setState使用</li>
<li>事件绑定</li>
<li>this指向</li>
</ul>
</li>
</ul>
<p>^_^~</p>
]]></content>
      
        <categories>
            
            <category> React 探索与实践 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Babel 折腾]]></title>
      <url>/%E5%A4%A7%E5%89%8D%E7%AB%AF/WTF-Babel/</url>
      <content type="html"><![CDATA[<h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><p>作为一名前端开发，每当我看到</p>
<ul>
<li>babel-core</li>
<li>babel-polyfill</li>
<li>babel-plugin-transform-runtime</li>
<li>babel-xxx-xxx</li>
</ul>
<p>WTF ? 双眼一抹黑.都是啥。因为最近要处理 <strong>ie</strong> 的兼容。所以对 <code>babel</code> 进行了一点学习在此记录。</p>
<p>环境</p>
<ul>
<li>babel7</li>
<li>@babel/preset-env</li>
</ul>
<h3 id="babel-是做什么用"><a href="#babel-是做什么用" class="headerlink" title="babel 是做什么用"></a>babel 是做什么用</h3><p>随着js的发展es的版本也在不断的更新添加中，但是为了让低端环境能够执行我们所编写的代码，就需要通过 <code>babel</code> 进行编译转化到低版本 es5.以便能覆盖大多数的浏览器。</p>
<p>babel的转换形式是以 ”转化功能“ 和 “插件” 的形式出现的，也就是说如果我们 <strong>没有配置</strong> 任何的插件和功能，使用babel之后返回的代码其实和写的是没有区别的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">//... &#125;</span></span><br></pre></td></tr></table></figure>
<p>通过 <code>@babel/plugin-transform-arrow-functions</code> 插件转换之后</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//... &#125;</span></span><br></pre></td></tr></table></figure>
<p>诸如此类的插件还有</p>
<ul>
<li>@babel/plugin-transform-async-to-generator </li>
<li>@babel/plugin-transform-for-of</li>
</ul>
<p>等等~ 这些插件在安装 <code>npm install @babel/preset-env -D</code> 的时候就会安装在我们的本地，当然插件内部的转换机制其实就是 <code>AST</code> 语法树的转换过程了。（会编译原理的人真变态！）</p>
<p>知道了这些也就明白了，在项目中我们都会去配置一个叫做 <code>.babelrc</code> <code>babel.config.js</code> 的配置文件。用来转换我们的代码。</p>
<h3 id="babel-preset-env"><a href="#babel-preset-env" class="headerlink" title="@babel/preset-env"></a>@babel/preset-env</h3><p>看以前 <code>vue-cli</code> 的脚手架生成的 package.json 可以看到一些诸如此类的 babel插件</p>
<ul>
<li>babel-preset-es2015</li>
<li>babel-preset-stage-0</li>
<li>…</li>
</ul>
<p>es2015，2016代表的就是es的版本，stage0-3代表的是最新语法的在提案的哪个阶段。</p>
<p>babel升级到7之后，<code>@babel/preset-env</code> 是所有es的合集，官方也不推荐在使用以前的方式，这个包可以通过配置去自动添加 <code>polyfill</code> </p>
<p><a href="https://www.babeljs.cn/docs/babel-preset-env#options" target="_blank" rel="external">@babel/preset-env options</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    [<span class="string">"@babel/preset-env"</span>, &#123;</span><br><span class="line">      <span class="string">"useBuiltIns"</span>: <span class="string">"usage | entry | false"</span>,  <span class="comment">// 三种参数</span></span><br><span class="line">      <span class="string">"targets"</span>: <span class="string">""</span>，</span><br><span class="line">      ”core“: <span class="string">"2 | 3"</span>  						   <span class="comment">// 根据core-js版本去选择</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>core-js</code> 是一个标准库 <code>@babel/polyfill</code> 其实就是前者的一个wrapper 真正引入的还是 <code>core-js</code></p>
<p>测试 <code>@babel/cli</code> 以下测试都用下文件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'@babel/polyfill'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>)    </span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].findIndex(<span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a === <span class="number">2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>首先通过配置 <code>preset</code> 看结果</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    [<span class="string">"@babel/preset-env"</span>, &#123;</span><br><span class="line">      <span class="string">"useBuiltIns"</span>: <span class="string">"entry"</span>,</span><br><span class="line">      <span class="string">"targets"</span>: <span class="string">"chrome 40"</span>，</span><br><span class="line">      ”corejs“: <span class="string">"3"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果和原来的一样。会有一个提示</p>
<blockquote>
<p> <code>@babel/polyfill</code> is deprecated. Please, use required parts of <code>core-js</code><br>  and <code>regenerator-runtime/runtime</code> separately</p>
</blockquote>
<p>意思就是@babel-polyfill被废弃了 本身就是core-js 与 runtime的结合也就是说</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'@babel/polyfill'</span>)</span><br><span class="line"><span class="comment">// 等同</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'core-js/stable'</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'regenerator-runtime/runtime'</span>)</span><br></pre></td></tr></table></figure>
<p>再次测试</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"core-js/modules/es.symbol"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"core-js/modules/es.symbol.description"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"core-js/modules/es.symbol.async-iterator"</span>);</span><br><span class="line"><span class="comment">// ...无数个包 会包含一个 require("core-js/modules/es.array.find-index");</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)].findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a === <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>好像没太看懂，接着来修改一下 <code>useBulitIns: &#39;usage&#39;</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"core-js/modules/es.array.find-index"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"core-js/modules/es.object.to-string"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"core-js/modules/es.promise"</span>);</span><br><span class="line"><span class="comment">// 设置了 usage 就不需要去引入 自动去检测合适的polyfill</span></span><br><span class="line"><span class="comment">// require("core-js/stable");</span></span><br><span class="line"><span class="comment">// require("regenerator-runtime/runtime");</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)].findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a === <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>useBulitIns之前是测试版本现在看来还是没什么问题，两者的区别就是 <code>entry</code> 并不会根据我们所使用的去按需引入 <em>polyfill</em> 说直白点就是会根据环境去引入 <em>polyfill</em> 。当我们切换了 target为更高版本的时候会发现 <code>require(&quot;core-js/modules/es.array.find-index&quot;);</code> 就不会有了，因为chrome已经内置了这个方法。</p>
<p>设置 <code>useBulitIns: false</code> 只会进行语法转化，所以没有意义</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"core-js/stable"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"regenerator-runtime/runtime"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)].findIndex(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a === <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="babel-runtime"><a href="#babel-runtime" class="headerlink" title="@babel/runtime"></a>@babel/runtime</h3><p>runtime的 <code>polyfill</code> 作用是什么呢？通常我们使用的是 <code>@babel/plugin-transform-runtime</code> 还有一些其它语法的 <em>transform</em>  因为是依赖@babel/runtime 所以项目中使用会同时安装二者</p>
<blockquote>
<p>A plugin that enables the re-use of Babel’s injected helper code to save on codesize.</p>
<p>重复使用Babel注入的代码（好像没 看太明白）</p>
</blockquote>
<p><code>transform-runtime</code> 可以帮我们转化诸如箭头函数，for-of等新的js语法形式。但是对于新增在数据类型上的方法新的api是没办法去做兼容的，需要我们引入 <code>core-js</code> <code>@babel/polyfill</code> 或者配合 <code>transform-runtime</code> 去做处理。官方的解释：</p>
<blockquote>
<p>NOTE: Instance methods such as <code>&quot;foobar&quot;.includes(&quot;foo&quot;)</code> will not work since that would require modification of existing built-ins (you can use <a href="https://babeljs.io/docs/en/babel-polyfill" target="_blank" rel="external"><code>@babel/polyfill</code></a> for that).</p>
</blockquote>
<p>runtime还有一个重要的功能是当我们在构建自己的包和应用的时候创建一个环境避免污染全局的内置对象或原型对象。我们发布的包引入Promise polyfill 。其它开发者在使用的时候在本地也有一个写好的Promise。完蛋了，真真假假分不清。</p>
<p><a href="https://babeljs.io/docs/en/babel-plugin-transform-runtime#options" target="_blank" rel="external">plugin-transform-runtime options</a></p>
<p>测试</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    <span class="string">"@babel/preset-env"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/plugin-transform-runtime"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"corejs"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"helpers"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"useESModules"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果与 <code>useBulitIns: false</code> 的效果是一样的，修改 <code>corejs: 2 | 3</code> </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _interopRequireDefault = <span class="built_in">require</span>(<span class="string">"@babel/runtime-corejs3/helpers/interopRequireDefault"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _setTimeout2 = _interopRequireDefault(<span class="built_in">require</span>(<span class="string">"@babel/runtime-corejs3/core-js-stable/set-timeout"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _promise = _interopRequireDefault(<span class="built_in">require</span>(<span class="string">"@babel/runtime-corejs3/core-js-stable/promise"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _findIndex = _interopRequireDefault(<span class="built_in">require</span>(<span class="string">"@babel/runtime-corejs3/core-js-stable/instance/find-index"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">(<span class="number">0</span>, _findIndex[<span class="string">"default"</span>])(_context = <span class="keyword">new</span> _promise[<span class="string">"default"</span>](<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  (<span class="number">0</span>, _setTimeout2[<span class="string">"default"</span>])(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)]).call(_context, <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a === <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>可以看到对构建出来的代码都加上了单独的引用，就不会去污染环境了，但是有疑惑，不是说不会去支持原型polyfill。查看了官网之后发现babel7之后的runtime。</p>
<ul>
<li>自动的引入 <code>@babel/runtime/regenerator</code> 当使用 generator async的时候</li>
<li>当必要的时候会引入core-js进行polyfill</li>
<li>自动的移出内置的inline babel helpers使用 <code>@babel/runtime/helpers</code> 代替</li>
</ul>
<p><strong>特别注意</strong> ：runtime中设置的corejs 并不是 core-js  而是 <code>@babel/runtime-corejs3</code> </p>
<p><em>runtime大法好 ！~</em></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>babel7直接 runtime就完事了。</p>
<ul>
<li><code>@babel/preset-env</code> 使用 <code>usage</code> 需要安装core-js2,3 进行 polyfill自动引入，说起来vue-cli3已经 内置了2，不支持升级到3，期待的vue-cli4，babel也已经废弃了@babel/polyfill 所以无需在下载。<code>useBulitIns: entry</code> 根据大环境polyfill</li>
<li><code>@babel/runtime</code> 如果在构建lib是必须要添加的，一方面帮助我们减少重复文件的生成，另一方面避免污染环境，更重要的是可以帮助我们去自动 polyfill</li>
</ul>
<p>babel7在转换速度有了很大的提升。很大程度进行了整合真的很不错，对于很多分不清啥是啥的同学再也不用担心了。</p>
<p>还需要注意的一点 <code>babel-loader</code> 中也可以配置优先级会大于配置文件，所以最好单独配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> preset = &#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"targets"</span>: <span class="string">"&gt; 5%"</span>,</span><br><span class="line">        <span class="string">"useBuiltIns"</span>: <span class="string">"usage"</span>,</span><br><span class="line">        <span class="string">"corejs"</span>: <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 大前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Babel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实现MVVM]]></title>
      <url>/Vue-%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5/vue/%E5%AE%9E%E7%8E%B0MVVM/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Vue做为一门热门的前端框架，已经成为了前端开发必不可少的一项技能。之前一直懒癌发作只是了解它的原理但是从来没有实践操作，看了些资料最后实现了简单的MVVM功能</p>
</blockquote>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://user-gold-cdn.xitu.io/2018/4/10/162ad3d5be3e5105?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="mvvm"></p>
<p>在 <code>new Vue</code> 实例化之后会进行 <strong>数据劫持</strong> 与 <strong>模板编译解析</strong> 通过对根节点进行递归遍历添加 <code>getter</code> <code>setter</code> ，进行赋值操作触发setter中的监听函数通知 <strong>Watch</strong> 进行数据的变更。compile会进行解析将指令与模板中的变量替换成数据并初始化视图，在这个阶段添加 <strong>订阅者</strong> ，数据发生发生改变收到通知进行数据视图变更。<strong>Watcher</strong> 就是一个观察者模式是 Observer 与 compile中间的桥梁。</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>PS: 因为是简单实现所以没有做过多的判断与限制</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span></span>&#123;</span><br><span class="line"> 	<span class="keyword">constructor</span>(opts = &#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(opts.el)</span><br><span class="line">        <span class="keyword">this</span>.$methods = opts.method</span><br><span class="line">        <span class="keyword">this</span>.$data = opts.data</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>._observer(<span class="keyword">this</span>.$data)</span><br><span class="line">        <span class="keyword">this</span>._compile(<span class="keyword">this</span>.$el)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _compile(el) &#123;</span><br><span class="line">        <span class="comment">// 解析根节点中的所有元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _observer(data) &#123;</span><br><span class="line">        <span class="comment">// 对所有数据添加getter，setter</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在进行observer时是很关键的一步，需要对每一条数据做到劫持</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">_observer(data) &#123;</span><br><span class="line">	<span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是不是自有属性</span></span><br><span class="line">        <span class="keyword">if</span>(data.hasOwnProperty) &#123;</span><br><span class="line">         	<span class="keyword">let</span> val = data[k]</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> val === <span class="string">'object'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>._observer(val)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(data, k, &#123;</span><br><span class="line">                configurable: <span class="literal">true</span>,</span><br><span class="line">                enumerable: <span class="literal">true</span>,</span><br><span class="line">                get() &#123;</span><br><span class="line">                    <span class="keyword">return</span> val</span><br><span class="line">                &#125;,</span><br><span class="line">                set(newValue) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(newValue !== val) &#123;</span><br><span class="line">                        val = newValue</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此observer功能基本是完成了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">_compile(el) &#123;</span><br><span class="line">    <span class="comment">// 这里应该将所有的节点无论是文本节点还是元素节点全部递归获取 这里因为没去实现&#123;&#123;&#125;&#125;绑定效果所以未做解析</span></span><br><span class="line">	<span class="keyword">let</span> nodes = el.children</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, len = nodes.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = nodes[i]</span><br><span class="line">        <span class="keyword">if</span>(node.children) &#123;</span><br><span class="line">            <span class="keyword">this</span>._compile(node)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(node.hasAttribute(<span class="string">'v-bind'</span>)) &#123;</span><br><span class="line">            <span class="keyword">let</span> attr = node.getAttribute(<span class="string">'v-bind'</span>)</span><br><span class="line">            <span class="comment">// 这里获取到bind指令所对应的数据 怎么样将指令与视图进行关联 需要做一个指令与属性的映射</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改初始化函数，在数据监听中加入映射关系</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span></span>&#123;</span><br><span class="line"> 	<span class="keyword">constructor</span>(opts = &#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(opts.el)</span><br><span class="line">        <span class="keyword">this</span>.$methods = opts.method</span><br><span class="line">        <span class="keyword">this</span>.$data = opts.data</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 指令与数据的映射</span></span><br><span class="line">        <span class="keyword">this</span>.map = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>._observer(<span class="keyword">this</span>.$data)</span><br><span class="line">        <span class="keyword">this</span>._compile(<span class="keyword">this</span>.$el)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    _observer(data) &#123;</span><br><span class="line">        <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 判断是不是自有属性</span></span><br><span class="line">            <span class="keyword">if</span>(data.hasOwnProperty) &#123;</span><br><span class="line">                <span class="keyword">let</span> val = data[k]</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">typeof</span> val === <span class="string">'object'</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>._observer(val)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 添加映射关系 用于存储watch</span></span><br><span class="line">				<span class="keyword">this</span>.map[k] = &#123;</span><br><span class="line">                    directives: []</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">let</span> _map = <span class="keyword">this</span>.map[k]</span><br><span class="line">                <span class="built_in">Object</span>.defineProperty(data, k, &#123;</span><br><span class="line">                    configurable: <span class="literal">true</span>,</span><br><span class="line">                    enumerable: <span class="literal">true</span>,</span><br><span class="line">                    get() &#123;</span><br><span class="line">                        <span class="keyword">return</span> val</span><br><span class="line">                    &#125;,</span><br><span class="line">                    set(newValue) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(newValue !== val) &#123;</span><br><span class="line">                            val = newValue</span><br><span class="line">                            _map.directives.forEach(<span class="function"><span class="params">m</span> =&gt;</span> &#123;</span><br><span class="line">                                m.updata()</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(node, attr, $data, exp) &#123;</span><br><span class="line">        <span class="keyword">this</span>.el = node   	<span class="comment">// dom</span></span><br><span class="line">        <span class="keyword">this</span>.attr = attr	<span class="comment">// 属性</span></span><br><span class="line">        <span class="keyword">this</span>.data = $data	<span class="comment">// 数据</span></span><br><span class="line">        <span class="keyword">this</span>.exp = exp		<span class="comment">// key number  conut</span></span><br><span class="line">        <span class="keyword">this</span>.updata()		<span class="comment">// 初始化视图</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新 发布</span></span><br><span class="line">    updata() &#123;</span><br><span class="line">        <span class="comment">// input对应value div对应innerHTML</span></span><br><span class="line">        <span class="keyword">this</span>.el[<span class="keyword">this</span>.attr] = <span class="keyword">this</span>.data[<span class="keyword">this</span>.exp]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在将解析的结果与视图修改进行融合</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">_compile(el) &#123;</span><br><span class="line">    <span class="comment">// 这里应该将所有的节点无论是文本节点还是元素节点全部递归获取 这里因为没去实现&#123;&#123;&#125;&#125;绑定效果所以未做解析</span></span><br><span class="line">	<span class="keyword">let</span> nodes = el.children</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, len = nodes.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = nodes[i]</span><br><span class="line">        <span class="keyword">if</span>(node.children) &#123;</span><br><span class="line">            <span class="keyword">this</span>._compile(node)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(node.hasAttribute(<span class="string">'v-bind'</span>)) &#123;</span><br><span class="line">            <span class="keyword">let</span> attr = node.getAttribute(<span class="string">'v-bind'</span>)</span><br><span class="line">            <span class="keyword">this</span>.map[attr].directives.push(<span class="keyword">new</span> Watch(</span><br><span class="line">                node,</span><br><span class="line">                <span class="string">'innerHTML'</span>,</span><br><span class="line">                <span class="keyword">this</span>.$data,</span><br><span class="line">                attr</span><br><span class="line">            ))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">        <span class="comment">// v-model 触发input事件修改value</span></span><br><span class="line">        <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-model'</span>) &amp;&amp; node.tagName === <span class="string">'INPUT'</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> _this = <span class="keyword">this</span></span><br><span class="line">            <span class="keyword">let</span> attr = node.getAttribute(<span class="string">'v-model'</span>)</span><br><span class="line">            <span class="comment">// let fn = (function(key) &#123;</span></span><br><span class="line">            <span class="comment">// 	 _this.map[attr].directives.push(new Watch(</span></span><br><span class="line">            <span class="comment">//        node,</span></span><br><span class="line">            <span class="comment">//        'value',</span></span><br><span class="line">            <span class="comment">//        _this.$data,</span></span><br><span class="line">            <span class="comment">//        attr</span></span><br><span class="line">            <span class="comment">//    ))</span></span><br><span class="line">            <span class="comment">//    return function () &#123;</span></span><br><span class="line">            <span class="comment">//        _this.$data[attr] = nodes[key].value</span></span><br><span class="line">            <span class="comment">//    &#125;    </span></span><br><span class="line">            <span class="comment">// &#125;)(i)</span></span><br><span class="line">            </span><br><span class="line">            _this.map[attr].directives.push(<span class="keyword">new</span> Watch(</span><br><span class="line">                node,</span><br><span class="line">                <span class="string">'value'</span>,</span><br><span class="line">                _this.$data,</span><br><span class="line">                attr</span><br><span class="line">            ))</span><br><span class="line">            <span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                _this.$data[attr] = node.value</span><br><span class="line">            &#125;</span><br><span class="line">            node.value = <span class="keyword">this</span>.$data[attr]</span><br><span class="line">            node.addEventListener(<span class="string">'input'</span>, fn)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(node.hasAttribute(<span class="string">'v-click'</span>)) &#123;</span><br><span class="line">            <span class="keyword">let</span> attr = node.getAttribute(<span class="string">'v-click'</span>)</span><br><span class="line">            <span class="keyword">let</span> fn = <span class="keyword">this</span>.$methods[attr].bind(<span class="keyword">this</span>.$data)</span><br><span class="line">            node.addEventListener(<span class="string">'click'</span>, fn)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到此 <code>v-model</code> 功能我们就实现了可以尝试一下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">'number'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-bind</span>=<span class="string">'number'</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> View(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">        number: 0</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实现这个MVVM的简单demo，对于理解Vue中的响应模式有了更加好的理解。总体来说Vue中的响应方式通过数据劫持，模板编译，观察者模式结合。Vue中的视图是异步更新。观察者模式恰好是对于异步执行的操作不去过多的注重过程。数据变更通知dom节点的渲染进行视图更新。</p>
<p>对Vue的使用也有了一段时间了，接下来会对Vue中其它知识点进行总结归纳，知识不在于学的多，更在于积累。共勉~</p>
]]></content>
      
        <categories>
            
            <category> Vue 探索与实践 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue 生命周期]]></title>
      <url>/Vue-%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5/vue/Vue%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<h2 id="Vue-生命周期"><a href="#Vue-生命周期" class="headerlink" title="Vue 生命周期"></a>Vue 生命周期</h2><p>又好久没有写总结了~本着一探究竟总结一下使用Vue过程中碰到的问题。</p>
<p>先放一张Vue官网的LifeCycle生命周期图</p>
<p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="生命周期"></p>
<p>Vue每一个组件都有自己完整的生命周期，每一个钩子函数是什么含义先了解一下</p>
<ul>
<li><p>beforeCreate</p>
<p>创建前：在Vue实例被创建时 init初始化 event事件，加载LiftCycle调用该函数，在这个生命周期函数中是无法获取到vm实例中的props与data的</p>
</li>
<li><p>created</p>
<p>创建后：在beforeCreate与created之间会执行一些函数injections 与 reactivity 、initState动作会将vm中的props与data进行绑定，其中的细节可以不用去考虑，需要理解的是在这两个hook之间发生了什么事情，也就是说这两个hook区别就在于 不要在 <em>beforeCreate</em>  中去修改data数据因为访问不到。但是有一点在<em>beforeCreate</em> 这个hook在执行的过程中会有 vue-router、vuex的逻辑这个等下解释</p>
</li>
<li><p>beforeMount</p>
<p>挂载前：初始化完成动作结束，需要将render渲染的VDOM挂载到 <code>vm.el</code> 对象上，从上边的图可以看的到在beforeMount动作之前会去检测是否传入了 el、template而执行相对应的操作以及会选择编译模式执行不同的渲染方式。<br><strong>Runtime Only</strong> 与 <strong>Runtime+Compiler</strong> 什么区别呢？简单来说前者是会通过vue-loader将 <code>.vue</code> 文件编译成为一个对象把其中的template标签编译为render函数，后者new Vue中传入template参数，vue2都是最终通过render函数去渲染，效率可能没有前者快。但是这个编译方式就是完整版的如果没有特殊要求通常使用前者就好。</p>
</li>
<li><p>mounted</p>
<p>挂载后：这时是 <strong>可以访问到DOM对象</strong>，数据的改变也会触发响应的更新hook函数。</p>
</li>
<li><p>beforeUpdate 更新前</p>
</li>
<li><p>updated 更新后</p>
</li>
<li><p>beforeDestroy 销毁前</p>
</li>
<li><p>destroyed 销毁后</p>
</li>
</ul>
<p><em>tips</em>：需要注意的一点是VDOM的变化都是异步所以如果有些操作需要在挂载之前就完成的通常会在created中执行，例如通过$ref获取的节点但是执行了相应的操作却没有生效。记得加 <code>$nextTick</code> 在VDOM构建完成之后执行。</p>
<p>Vue的每一个组件都具有完整的生命周期，组件与组件之间的数据操作，传递，响应就要看清楚应该在什么阶段去执行了。组件的之间的关系无非就是子父组件，父父组件。</p>
<blockquote>
<p>在做项目的过程中并未使用vuex（不是很大，没必要），通过Bus, router去操作一些数据的传递发现了一些问题</p>
</blockquote>
<h3 id="子父组件与父父组件生命周期对比"><a href="#子父组件与父父组件生命周期对比" class="headerlink" title="子父组件与父父组件生命周期对比"></a>子父组件与父父组件生命周期对比</h3><p>子父组件</p>
<p>在beforeMount与mounted之间会执行render，也就是说子组件做为父组件一部分会在这个阶段完成自己的声明周期过程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child&gt;&lt;/child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import child from &apos;./B&apos;</span><br><span class="line">import &#123;group&#125; from &apos;@/common/config/log&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;A&apos;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    group(&apos;red&apos;, &apos;beforeCreate 创建 A&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    group(&apos;red&apos;, &apos;created 创建完成 A&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    group(&apos;red&apos;, &apos;beforeMount 挂载状态 A&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    group(&apos;red&apos;, &apos;mounted 挂载完成 A&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    group(&apos;red&apos;, &apos;beforeUpdate 更新状态 A&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line">    group(&apos;red&apos;, &apos;beforeUpdate 更新完成 A&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    group(&apos;red&apos;, &apos;beforeUpdate 销毁状态 A&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    group(&apos;red&apos;, &apos;beforeUpdate 销毁 A&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>子组件与父组件的代码一样不贴了，看效果</p>
<p><img src="\img\javascript\lifecycle.png" alt="lifecycle"></p>
<p>可以看到子组件的生命周期在父组件的beforeMount与mounted之间触发。在子父组件通信方式有很多通过Bus的方式，例如子组件在 created 或 mounted中 emit一个事件传递数据，父组件在创建与挂载的hook中都是可以监听到子组件传递的数据，监听始终都会在emit之前触发。只不过有一个小问题（重复绑定）稍后说。</p>
<p>父父组件</p>
<p>之间看结果从A→B切换需要传递数据</p>
<p><img src="\img\javascript\lifecycle2.png" alt="lifecycle"></p>
<p>在A中的mounted中定义Bus.$emit传递数据在B中的created中接受，会发现根本接受不到数据，原因通过上边的图可以看到 <strong>A在mounted中emit自定义事件的时候</strong>， <strong>B的created中Bus.$on的事件是没有被触发的</strong>。打个比方你要去窃听别人说话的内容是要在别人说话前就把装置安装好还是说完了你再去安装！</p>
<p>解决方案：可以发现组件A的destroyed过程是在组件B的created之后触发的也就是A组件emit的数据应该放到销毁的hook中，而在B组件中在created中去监听传递的数据。mounted阶段也不行因为同样A已经销毁了。</p>
<h3 id="Bus的坑"><a href="#Bus的坑" class="headerlink" title="Bus的坑"></a>Bus的坑</h3><p>在小的数据传递中通常用Bus或者router都可以解决一些数据传递的问题，在上边说hook函数的时候提到了router的逻辑会在beforeCreate中去执行，也就是说在beforeCreate虽然获取不到data但是可以获取到router的params、query参数，这个自行测试。同样也是传递数据。</p>
<p>上边的例子中通过子父组件、父父组件中使用Bus传递数据貌似完美解决了问题。其实不然，回到这句话<strong>A在mounted中emit自定义事件的时候</strong>， <strong>B的created中Bus.$on的事件是没有被触发的</strong>。但是当我们返回A组件（未刷新页面）在到B组件的时候发现B组件监听到了A的emit事件，反复会发现每次都会重复触发多次。这是因为 <strong>Bus.$on并不会随着组件销毁而解除因为触发监听了所以第二次进入B的时候会触发。</strong> 问题就是如何不让其重复的去监听emit。尤大在<a href="https://github.com/vuejs/vue/issues/3399" target="_blank" rel="external">issue </a>给出了解决方式。在B组件beforeDestroy 或 destroyed中解除Bus.$off绑定的事件就不会重复触发了。</p>
<p>引出一个问题：如果在多个页面都会触发同一个emit事件岂不是在每一个页面的销毁hook中都要写一段Bus.$off.其实在issue中尤大提出了一点通过mixin方式也可以。</p>
<h3 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h3><p>介绍看官网详情<a href="https://cn.vuejs.org/v2/guide/mixins.html" target="_blank" rel="external">mixin </a>即可，使用mixin的目的在于如果多个组件都会复用某个逻辑功能就可以在全局进行方法或hook的混入，但是需要注意的是混入对象的钩子将在组件自身钩子<strong>之前</strong>调用。data、props、methods合并策略与钩子函数不同。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设B、C页面都会接受A传递来的数据 通过Bus使用了解到，需要在组件销毁时注销监听</span></span><br><span class="line"><span class="keyword">const</span> mixin = &#123;</span><br><span class="line">    destoryed() &#123;</span><br><span class="line">        <span class="comment">// 需要接触的事件</span></span><br><span class="line">        Bus.$off(<span class="string">'params'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    mixins: [mixin]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>混入使用的好可以对代码的复用起到很好的帮助</p>
<p>总结一下Vue生命周期</p>
<ul>
<li>Vue的生命周期函数就是在<code>new Vue()</code> 初始化以及数据更新过程中各个阶段执行的特定函数（钩子函数）</li>
<li>在不同的生命周期函数中执行相对应的操作，在created获取data，在mounted访问DOM，destoryed销毁事件解除定时器等等操作。</li>
</ul>
<p>取乎其上，得乎其中；取乎其中，得乎其下；取乎其下，则无所得矣。列出来几个问题。未来补充~</p>
<ul>
<li>Vue生命周期</li>
<li>Vue如何实现双向绑定</li>
<li>使用CSS Module，原理Vue中的使用</li>
<li>开启CSS Module后怎么与第三方样式库</li>
<li>Vue的安装包版本，自定义构建工具的使用（vue-cli官方的，手动构建会碰到什么问题）</li>
<li>Vue-router 原理</li>
<li>webpack中 dev-server原理</li>
<li>webpack中loader实现，如何做任务管理（npm scripts）</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Vue 探索与实践 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[组件通信]]></title>
      <url>/Vue-%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5/vue/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<p>Vue最核心的内容就是数据驱动，完整的掌握组件之间的数据流动方式，在不同的场景下使用不同的方式，尤为重要。组件通信从Vue1.0开始使用 dispatch与events事件对象来进行数据通信， vue2.0简化了api组件间的数据传递有了很多种形式其中一个就是 v-model。</p>
<h4 id="on-emit-v-on"><a href="#on-emit-v-on" class="headerlink" title="$on $emit v-on"></a>$on $emit v-on</h4><blockquote>
<p>组件之间的数据传递与改变需要动作，所谓的动作就好比大家在一起玩丢手绢。我扔给你，你丢给我。动作即事件</p>
</blockquote>
<p><code>$on</code> , <code>$emit</code> 用于自定义事件的监听与触发。</p>
<p><code>v-on</code> 与 <code>$emit</code> 父组件在引入子组件的时用于监听子组件的 <code>$emit</code> 自定义事件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handel1'</span>&gt;</span>派发事件1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handel2'</span>&gt;</span>派发事件2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">        created() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$on(<span class="string">'eat'</span>, (arg)=&gt; &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(arg)</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$on(<span class="string">'run'</span>, (arg)=&gt; &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(arg)</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 数组特性 可以接受多个派发事件 </span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$on([<span class="string">'eat'</span>, <span class="string">'run'</span>], (args)=&gt; &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(args)</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;,  </span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            handel1() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'eat'</span>, <span class="string">'吃饭'</span>)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            handel2() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'run'</span>, <span class="string">'跑步'</span>)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这种做法实际中没有太大意义，通常都是 <code>$emit</code> 自定义的事件在父级中进行触发</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> @<span class="attr">eat</span>=<span class="string">'foo'</span> @<span class="attr">run</span>=<span class="string">'bar'</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handel1'</span>&gt;</span>派发事件1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'handel2'</span>&gt;</span>派发事件2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            handel1() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'eat'</span>, <span class="string">'吃饭'</span>)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            handel2() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'run'</span>, <span class="string">'跑步'</span>)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            foo(arg) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(arg)</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            bar(arg) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(arg)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意点：$on，$emit只能作用于同一个组件实例，$on不能侦听子组件事件的释放。需要使用v-on（@）作用在组件引入的模板上来侦听子组件的事件释放。</p>
</blockquote>
<p>数据传递 官方有一个案例</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"counter-event-example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'button-counter'</span>, &#123;</span></span><br><span class="line"><span class="xml">  template: '<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"incrementCounter"</span>&gt;</span>&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">      counter: 0</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    incrementCounter: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.counter += <span class="number">1</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#counter-event-example'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="undefined">    total: 0</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    incrementTotal: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.total += <span class="number">1</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面操作是为了可以对每一个组件进行一个计数的功能，每一个子组件有自己独立的 <code>counter</code> 累加值，通过触发父组件中事件使 total 进行改变</p>
<p>但是如果仅仅是为了传递数据，不需要改变父组件中数据的状态则不需要这么麻烦。vue2.0对数据的流向进行了限制，子组件数据的改变不应该直接影响父组件，需要通过一些手段</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:msg</span>=<span class="string">msg</span> @<span class="attr">change</span>=<span class="string">'handel'</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">'msg'</span>],</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">'changeText'</span>&gt;</span></span></span><br><span class="line"><span class="undefined">                     &#123;&#123;msg&#125;&#125;</span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            changeText() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'change'</span>, <span class="string">'数据改变通知父组件改变'</span>)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            msg: <span class="string">'数据没有改变'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            handel(val) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.msg = val</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>看着好像很复杂其实在官网的api提供了更加简便的操作。始终记得数据是单向流动的。仅仅要使用传递的数据但是不想改变，官网希望在子组件中定义data存储传递的props。</p>
<h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>通过官网的案例了解一下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br><span class="line">    &#123;&#123;searchText&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'custom-input'</span>, &#123;</span></span><br><span class="line"><span class="javascript">  props: [<span class="string">'value'</span>],</span></span><br><span class="line"><span class="undefined">  template: `</span></span><br><span class="line"><span class="undefined">    &lt;input</span></span><br><span class="line"><span class="javascript">      v-bind:value=<span class="string">"value"</span></span></span><br><span class="line"><span class="javascript">      v-on:input=<span class="string">"$emit('input', $event.target.value)"</span></span></span><br><span class="line"><span class="undefined">    &gt;</span></span><br><span class="line"><span class="undefined">  `</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        searchText: <span class="string">'search'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：为了让它正常工作，这个组件内的 <code>&lt;input&gt;</code> 必须 </p>
<p>将其 <code>value</code> 特性绑定到一个名叫 <code>value</code> 的 prop 上</p>
<p>在其 <code>input</code> 事件被触发时，将新的值通过自定义的 <code>input</code> 事件抛出</p>
</blockquote>
<p><code>v-model</code> 相当于在组件上添加了 <code>:value=searchText</code> <code>@input=&quot;searchText = $event.target.value&quot;</code> 算是一个简化api的功能，用在 <em>input</em> 标签上 <code>v-mode</code> 会自动的去监听 <code>oninput</code> 事件并改变数据。同理表单的其它type都可以使用 <code>v-model</code> 这个功能。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">:checked</span>=<span class="string">"status"</span> @<span class="attr">change</span>=<span class="string">"status = $event.target.checked"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">:checked</span>=<span class="string">"status"</span> @<span class="attr">change</span>=<span class="string">"status = $event.target.checked"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>v-model在组件的使用就这么简单吗？有哪些坑，看一个有冲突的错误案例</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show=true"</span>&gt;</span>打开model<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">model</span> <span class="attr">v-model</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">model</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'model'</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">'value'</span>],</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"value"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                         <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个Model框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"value"</span>&gt;</span></span></span><br><span class="line"><span class="undefined">                        &#123;&#123;value&#125;&#125;</span></span><br><span class="line"><span class="xml">                         <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            close() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, <span class="literal">false</span>)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            show: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>首先注意一下在组件模板上使用了 <code>v-model</code> 让数据传递简化，同时在组件内部的 input同样使用了 <code>v-model</code> 正常打开关闭都可以，但是当把input里边的值删除的时候会发现model框自动关闭了…wtf！！</p>
<p>可以看出来组件内部的 <code>v-model</code> 与模板上的公用了同一个 value，并且$emit事件也是同一个发生了冲突，看控制台可以看到错误，因为内部的尝试改变了父组件数据。</p>
<p>自定义组件的 v-model</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'show=true'</span>&gt;</span>打开<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">model</span> <span class="attr">v-model</span>=<span class="string">'show'</span>&gt;</span><span class="tag">&lt;/<span class="name">model</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'model'</span>, &#123;</span></span><br><span class="line"><span class="undefined">        model: &#123;</span></span><br><span class="line"><span class="javascript">            prop: <span class="string">'flag'</span>,</span></span><br><span class="line"><span class="javascript">            event: <span class="string">'close'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">'flag'</span>],</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                value: <span class="keyword">this</span>.flag</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">'flag'</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个model框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">'value'</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'close'</span>&gt;</span>close model<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            close() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'close'</span>, <span class="literal">false</span>)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            show: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样子就不会和组件内部的 v-model冲突了，因为v-model都是默认 <code>value</code> 属性和 <code>input</code> 事件</p>
<p>看完这个就可以自定义一些表单组件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'base-checkbox'</span>, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">'checked'</span>,</span><br><span class="line">    event: <span class="string">'change'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: <span class="built_in">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type="checkbox"</span></span><br><span class="line"><span class="string">      :checked="checked"</span></span><br><span class="line"><span class="string">      @change="$emit('change', $event.target.checked)"</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>最后看一个简单计数器，从外向里，从里向外进行绑定</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:value</span>=<span class="string">num</span> @<span class="attr">input</span>=<span class="string">'handel'</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    &#123;&#123;num&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">'reduce'</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="undefined">        props: &#123;</span></span><br><span class="line"><span class="undefined">            value: &#123;</span></span><br><span class="line"><span class="javascript">                type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>: <span class="number">0</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                num: <span class="keyword">this</span>.value</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        watch: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 监听父级数据 对num进行时时改变</span></span></span><br><span class="line"><span class="undefined">            value(val) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.num = val</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">                    &#123;&#123;num&#125;&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">'add'</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            add() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.num++</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, <span class="keyword">this</span>.num)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            num: 1</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            reduce() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.num--</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            handel(val) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.num = val</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="sync-归来"><a href="#sync-归来" class="headerlink" title=".sync 归来"></a>.sync 归来</h4><p>从 <code>v-model</code> 到 <code>.sync</code> 其实都是 $emit 与 v-on的语法糖</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo</span> <span class="attr">v-model</span>=<span class="string">'value'</span>&gt;</span><span class="tag">&lt;/<span class="name">demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">demo</span> <span class="attr">v-bind</span>=<span class="string">'value'</span> <span class="attr">v-on:input</span>=<span class="string">'handel'</span>&gt;</span><span class="tag">&lt;/<span class="name">demo</span>&gt;</span></span><br><span class="line">handel(ev)&#123; this.$emit(ev.target.value) &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">demo</span> <span class="attr">:value.sync</span>=<span class="string">'val'</span>&gt;</span><span class="tag">&lt;/<span class="name">demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">demo</span> <span class="attr">:value</span>=<span class="string">'val'</span> <span class="attr">v-on:update:value</span>=<span class="string">'arg =&gt; val=arg'</span>&gt;</span><span class="tag">&lt;/<span class="name">demo</span>&gt;</span></span><br><span class="line">更改的时候显式触发事件</span><br><span class="line">this.$emit('update:value', newValue)</span><br></pre></td></tr></table></figure>
<p>看了这个model框就可以改变一下了</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'flag=true'</span>&gt;</span>打开<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">model</span> <span class="attr">:show.sync</span>=<span class="string">'flag'</span>&gt;</span><span class="tag">&lt;/<span class="name">model</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'model'</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">'show'</span>],</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">'show'</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个model框<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'close'</span>&gt;</span>close model<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            close() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'update:show'</span>, <span class="literal">false</span>)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            flag: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：子组件改变父组件的数据时，update 冒号后面的参数和父组件传递进来的值是同步的，两者一一对应。</p>
</blockquote>
<p>仿佛打开了新世界的大门，对于单个或者多个数据双向绑定的操作 <code>v-mode</code> 和 <code>.sync</code> 还是可以轻松胜任的。但是如果在深层次的数据传递过程中应该使用什么方式？</p>
<h4 id="listener"><a href="#listener" class="headerlink" title="$listener"></a>$listener</h4><p>之前说到过非props特性，可以结合 <code>inheritAttrs</code> 属性和 <code>$attrs</code> 传递属性，可以深层次传递数据。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">one</span> <span class="attr">class</span>=<span class="string">'one'</span> <span class="attr">:text</span>=<span class="string">'text'</span> <span class="attr">v-on:confirm</span>=<span class="string">'confirm'</span> <span class="attr">v-on:change</span>=<span class="string">'change'</span>&gt;</span><span class="tag">&lt;/<span class="name">one</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 子组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'one'</span>, &#123;</span></span><br><span class="line"><span class="javascript">        inheritAttrs: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 传递的两个函数一个触发 一个继续通过 $listeners传递</span></span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">'$emit("confirm")'</span>&gt;</span>confirm<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">two</span> <span class="attr">v-bind</span>=<span class="string">$attrs</span> <span class="attr">v-on</span>=<span class="string">$listeners</span>&gt;</span><span class="tag">&lt;/<span class="name">two</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">        created() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$listeners)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$attrs)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">	</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 子孙组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'two'</span>, &#123;</span></span><br><span class="line"><span class="javascript">        inheritAttrs: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 接受传递的$attrs数据</span></span></span><br><span class="line"><span class="javascript">        props: [<span class="string">'text'</span>],</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"handelChange"</span>&gt;</span>&#123;&#123;text.title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">'$emit("confirm")'</span>&gt;</span>&#123;&#123;text.content&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            handelChange() &#123;</span></span><br><span class="line"><span class="javascript">               	<span class="comment">// 执行函数触发父组件函数改变数据</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.$listeners.change(&#123;<span class="attr">title</span>: <span class="string">'$attrs'</span>, <span class="attr">content</span>: <span class="string">'$listeners'</span>&#125;)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        created() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$listeners)</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.text)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            text: &#123;</span></span><br><span class="line"><span class="javascript">                title: <span class="string">'hello'</span>,</span></span><br><span class="line"><span class="javascript">                content: <span class="string">'world'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            change(val) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.text = val</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            confirm() &#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">'ok 我被输出了~'</span>)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>$emit 与 v-on可以进行父子组件之间的通信，深层次的组件通信可以通过 <code>$listeners</code> 进行事件传递。<code>$listeners</code> 和 <code>$attrs</code> 两者表面层都是一个意思，<code>$attrs</code> 是向下传递数据，<code>$listeners</code> 是向下传递方法，通过手动去调用 <code>$listeners</code> 对象里的方法，原理就是 <code>$emit</code> 监听事件，<code>$listeners</code> 也可以看成一个包裹监听事件的一个对象。 </p>
<h4 id="bus"><a href="#bus" class="headerlink" title="bus"></a>bus</h4><p>以上都是关于父子组件，父子深层次组件数据传递的做法。假设一个页面被分成了很多组件，组件内部又有一些组件嵌套，这时候如果同级的组件之间需要传递数据怎么办呢？数据可以从 子（同级）—父—子（同级）感觉好像很麻烦的样子。bus就像是一个传话员通过创建一个Vue实例，进行数据的中转。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">one</span>&gt;</span><span class="tag">&lt;/<span class="name">one</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">two</span>&gt;</span><span class="tag">&lt;/<span class="name">two</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.prototype.bus = <span class="keyword">new</span> Vue()</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'one'</span>, &#123;</span></span><br><span class="line"><span class="undefined">        data()&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                content: <span class="string">'hello world'</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">'handel'</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            handel() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.bus.$emit(<span class="string">'change'</span>, <span class="keyword">this</span>.content)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'two'</span>, &#123;</span></span><br><span class="line"><span class="undefined">        data() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                text: <span class="keyword">this</span>.content</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        props: &#123;</span></span><br><span class="line"><span class="undefined">            content: &#123;</span></span><br><span class="line"><span class="javascript">                type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">        mounted() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.bus.$on(<span class="string">'change'</span>, (msg) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.text = msg</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;) </span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Vue项目中会将 <code>bus</code> 做为一个单独的模块导出</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="comment">// 可以写内容，在复杂的业务下</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'.bus'</span></span><br><span class="line"><span class="comment">//  同级组件A</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: ComponentB,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        handel() &#123;</span><br><span class="line">            Bus.$emit(<span class="string">'change'</span>, <span class="string">'message'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同级组件B</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: ComponentB,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        Bus.$on(<span class="string">'handel'</span>, (msg)=&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(msg)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在单页SPA项目中以上的通信方式，可以根据不同的情况择优选择，在多个页面之间的数据传递还是需要用到<code>Vuex</code> ,当然组件传递数据方式还有。比如<code>$parent</code> <code>$children</code> 这两个api也可以做到数据互相绑定。总结到这里。~</p>
]]></content>
      
        <categories>
            
            <category> Vue 探索与实践 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序刮刮乐]]></title>
      <url>/%E5%B0%8F%E7%A8%8B%E5%BA%8F/wx/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%AE%E5%88%AE%E4%B9%90/</url>
      <content type="html"><![CDATA[<h3 id="小程序刮刮卡"><a href="#小程序刮刮卡" class="headerlink" title="小程序刮刮卡"></a>小程序刮刮卡</h3><p>最近在项目中实现的一个小功能以及其中的一些小坑, 小程序的出现让很多公司想把用户流量圈到自己的窝里来, 于是就有了一些抽奖的功能. 在实现的过程中找了一些插件发现真的不好用,而且很麻烦, 主要是麻烦!!话不多说, 在这里介绍两种实现思路.</p>
<h3 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h3><p>试想一下, 刮奖无非就是将 <em>canvas</em> 图层抹掉, 让底层的奖品显示出来, 一般刮奖都会设置一个阈值, 当用户刮到一半的时候提示奖品. 所以就可以在刮的过程中 ( <em>move事件</em> ) 记录点, 判断最小点, 最大点得到一个模拟的矩形面积与canvas的面积做比较就可以了. 这个实现是有前提的等下说, 先看基本实现</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外层背景图片设置成需要显示的奖项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">'background: (&#123;&#123;url&#125;&#125; no-repeat center / 100% 100%)'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">'canvas'</span> <span class="attr">canvas-id</span>=<span class="string">'canvas'</span> <span class="attr">style</span>=<span class="string">'width: 300px;height: 200px;margin:100px auto'</span> <span class="attr">bindtouchstart</span>=<span class="string">'onStartTap'</span> <span class="attr">bindtouchmove</span>=<span class="string">'onMoveTap'</span> <span class="attr">bindtouchend</span>=<span class="string">'onEndTap'</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现js</span></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    xPointer: [],</span><br><span class="line">    yPointer: [],</span><br><span class="line">    x: <span class="number">0</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">    flag: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._init();</span><br><span class="line">  &#125;,</span><br><span class="line">  _init() &#123;</span><br><span class="line">    <span class="comment">// 初始化 canvas</span></span><br><span class="line">    <span class="keyword">this</span>.ctx = wx.createCanvasContext(<span class="string">'canvas'</span>);</span><br><span class="line">    <span class="keyword">let</span> w = <span class="number">0</span>, h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> canvas = wx.createSelectorQuery().select(<span class="string">'#canvas'</span>);</span><br><span class="line">    <span class="comment">// 因为不确定手机尺寸 有可能canvas覆盖的是一个 图片或者是一个颜色 这里主要为了获取canvas的宽高</span></span><br><span class="line">    canvas.boundingClientRect(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      w = res.width;</span><br><span class="line">      h = res.height;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        w: w,</span><br><span class="line">        h: h</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 覆盖图片或者是渲染一个底色</span></span><br><span class="line">      <span class="keyword">this</span>.ctx.fillStyle = <span class="string">'#eee'</span>;</span><br><span class="line">      <span class="keyword">this</span>.ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">      <span class="keyword">this</span>.ctx.draw();</span><br><span class="line">    &#125;).exec();</span><br><span class="line">  &#125;,</span><br><span class="line">  onStartTap(event) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = event.touches[<span class="number">0</span>].x;</span><br><span class="line">    <span class="keyword">let</span> y = event.touches[<span class="number">0</span>].y;</span><br><span class="line">    <span class="keyword">this</span>.data.x = x;</span><br><span class="line">    <span class="keyword">this</span>.data.y = y;</span><br><span class="line">    <span class="keyword">this</span>.data.xPointer.push(x);</span><br><span class="line">    <span class="keyword">this</span>.data.yPointer.push(y);</span><br><span class="line">  &#125;,</span><br><span class="line">  onMoveTap(event) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.data.flag)<span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 记录点</span></span><br><span class="line">    <span class="keyword">let</span> nX = event.touches[<span class="number">0</span>].x;</span><br><span class="line">    <span class="keyword">let</span> nY = event.touches[<span class="number">0</span>].y;</span><br><span class="line">    <span class="keyword">this</span>.data.xPointer.push(nX);</span><br><span class="line">    <span class="keyword">this</span>.data.yPointer.push(nY);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置画笔的线宽 </span></span><br><span class="line">    <span class="keyword">this</span>.ctx.setLineWidth(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">this</span>.ctx.setLineCap(<span class="string">'round'</span>);</span><br><span class="line">    <span class="comment">// 画笔经过的路径会变透明</span></span><br><span class="line">    <span class="keyword">this</span>.ctx.globalCompositeOperation = <span class="string">"destination-out"</span>;</span><br><span class="line">    <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">    <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.data.x, <span class="keyword">this</span>.data.y);</span><br><span class="line">    <span class="keyword">this</span>.ctx.lineTo(nX, nY);</span><br><span class="line">    <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">    <span class="comment">// 更新x y</span></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123; <span class="attr">x</span>: nX, <span class="attr">y</span>: nY &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断最小位置 最大位置</span></span><br><span class="line">    <span class="keyword">let</span> pos1 = <span class="keyword">this</span>.getMaxPointer();</span><br><span class="line">    <span class="keyword">let</span> pos2 = <span class="keyword">this</span>.getMinPointer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟的矩形面积 &gt;= canvas画布面积的一半时 提示中奖 清空画布</span></span><br><span class="line">    <span class="keyword">if</span>((pos1.x - pos2.x) * (pos1.y - pos2.y) &gt;= (<span class="keyword">this</span>.data.w * <span class="keyword">this</span>.data.h) &gt;&gt; <span class="number">1</span>)&#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">'恭喜您中奖了'</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 清空画布禁止触发事件</span></span><br><span class="line">      <span class="comment">// this.ctx.clearRect(0, 0, this.data.w, this.data.h);</span></span><br><span class="line">      <span class="comment">// this.ctx.draw()</span></span><br><span class="line">      <span class="comment">// this.data.flag = false;</span></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 连续的划线 必须是这个api啊 一定要注意</span></span><br><span class="line">    wx.drawCanvas(&#123;</span><br><span class="line">      canvasId: <span class="string">'canvas'</span>,</span><br><span class="line">      reserve: <span class="literal">true</span>,</span><br><span class="line">      actions: <span class="keyword">this</span>.ctx.getActions() </span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  getMinPointer() &#123;</span><br><span class="line">    <span class="comment">// 这里考虑过记录点的方式用对象 但是感觉遍历起来不是很方便 索性就用两个数组分别记录x y</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">Math</span>.min.apply(<span class="keyword">this</span>, <span class="keyword">this</span>.data.xPointer);</span><br><span class="line">    <span class="keyword">let</span> y = <span class="built_in">Math</span>.min.apply(<span class="keyword">this</span>, <span class="keyword">this</span>.data.yPointer);</span><br><span class="line">    <span class="keyword">return</span> &#123;x, y&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getMaxPointer() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">Math</span>.max.apply(<span class="keyword">this</span>, <span class="keyword">this</span>.data.xPointer);</span><br><span class="line">    <span class="keyword">let</span> y = <span class="built_in">Math</span>.max.apply(<span class="keyword">this</span>, <span class="keyword">this</span>.data.yPointer);</span><br><span class="line">    <span class="keyword">return</span> &#123;x, y&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>看一下效果 </p>
<p><img src="/img/javascript/bg1.png" alt="bg1"> <img src="/img/javascript/bg2.png" alt="bg1"> </p>
<p>看到了问题, 因为这个是模拟的一个矩形大小, 如果用户斜着拉了一条, 等到的模拟矩形就会有很大的出入了, 这个方法比较有局限的, 我们可以把线设置的宽一点, 但是最终都是会清空画布的所以倒是也无所谓.就是体验不佳.</p>
<h3 id="思路2"><a href="#思路2" class="headerlink" title="思路2"></a>思路2</h3><p>api大法好啊. <code>wx.canvasGetImageData</code> 用来描述canvas区域隐含的像素数据，这个区域通过矩形表示，起始点为<em>(sx, sy)、</em>宽高为(<em>sw、sh)。</em> 用户涂抹的时候不断的去检测 <em>canvas</em> 区域的像素数据, 判断像素点是透明的范围就是刮开的区域大小了.</p>
<p>实现思路把判断面积换成判断百分比</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  onMoveTap(event) &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.data.flag)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">let</span> nX = event.touches[<span class="number">0</span>].x;</span><br><span class="line">    <span class="keyword">let</span> nY = event.touches[<span class="number">0</span>].y;</span><br><span class="line">    <span class="keyword">this</span>.ctx.setLineWidth(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">this</span>.ctx.setLineCap(<span class="string">'round'</span>);</span><br><span class="line">    <span class="keyword">this</span>.ctx.globalCompositeOperation = <span class="string">"destination-out"</span>;</span><br><span class="line">    <span class="keyword">this</span>.ctx.beginPath();</span><br><span class="line">    <span class="keyword">this</span>.ctx.moveTo(<span class="keyword">this</span>.data.x, <span class="keyword">this</span>.data.y);</span><br><span class="line">    <span class="keyword">this</span>.ctx.lineTo(nX, nY);</span><br><span class="line">    <span class="keyword">this</span>.ctx.stroke();</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123; <span class="attr">x</span>: nX, <span class="attr">y</span>: nY &#125;);</span><br><span class="line"></span><br><span class="line">    wx.drawCanvas(&#123;</span><br><span class="line">      canvasId: <span class="string">'canvas'</span>,</span><br><span class="line">      reserve: <span class="literal">true</span>,</span><br><span class="line">      actions: <span class="keyword">this</span>.ctx.getActions() <span class="comment">// 获取绘图动作数组</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.getPercent(<span class="function"><span class="params">_</span>=&gt;</span>&#123;</span><br><span class="line">       wx.showToast(&#123;</span><br><span class="line">         title: <span class="string">'中奖了'</span></span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">this</span>.ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,w,h);</span><br><span class="line">       <span class="keyword">this</span>.ctx.draw();</span><br><span class="line">       <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">         flag: <span class="literal">false</span></span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  getPercent(callBack) &#123;</span><br><span class="line">    wx.canvasGetImageData(&#123;</span><br><span class="line">      canvasId: <span class="string">'canvas'</span>,</span><br><span class="line">      x: <span class="number">0</span>,</span><br><span class="line">      y: <span class="number">0</span>,</span><br><span class="line">      width: <span class="keyword">this</span>.data.w,</span><br><span class="line">      height: <span class="keyword">this</span>.data.h,</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        <span class="keyword">let</span> pixles = res.data,</span><br><span class="line">          	transPixs = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = pixles.length; i &lt; j; i += <span class="number">4</span>) &#123;  <span class="comment">// 因为存储的结构为[R, G, B, A]，所以要每次跳4个长度</span></span><br><span class="line">          <span class="keyword">let</span> a = pixles[i + <span class="number">3</span>];    <span class="comment">// 拿到存储alpha的值 透明度为0 就是透明</span></span><br><span class="line">          <span class="keyword">if</span> (a === <span class="number">0</span>) &#123;</span><br><span class="line">            transPixs.push(i);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'涂抹比例:'</span>+(transPixs.length / (pixles.length / <span class="number">4</span>) * <span class="number">100</span>).toFixed() + <span class="string">'%'</span>)</span><br><span class="line">        <span class="keyword">if</span>((transPixs.length / (pixles.length / <span class="number">4</span>) * <span class="number">100</span>).toFixed() &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">          callBack &amp;&amp; callBack()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>看一下效果:<br><img src="/img/javascript/bg3.png" alt="bg3"><img src="/img/javascript/bg4.png" alt="bg4"></p>
<p>这种方式可能对于体验更好一点, 毕竟api是强大诶. 不过最后还是有一个遗憾的消息要透露一下, 在真机测试了一下ios两种方式都么问题, 但是当我颤抖的握着我的小米6x测的时候发现…第二种竟然不兼容, 查了api 有一句mmp不知当讲不当讲. 手动二哈, 接下来就没有去测试了兼容的东西了果断用了第一种. </p>
<blockquote>
<p>wx.canvasGetImageData(OBJECT, this) 基础库 1.9.0 开始支持，低版本需做<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html" target="_blank" rel="external">兼容处理</a> </p>
</blockquote>
<p>总结一下, 上次开发小程序都是一年前了,现在从新开始感觉还是有点陌生, 希望有好的方法大家一起探讨.哦耶!</p>
]]></content>
      
        <categories>
            
            <category> 小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> wx小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[component]]></title>
      <url>/Vue-%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5/vue/component/</url>
      <content type="html"><![CDATA[<p>日常开发中碰到重复的代码都会自然而然的去想到复用, 封装. Vue中最主要的思想就是组件化, 将一个页面不断的拆分成多个单独的组件,有利于后期的维护与更改. 高内聚, 低耦合, 一起来学习一下Vue中的组件 <em>component</em></p>
<p><img src="https://cn.vuejs.org/images/components.png" alt="component"></p>
<h4 id="Vue-组件基本使用"><a href="#Vue-组件基本使用" class="headerlink" title="Vue 组件基本使用"></a>Vue 组件基本使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件 </span></span><br><span class="line"><span class="comment">// 定义组件名的方式有两种 kebab-case PascalCase 推荐前一种, 后一种可能会在使用的时候失效</span></span><br><span class="line">Vue.component(<span class="string">'button-counter'</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">'&lt;button v-on:click="count++"&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这样定义的组件是在全局注册的, 也就是说在任何一个Vue实例中都可以使用这个组件. 这里边需要注意的地方在于 <code>data</code> 在正常的Vue实例中, data是一个对象, 但是在组件中<strong>一定要写成函数的形式</strong>, 组件都是会被复用的每一份都应该是独立的对象, 如果不是函数,那么组件调用的时候会影响到其它的Vue实例</p>
<p>组件局部注册了就只能在当前注册的Vue实例中使用</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ComponentA = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> ComponentC = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'component-a'</span>: ComponentA,</span><br><span class="line">    <span class="string">'component-b'</span>: ComponentB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>官网中还有这么一段<a href="https://cn.vuejs.org/v2/api/#name" target="_blank" rel="external">描述</a>关于组件的, 大致的意思就是组件的名字最好是显式的写出来, 具有更好的语义信息, 方便在  <a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="external">vue-devtools</a> 中查看</p>
<h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p>如果把一个文章结构拆成多个组件，组件之间肯定会进行数据传递。通过父组件传递数据的同时需要在子组件中定义接收数据的属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-title'</span>, &#123;</span><br><span class="line">    props: [<span class="string">'title'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-title</span> <span class="attr">title</span>=<span class="string">'hello'</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-title</span> <span class="attr">:title</span>=<span class="string">'world'</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-title</span>&gt;</span>  world需要是一个表达式的值</span><br><span class="line"><span class="tag">&lt;<span class="name">blog-title</span> <span class="attr">:title</span>=<span class="string">'123'</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-title</span>&gt;</span>    可以传递 虽然123是静态的数字</span><br></pre></td></tr></table></figure>
<p><code>v-bind</code> 绑定需要一个表达式，bind的数据是动态传递的。如果是 <em>String</em> 类型就需要声明出来，如果是数字字符串则可以不需要，会被解析成字符串。</p>
<p>props在子组件中定义的时候可以定制验证</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    propA:&#123;</span><br><span class="line">        type: <span class="built_in">Number</span></span><br><span class="line">        <span class="keyword">default</span>: <span class="number">0</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    propB: &#123;</span><br><span class="line">        type: [<span class="built_in">String</span>, <span class="built_in">Number</span>]</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中数组， 对象在定义 <code>default</code> 的时候需要返回一个函数。自定义验证函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    propA: &#123;</span><br><span class="line">        type: <span class="built_in">Array</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    propB: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        validator(val) &#123;</span><br><span class="line">            <span class="keyword">return</span> val.length &gt;= <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>props的验证不是强制的还是会被渲染到页面，但是不满足验证的条件会报出相应的警告。</p>
<p>官网有一个很重要的注意！！</p>
<blockquote>
<p>注意那些 prop 会在一个组件实例创建<strong>之前</strong>进行验证，所以实例的属性 (如 <code>data</code>、<code>computed</code> 等) 在 <code>default</code> 或 <code>validator</code> 函数中是不可用的。 </p>
</blockquote>
<p>非props特性</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">class</span>=<span class="string">'data-picker'</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'show'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果组件中没有定义这个 <code>data-picker</code> 会自动添加到child的根元素上。看一个官网的案例非props特性结合 <code>$attrs</code> 可以让传递的数据赋予给特定的元素</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"username"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"username-input"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">"Enter your username"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br><span class="line">    &#123;&#123;username&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'base-input'</span>, &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 禁用特性继承</span></span></span><br><span class="line"><span class="javascript">      inheritAttrs: <span class="literal">false</span>, </span></span><br><span class="line"><span class="javascript">      props: [<span class="string">'label'</span>, <span class="string">'value'</span>],</span></span><br><span class="line"><span class="undefined">      template: `</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="undefined">          &#123;&#123; label &#125;&#125;</span></span><br><span class="line"><span class="undefined">          &lt;input</span></span><br><span class="line"><span class="javascript">            v-bind=<span class="string">"$attrs"</span></span></span><br><span class="line"><span class="javascript">            :value=<span class="string">"value"</span></span></span><br><span class="line"><span class="javascript">            @input=<span class="string">"$emit('input', $event.target.value)"</span></span></span><br><span class="line"><span class="undefined">          &gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="undefined">      `</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            username: <span class="string">'hylas'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>例子中可能有人可能不理解为什么传递的 <code>username</code> 可以传递给父级改变父级的数据。其实</p>
<p> <code>v-model=&quot;username&quot;</code>  可以替换成 <code>:value.sync=&quot;username&quot;</code> 对应的触发事件可以替换成 <code>@input=&quot;$emit(&#39;update:value&#39;, $event.target.value)&quot;</code> 或者进行自定义事件绑定修改父级的数据， v-model的内容是 <em>vue2x</em> 的一个重要使用稍后在组件通信中探讨。</p>
<h4 id="绑定原生事件"><a href="#绑定原生事件" class="headerlink" title="绑定原生事件"></a>绑定原生事件</h4><p>有时候我们可能有这样的需求，给一个组件本身添加事件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> @<span class="attr">click</span>=<span class="string">"handelClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>结果可能没有效果，因为事件是需要给元素去进行绑定，在组件上绑定事件是子组件自定义事件。<code>this.$emit(&#39;click&#39;)</code> 触发的是父组件中定义的 <code>handelClick</code> 并不是原生的 click事件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> @<span class="attr">click.native</span>=<span class="string">"handelClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过添加 native （原生）就可以在组件上绑定对应的原生事件了</p>
<h4 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h4><p>插槽可以实现在组件中分发内容的功能有些场景子组件中的内容可能不确定需要在组件定义的时候进行覆盖</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="undefined">      template: `</span></span><br><span class="line"><span class="javascript">       &lt;button @click=<span class="string">"handel"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="undefined">      `,</span></span><br><span class="line"><span class="undefined">       methods: &#123;</span></span><br><span class="line"><span class="undefined">           handel() &#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">// ...</span></span></span><br><span class="line"><span class="undefined">           &#125;     </span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第一个子组件内容显示提交，在没有写内容的时候slot中的默认内容会直接写在组件中，第二个子组件显示确定覆盖了默认的提交</p>
<h5 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h5><p>如果有多个内容需要从子组件定义的时候传入的会出现什么情况呢？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="undefined">      template: `</span></span><br><span class="line"><span class="xml">      	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="javascript">      		&lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">      		&lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml">      	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">      `</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可能结果不尽人意，slot中的内容重复出现了两次确定、取消。当有多个slot的时候就需要给slot起名字了</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">"confirm"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">slot</span>=<span class="string">"cancel"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="undefined">      template: `</span></span><br><span class="line"><span class="xml">      	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="javascript">      		&lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"confirm"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">      		&lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"cancel"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml">      	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">      `</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h5><p>可从子组件获取数据的可复用的插槽。也就是父组件可以从子组件接受数据，并且可以选择用什么去渲染数据模板 </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">'props'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;props.item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'child'</span>, &#123;</span></span><br><span class="line"><span class="undefined">      data() &#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">            list: [1,2,3,4]</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      template: `</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-for</span>=<span class="string">'item of list'</span> <span class="attr">:item</span>=<span class="string">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">      `</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>固定写法父组件在接受的时候需要通过 <code>template</code> 包含内容 <code>:item</code> 绑定的数据对应 <code>slot-scope=&#39;props&#39;</code> 。可以看的出来props把每一个item放到了一个对象中输出。</p>
<h4 id="动态组件-v-once-keep-alive"><a href="#动态组件-v-once-keep-alive" class="headerlink" title="动态组件 v-once keep-alive"></a>动态组件 v-once keep-alive</h4><p>组件之间难免会有切换的情况。<code>component</code> <code>:is</code> 组合决定显示哪个组件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"type"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toggle"</span>&gt;</span>toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'one'</span>, &#123;</span></span><br><span class="line"><span class="undefined">        created() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'one'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'two'</span>, &#123;</span></span><br><span class="line"><span class="undefined">        created() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'two'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            type: <span class="string">'one'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">            toggle() &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.type = (<span class="keyword">this</span>.type === <span class="string">'one'</span> ? <span class="string">'two'</span> : <span class="string">'one'</span>)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>v-once</code> 只渲染元素和组件<strong>一次</strong>。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。 也就是说这种经常切换的组件一般来说内容不会经常变更可以在组件定义的时候通过这个指令将其变成静态内容。有利于性能。</p>
<p>当组件在 <code>keep-alive</code> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行。 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            lastState: store.state</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    activated() &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">this</span>.lastState !== store.state )&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    deactivated() &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有另一种情况则是在组件切换的过程中想要保持组件的状态，例如两个文章内容第一个有滚动条，一个没有当把第一个滚动条滚动到一定位置，在切换到文章二再切换回文章一此时滚动条的位置应该是不变的，更有利于体验。重新创建动态组件都会执行一遍组件的生命周期，vue提供了 <code>keep-alive</code> 将组件在创建过一次后缓存到内存中，第二次就不会执行创建组件的过程。在单页应用中保存组件状态尤为明显。</p>
]]></content>
      
        <categories>
            
            <category> Vue 探索与实践 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue初始化]]></title>
      <url>/Vue-%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5/vue/vue/</url>
      <content type="html"><![CDATA[<h1 id="Vue-初步认识"><a href="#Vue-初步认识" class="headerlink" title="Vue 初步认识"></a>Vue 初步认识</h1><p>特点</p>
<ul>
<li>对浏览器兼容要求不高，不需要兼容至IE6-8</li>
<li>SPA( Signle page web application ) 单页web应用开发</li>
<li>对性能较高要求</li>
<li>组件化</li>
</ul>
<p>需要具备一定的 HTML CSS Javascript 知识以及一些ES6的语法, 了解Vue可以做什么,有什么东西是我们的目的, 然后在深入的去学习.</p>
<h3 id="vue-cli-使用"><a href="#vue-cli-使用" class="headerlink" title="vue-cli 使用"></a>vue-cli 使用</h3><p>安装了node环境, npm是随着node安装的包管理工具, webpack模块加载器, 对我们应用程序中每一个模块进行打包</p>
<ul>
<li><p>安装vue-cli 全局安装</p>
<blockquote>
<p>npm install vue-cli -g</p>
</blockquote>
</li>
<li><p>创建项目</p>
<blockquote>
<p>vue init webpack-simple name (英文)</p>
</blockquote>
<p>这个时候应该显示了一个关于项目的描述 没有特别需要一路回车下去就好了, 只是有两个地方需要注意就是测试和Eslint语法检测, Eslint语法检测可能很多人不习惯, 可以选择不配置.</p>
</li>
<li><p>安装依赖</p>
<p>因为npm 可能安装比较慢可以将npm源设置成国内的淘宝镜像</p>
<p>运行指令 npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a> 之后就可以使用cnpm执行npm的指令了</p>
<blockquote>
<p>cd name (项目文件中)</p>
<p>cnpm install ( 2.x 会显示是否安装vue-router )</p>
<p>npm run dev </p>
<p>打开localhost:8080 至此项目创建完成</p>
</blockquote>
</li>
</ul>
<h3 id="项目文件夹的各个部分"><a href="#项目文件夹的各个部分" class="headerlink" title="项目文件夹的各个部分"></a>项目文件夹的各个部分</h3><ul>
<li>build：最终发布代码的存放位置。里边有webpack的配置文件</li>
<li>config：配置目录，包括端口号等。我们初学可以使用默认的。</li>
<li>node_modules：这是执行 npm install 后产生的，里面包含了 Node.js 和 npm 依赖的文件以及后续安装的第三方组件或者第三方功能。</li>
<li>src:我们要开发的目录，用于存放页面相关的文件，组件,引入的 <em>Resourse</em> 都会放到这里<ul>
<li>assets: 放置一些图片，如：Logo等；( 完全可以删除 )</li>
<li>components: 存放了一个组件文件，( 完全可以删除 )</li>
<li>App.vue：是我们的主文件，项目入口文件</li>
<li>main.js: 项目的核心文件, 最终生成的文件</li>
<li>router：其中包括的index.js，则是项目的路由</li>
</ul>
</li>
<li>static：一般用于存放静态资源，如图片、字体等。里边还有一个 <code>.gitkeep</code> 保证可以执行git</li>
<li>.babelrc文件：用来设置转码的规则和插件的，一般情况不需要设置。</li>
<li>.editorconfig：编码设置, 代码缩进, 空格, 末尾插入新行, 去掉两端空格等</li>
<li>.eslintignore：eslint代码风格检测忽略的文件</li>
<li>.eslintrc：eslint的配置</li>
<li>.gitignore文件：如果你需要将项目放到 git 目录里，你又不想提交其中的某一部分文件，那么你就可以在.gitignore文件中添加它们。 </li>
<li>index.html：主页</li>
<li>package.json：项目的描述,依赖管理所安装的包，里面包含项目的各类信息，如第三方版本,主要关注一下script里边的配置</li>
<li>README.md：说明文档</li>
</ul>
<h3 id="Vue-实例中的成员"><a href="#Vue-实例中的成员" class="headerlink" title="Vue 实例中的成员"></a>Vue 实例中的成员</h3><p>如果不是通过vue-cli创建的项目,创建一个Vue的实例</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="comment">// 成员</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>官网描述</p>
<blockquote>
<p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置<strong>数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等</strong>。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。 </p>
</blockquote>
<p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="vue生命周期"></p>
<p><strong>1.beforeCreate</strong></p>
<p>在实例初始化之后，数据观测（data observer）和 event/watcher 事件配置之前被调用。</p>
<p><strong>2.created</strong></p>
<p>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测（data observer）、属性和方法的运算、watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p>
<p><strong>3.beforeMount</strong></p>
<p>在挂载开始之前被调用，相关的 render 函数将首次被调用。</p>
<p>注意：该钩子在服务器端渲染期间不被调用。</p>
<p><strong>4.mounted</strong></p>
<p>el 被新创建的 vm.el替换，并挂载到实例上去之后调用该钩子。如果root实例挂载了一个文档内元素，当mounted被调用时vm.el替换，并挂载到实例上去之后调用该钩子。如果root实例挂载了一个文档内元素，当mounted被调用时vm.el 也在文档内。页面渲染完成后初始化的处理都可以放在这里。</p>
<p>注意：mounted 不会承诺所有的子组件也都一起被挂载。</p>
<p><strong>5.beforeUpdate</strong></p>
<p>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。</p>
<p>你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>
<p>注意：该钩子在服务器端渲染期间不被调用。</p>
<p><strong>6.updated</strong></p>
<p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>
<p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。</p>
<p>注意：updated 不会承诺所有的子组件也都一起被重绘。</p>
<p><strong>7.activated</strong></p>
<p>keep-alive 组件激活时调用。</p>
<p>注意：该钩子在服务器端渲染期间不被调用。</p>
<p><strong>8.deactivated</strong></p>
<p>keep-alive 组件停用时调用。</p>
<p>注意：该钩子在服务器端渲染期间不被调用。</p>
<p><strong>9.beforeDestroy</strong></p>
<p>实例销毁之前调用。在这一步，实例仍然完全可用。</p>
<p>注意：该钩子在服务器端渲染期间不被调用。</p>
<p><strong>10.destroyed</strong></p>
<p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>
<p>注意：该钩子在服务器端渲染期间不被调用。</p>
<p>以上这些生命周期钩子函数需要在不断的实践中才可以体会. 除了这些Vue实例中还有其它的一些元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        msg: <span class="string">'Hello Vue.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>methods watch computed</strong> 这是那个都是函数区别有哪些呢?</p>
<ul>
<li><p>methods 方法</p>
<p>通过DOM操作触发这些函数 进行 <code>v-on</code> 的事件绑定, 也可以在当前Vue实例中调用this.FunName调用, 需要手动执行</p>
</li>
<li><p>watch 侦听器</p>
<p><em>watch</em> 与 <em>computed</em> 预先定义函数, 可以理解为预备队 两者都是在数据发生变化之后进行相应的处理, 会自动调用</p>
<p>watch中的配置可以在官网看到详细的说明  <code>hander</code> ,  <code>deep</code> , <code>immediate</code> </p>
</li>
<li><p><em>computed</em> 计算属性 依赖其它的数据发生改变而调用, <strong>计算属性是基于它们的依赖进行缓存的</strong> ,只要依赖数据没有改变,访问数据都会立马返回原有数据, 如果使用普通的方法, 多次执行都会重新调用方法</p>
</li>
<li><p>对比 </p>
<p><em>watch</em> 擅长处理的场景: 一个数据影响多个数据</p>
<p><em>computed</em> 擅长处理的场景: 一个数据受多个数据影响</p>
</li>
</ul>
<h3 id="Vue-指令"><a href="#Vue-指令" class="headerlink" title="Vue 指令"></a>Vue 指令</h3><p>渲染区别? 原生的与Vue的渲染都是在满足一定条件进行渲染,. 原生 <code>visibility: hidden</code> <code>display:none</code> ,前者针对元素的可见性, 布局不会改变, 后者会重新进行布局,多的不谈. 但是无论是前者后者DOM都已经存在并且占用的资源.</p>
<h4 id="条件渲染-与-列表渲染"><a href="#条件渲染-与-列表渲染" class="headerlink" title="条件渲染 与 列表渲染"></a>条件渲染 与 列表渲染</h4><p>关于<strong>v-show,  v-if</strong> 官网解释 很详细了.</p>
<blockquote>
<p><code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS 属性 <code>display</code> </p>
<p><code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。 </p>
<p><code>v-if</code> 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p>
<p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>
<p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>
<p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p>
<p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级。 </p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span> <span class="comment">&lt;!-- v-show 不行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> &gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>=<span class="string">"flag"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> &gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            flag: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>v-for </strong>指令根据一组数组的选项列表进行渲染</p>
<p><strong>v-bind</strong> 动态的改变一些属性 <code>class</code> <code>src</code> <code>id</code>等, vue 语法风格简写 <code>:attr</code>  <strong>bind</strong>结合<strong>filter</strong>味道更好</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单个class --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 条件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;'active' : count &gt; 0&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                           </span><br><span class="line"><span class="comment">&lt;!-- 多个class --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 计算属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"computedClass"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 三目运算 注意是数组 不习惯替换成计算属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- src --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"data.icon"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Vue-模板语法"><a href="#Vue-模板语法" class="headerlink" title="Vue 模板语法"></a>Vue 模板语法</h3><p>官网对Vue的介绍</p>
<blockquote>
<p>Vue.js 使用了基于 HTML 的模版语法，允许开发者声明式地将 DOM 绑定至底层 Vue.js 实例的数据。 Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统。 结合响应系统，在应用状态改变时， Vue.js 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;!-- html --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // js</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    /* css */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>最终渲染到页面其实还是html,css,js的页面</p>
]]></content>
      
        <categories>
            
            <category> Vue 探索与实践 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Event]]></title>
      <url>/Javascript/javascript/Event_02/</url>
      <content type="html"><![CDATA[<h2 id="delegate-事件委托"><a href="#delegate-事件委托" class="headerlink" title="delegate 事件委托"></a>delegate 事件委托</h2><p>事件中一个很重要的概念 <em>事件委托</em> ,对于事件处理程序过多,绑定过多的重复事件损耗性能.事件委托其实就是指定一个处理程序,管理某一类型所有的事件.利用了事件冒泡的原理.</p>
<p>在event事件对象中两个属性<code>currentTarget</code>  <code>target</code> ,分别为当前事件对象、目标事件对象.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span>box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e.currentTarget === e.target);  <span class="comment">// true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    wrap.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e.currentTarget === e.target);  </span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果点级的是 a   ---&gt; false</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果点击的是 div ---&gt; true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 如果wrap中有很多a标签都需要设置点击一下改变字体样式,肯定会写很多的重复的点击事件,利用委托就很容易做到,减少DOM添加事件次数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wrap.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.target.tagName === <span class="string">'A'</span>)&#123;</span><br><span class="line">        <span class="comment">// 代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>过去当不知道利用事件委托的时候,有一个场景出错率很大.简单的说明一下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"add"</span>&gt;</span>add p element<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> pDoms = <span class="built_in">document</span>.querySelectorAll(<span class="string">'#box p'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> boxDom = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btnDom = <span class="built_in">document</span>.getElementById(<span class="string">"add"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;pDoms.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">        pDoms[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="keyword">this</span>.innerHTML);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    btnDom.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        boxDom.innerHTML += <span class="string">'&lt;p&gt;'</span>+<span class="built_in">Math</span>.random()+<span class="string">'&lt;/p&gt;'</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 没有去点击add时, 之前绑定的事件都存在.当点击add之后前边的事件全丢失了.这个是innerHTM去添加节点出现的问题,点击添加放上去的节点已非原来的节点了.</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 解决方式1: 创建节点并追加, 这样子可以保留原来的</span></span></span><br><span class="line"><span class="javascript">    btnDom.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">        p.innerText = <span class="built_in">Math</span>.random();</span></span><br><span class="line"><span class="javascript"> 		p.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="keyword">this</span>.innerHTML)&#125;</span></span><br><span class="line"><span class="undefined">        boxDom.append(p);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 方式2: 把事件绑定到标签中 原来的事件自然也要绑定到标签中</span></span></span><br><span class="line"><span class="javascript">    btnDom.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="xml">        boxDom.innerHTML += '<span class="tag">&lt;<span class="name">p</span> <span class="attr">onclick</span>=<span class="string">"fn(this)"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>';</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 方式3: innerHTML添加之后在重新绑定一次事件 麻烦到家</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 方式4: 委托</span></span></span><br><span class="line"><span class="javascript">    boxDom.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(e.target.tagName === <span class="string">'P'</span>)&#123;</span></span><br><span class="line"><span class="undefined">            alert(e.target.innerHTML);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要说明一下,这里绑定事件中使用事件监听的方式当然是可以的.在jq的使用中如果不知道使用 <code>on</code> 绑定并且使用了方式3,那么就会出现重复绑定事件的情况了.需要注意一下.</p>
<h2 id="事件触发器"><a href="#事件触发器" class="headerlink" title="事件触发器"></a>事件触发器</h2><p>dispatchEvent是作为高级浏览器(如chrome、Firfox等)的事件触发器来使用的，那么什么是事件触发器？就是触发事件的东西。可能有人觉得有点莫名其妙，触发事件不是在交互中被触发的吗？的确，通常情况下，事件的触发都是由用户的行为如点击、刷新等操作实现，但是，其实有的情况下，事件的触发也可以由程序来实现，比如ajax框架的一些自定义事件。和正常事件的绑定一样。对于浏览器而言，绑定事件分为高级浏览器和IE浏览器两派，事件触发器也是分为,高级浏览器和IE两派。</p>
<p>在非ie中可以使用 <code>createEvent</code> 创建event对象，接受一个参数表示要创建的事件类型</p>
<ul>
<li>UIEvents：一般化的 UI 事件。 鼠标事件和键盘事件都继承自 UI 事件。 DOM3 级中是 UIEvent。</li>
<li>MouseEvents：一般化的鼠标事件。 DOM3 级中是 MouseEvent。 </li>
<li>MutationEvents：一般化的 DOM 变动事件。 DOM3 级中是 MutationEvent。</li>
<li>HTMLEvents：一般化的 HTML 事件。没有对应的 DOM3 级事件 </li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非ie ie9+</span></span><br><span class="line"><span class="comment">// 创建事件对象实例</span></span><br><span class="line"><span class="keyword">var</span> haha = <span class="built_in">document</span>.createEvent(<span class="string">'HTMLEvents'</span>);  <span class="comment">// UIEvents</span></span><br><span class="line"><span class="comment">// 初始化参数 事件名 是否冒泡 是否阻止默认事件</span></span><br><span class="line">haha.initEvent(<span class="string">'haha'</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 添加一些属性</span></span><br><span class="line">haha.name = <span class="string">'老狗'</span>；</span><br><span class="line">haha.age = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 给doucment绑定一下</span></span><br><span class="line"><span class="built_in">document</span>.addEvenetListener(<span class="string">'haha'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    alert(e.name +<span class="string">":"</span>+ e.age);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 怎么触发呢？没见过这个事件啊</span></span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(haha);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ie 不能自定义事件</span></span><br><span class="line"><span class="keyword">var</span> haha = <span class="built_in">document</span>.createEventObject();</span><br><span class="line">haha.name = <span class="string">'小狗'</span>;</span><br><span class="line">haha.age = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">document</span>.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    alert(e.name +<span class="string">":"</span>+ e.age);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.fireEvent(<span class="string">'onclick'</span>,haha);</span><br></pre></td></tr></table></figure>
<p>通常用来做一些自定义的事件，模拟一些事件。使用jq对应 <code>trigger</code> </p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> event </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[event target]]></title>
      <url>/Javascript/javascript/Event_01/</url>
      <content type="html"><![CDATA[<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>页面与用户之间的交互是通过事件完成的。事件是用户自身的操作或者浏览器自身的一些动作。比如常见的用户的点击，浏览器load事件。在事件发生的过程中会记录一些用户的操作信息或者浏览器的动作信息。学习事件需要了解事件的机制（冒泡、捕获），不同浏览器对dom事件的写法以及delegate，onload、domReady等等。</p>
<p>DOM处理事件的方式，可以写在标签中执行。也可以通过js添加属性事件例如 <code>onclick</code>，或者事件监听方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onclick = &quot;fn()&quot;&gt;&lt;/div&gt;</span><br><span class="line">divDom.onclick = fn;</span><br><span class="line">divDom.addEventListener(&apos;click&apos;, fn);</span><br></pre></td></tr></table></figure>
<h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><p>页面上执行事件时候有一个顺序</p>
<p><img src="/img/javascript/event.png" alt="event"></p>
<p>DOM流中当点击了一个div，实际上也相当于点击了body、html、window。在非IE给dom添加监听事件的方法最后一个参数代表是否捕获，默认不捕获。还是参照上边的图做一个简单的说明</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">divDom.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'div1'</span>)&#125;, <span class="literal">false</span>)</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'body'</span>)&#125;, <span class="literal">false</span>)</span><br><span class="line"><span class="built_in">document</span>.documentElement.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'document'</span>)&#125;, <span class="literal">false</span>)</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'window'</span>)&#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">divDom.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'div2'</span>)&#125;, <span class="literal">true</span>)</span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'body'</span>)&#125;, <span class="literal">true</span>)</span><br><span class="line"><span class="built_in">document</span>.documentElement.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'document'</span>)&#125;, <span class="literal">true</span>)</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'window'</span>)&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<p>当点击了 div 会优先触发父元素的捕获事件依次向子元素执行，其次在从子元素依次执行不捕获事件（冒泡阶段）。针对事件源，哪个事件写在前优先执行哪个事件。</p>
<p>阻止冒泡。有时候可能我们不需要事件产生冒泡，这个时候就要断绝父子关系了js中有两种方式。但是冒泡也是有好处的，不要觉得冒泡不好例如 <em>delegate</em> 就是利用的冒泡。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">event.cancelBubble = <span class="literal">true</span>;   <span class="comment">// 非标准  无兼容问题 推荐使用（真的是比另外一个好记多了）</span></span><br><span class="line">event.stopPropagation();     <span class="comment">// 标准</span></span><br></pre></td></tr></table></figure>
<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>IE浏览器的监听方式和其它浏览器不同 <code>attachEvent</code> <code>addEventListener</code> 两种。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">el.attachEvent(type, fn)</span><br><span class="line">el.addEventListener(type, fn, boolean);</span><br></pre></td></tr></table></figure>
<p>两者的 <em>type</em> 有一点区别 IE的事件和属性添加的一样 <code>on+type</code> ，跨浏览器事件处理</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eventHandle = <span class="function"><span class="keyword">function</span>(<span class="params">obj, type, fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.addEventListener)&#123;</span><br><span class="line">        obj.addEventListener(type, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.attachEvent)&#123;</span><br><span class="line">        obj.attachEvent(<span class="string">'on'</span>+type, fn);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        obj[on+<span class="string">'type'</span>] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然可以跨浏览器使用这个方法。但是有一个问题，IE中绑定事件的传入的fn，<code>this</code> 指向不是当前的 <em>obj</em> 。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;alert(<span class="keyword">this</span>.innerText)&#125;;</span></span><br><span class="line"><span class="javascript">    box.attachEvent(<span class="string">'onclick'</span>, fn);  <span class="comment">// undefined</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>嫌弃IE可能这一点占了很大一部分，可以通过 <code>call</code> <code>apply</code> <code>bind</code> 来改变 <code>this</code> 的指向。但是低版本的IE不支持<code>bind</code> 绑定。修改一下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eventHandle = <span class="function"><span class="keyword">function</span>(<span class="params">obj, type, fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.addEventListener)&#123;</span><br><span class="line">        obj.addEventListener(type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            fn.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.attachEvent)&#123;</span><br><span class="line">        obj.attachEvent(<span class="string">'on'</span>+type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            fn.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        obj[on+<span class="string">'type'</span>] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>很好，但是有点觉得这个东西有点重复把fn在提取出来</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eventHandle = <span class="function"><span class="keyword">function</span>(<span class="params">obj, type, fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        fn.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(obj.addEventListener)&#123;</span><br><span class="line">        obj.addEventListener(type, handle, <span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.attachEvent)&#123;</span><br><span class="line">        obj.attachEvent(<span class="string">'on'</span>+type, handle);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        obj[on+<span class="string">'type'</span>] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handle</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>基本上没有问题， 事件绑定之后可能回去解除绑定的函数，这个写法找不到对应的函数，需要把这个函数return出去。所以重新写一个事件处理函数添加解除绑定的方法。为了形成一个完整的处理函数，里边的每一个功能分开</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eventHandle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fire = <span class="function"><span class="keyword">function</span>(<span class="params">el, type, fn</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> handle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            fn.apply(obj, <span class="built_in">arguments</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(obj.addEventListener)&#123;</span><br><span class="line">            obj.addEventListener(type, handle, <span class="literal">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.attachEvent)&#123;</span><br><span class="line">            obj.attachEvent(<span class="string">'on'</span>+type, handle);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            obj[<span class="string">'on'</span>+ type] = fn;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> handle;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> remove = <span class="function"><span class="keyword">function</span>(<span class="params">el, type, handle</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.removeEventListener)&#123;</span><br><span class="line">            obj.removeEventListener(type, handle, <span class="literal">false</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.deatchEvent)&#123;</span><br><span class="line">            obj.deatchEvent(<span class="string">'on'</span>+type, handle);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            obj[on+<span class="string">'type'</span>] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        fire: fire,</span><br><span class="line">        remove: remove</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">var</span> handle = eventHandle.fire(boxDom, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.innerText);</span><br><span class="line">&#125;)</span><br><span class="line">eventHandle.remove(boxDom, <span class="string">'click'</span>, handle);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">~<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.addEventListener)&#123;</span><br><span class="line">        $.addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">el,type,callBack</span>)</span>&#123;</span><br><span class="line">            el.addEventListener(type,callBack,<span class="literal">false</span>);</span><br><span class="line">            el[type+<span class="string">'callBack'</span>] = el[type+<span class="string">'callBack'</span>] || [];</span><br><span class="line">            el[type+<span class="string">'callBack'</span>].push(callBack);</span><br><span class="line">            <span class="keyword">return</span> callBack;</span><br><span class="line">        &#125;</span><br><span class="line">        $.off = <span class="function"><span class="keyword">function</span>(<span class="params">el,type,fn</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> fn != <span class="string">'undefined'</span>)&#123;</span><br><span class="line">                el.removeEventListener(type,fn,<span class="literal">false</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                el[type+<span class="string">'callBack'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">                    el.removeEventListener(type,item);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $.attachEvent = <span class="function"><span class="keyword">function</span>(<span class="params">el,type,callBack</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> bound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fn.apply(el,<span class="built_in">arguments</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            el.attachEvent(<span class="string">'on'</span>+type,bound);</span><br><span class="line">            <span class="keyword">return</span> bound;</span><br><span class="line">        &#125;;</span><br><span class="line">        $.off = <span class="function"><span class="keyword">function</span>(<span class="params">el,type,fn</span>)</span>&#123;</span><br><span class="line">            el.detachEvent(<span class="string">'on'</span>+type,fn);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>
<p>另外尝试，因为事件监听的方式不会产生覆盖，如果想一次性清除所有的相同类型的事件可以采用上边的写法。都是简单的尝试，更多的细节也可以去查看一下jq的源码，其中对事件的处理方式很多东西值得学习。</p>
<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>在DOM上触发某个事件的时候会产生一个事件对象，用来记录与这个事件相关信息。非IE中这个事件对象存在于绑定函数的参数中，IE则不能直接使用这个参数而是通过访问window对象底下的event对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">el.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">	e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    alert(e);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>阻止冒泡也是通过事件对象底下属性和方法去做到的。事件对象还能做什么呢？</p>
<blockquote>
<p>鼠标位置可以用来做很多事情。IE与非IE鼠标位置的获取不同 <code>clientX/Y</code> <code>pageX/Y</code> </p>
</blockquote>
<p>区别：pageX/Y 不兼容ie9-。获取的值clientX/Y获取到可视区的距离，pageX/Y获取到浏览器的绝对距离，但是如果要在IE下获取到距离浏览器的绝对距离就需要手写了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">posXY</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || event;</span><br><span class="line">    <span class="keyword">var</span> pos = &#123;<span class="attr">x</span>:<span class="number">0</span>, <span class="attr">y</span>:<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(e.pageX)&#123;</span><br><span class="line">        pos.x = e.pageX;</span><br><span class="line">        pos.y = e.pageY;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        pos.x = e.clientX + <span class="built_in">document</span>.documentElement.scrollLeft;</span><br><span class="line">        pos.y = e.clientY + <span class="built_in">document</span>.documentElement.scrollTop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>阻止默认事件 </p>
</blockquote>
<p>如果调用事件的对象 <code>cancelable</code> 的值为true，那就表明存在默认事件。a链接，表单提交，浏览器滚动条，有时候都需要阻止其中的默认事件 w3c的方法是<code>e.preventDefault()</code>，IE则是使用 <code>e.returnValue = false</code> js中使用<code>return false</code> 也可以做到当然只是高级浏览器。</p>
<blockquote>
<p>键码</p>
</blockquote>
<p>玩过游戏的都知道键盘上我们可以控制游戏人物的方向，键盘事件中 <code>event.keyCode</code> 用来监听按了哪一个按键，查询对应的键码就知道按下了哪一个键。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || event;</span><br><span class="line">    <span class="keyword">if</span>(e.keyCode == <span class="number">13</span>)&#123;  <span class="comment">// 回车键</span></span><br><span class="line">        <span class="comment">// 操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>鼠标按键</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阻止右键菜单</span></span><br><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 自定义右键菜单  0--左键  1--滚轮  2--右键</span></span><br><span class="line"><span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e = e || event;</span><br><span class="line">    <span class="keyword">var</span> x = e.pageX;</span><br><span class="line">    <span class="keyword">var</span> y = e.pageY;</span><br><span class="line">    <span class="keyword">if</span>(e.button == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> divDom = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">        <span class="keyword">with</span>(divDom.style)&#123;</span><br><span class="line">          	width = <span class="string">'100px'</span>;</span><br><span class="line">            height = <span class="string">'100px'</span>;</span><br><span class="line">            background = <span class="string">'red'</span>;</span><br><span class="line">            position = <span class="string">'absoulte'</span>;</span><br><span class="line">            left = x + <span class="string">'px'</span>;</span><br><span class="line">            top = y + <span class="string">'px'</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> event </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[setInterval setTimeout（一）]]></title>
      <url>/BOM/javascript/setInterval%20setTimeout/</url>
      <content type="html"><![CDATA[<h2 id="js中的定时器"><a href="#js中的定时器" class="headerlink" title="js中的定时器"></a>js中的定时器</h2><p>JavaScript是单线程语言，但它允许通过设置超时值，间歇时间值来调度代码在特定时刻执行。这两个分别是<em>window</em> 对象的 <code>setTimeout</code> 与 <code>setInterval</code> 方法，返回值是一个 <code>intervalID</code> 可以传递给 <code>clearTimeout</code> 与 <code>clearInterval</code> </p>
<h3 id="简单的认识"><a href="#简单的认识" class="headerlink" title="简单的认识"></a>简单的认识</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intervalID1 = setTimeout(func, delay);</span><br><span class="line"><span class="keyword">var</span> intervalID2 = setTimeout(func, delay, param...);</span><br><span class="line"><span class="keyword">var</span> intervalID3 = setInterval(func, delay);</span><br><span class="line"><span class="keyword">var</span> intervalID4 = setInterval(func, delay, param...);</span><br></pre></td></tr></table></figure>
<p>先来看一下定时器的写法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; alert(<span class="number">1</span>) &#125;;</span><br><span class="line">setTimeout(fn, <span class="number">1000</span>);</span><br><span class="line">setTimeout(<span class="string">"fn()"</span>, <span class="number">1000</span>);  <span class="comment">// 不推荐写法 evel</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; fn() &#125;, <span class="number">1000</span>); <span class="comment">// 通过回调的方式调用 多了不必要的开销 但是可以去传递参数</span></span><br></pre></td></tr></table></figure>
<p>其中要注意一点</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> 	setTimeout(<span class="string">"fn()"</span>, <span class="number">1000</span>);  <span class="comment">// 报错 fn is not defined 如果fn写在全局是可以的 所以这里个人认为可能是eval去解析了 字符fn() 但是fn必须是 window作用域底下的函数 局部作用域会找不到fn 虽然有点牵强但是知道有这个坑就好了</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; alert(<span class="number">1</span>) &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当调用的函数有参数的时候</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>)</span>&#123; <span class="built_in">console</span>.log(a, b) &#125;;</span><br><span class="line">setTimeout(<span class="string">"fn(1, 2)"</span>, <span class="number">1000</span>);  <span class="comment">// 不推荐 eval</span></span><br><span class="line">setTimeout(fn, <span class="number">1000</span>, <span class="number">1</span>, <span class="number">2</span>);    <span class="comment">// IE9-不支持第一种语法中向延迟函数传递额外参数的功能</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;<span class="built_in">console</span>.log(num)&#125;, <span class="number">1000</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p><strong>this</strong></p>
<p>定时器中的this也是一个很容易出错的地方</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">10</span>,</span><br><span class="line">    printa()&#123;</span><br><span class="line">       alert(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">obj.printa(); <span class="comment">// 10  obj</span></span><br><span class="line">setTimeout(obj.printa, <span class="number">1000</span>); <span class="comment">// 20  window</span></span><br></pre></td></tr></table></figure>
<p><code>setInterval</code> 与 <code>setTimeout</code> 中执行的代码在一个单独的执行上下文中运行到它所调用的函数中。因此，被调用函数的this关键字将被设置为window对象，它不会与调用的函数最初的上下文环境相同</p>
<p>有方式解决嘛? 当然</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(obj.printa.bind(obj), <span class="number">1000</span>);  <span class="comment">// 通过bind改变</span></span><br><span class="line"><span class="comment">// 因为bind不兼容 可能有人在这里想这样写 setTimeout.call(obj, obj.printa, 1000), 很遗憾报错 Uncaught TypeError: Illegal invocation</span></span><br><span class="line"><span class="comment">// 无法通过call把对象传递给回调函数</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己动手封装一下好了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTime</span>(<span class="params">callBack, delay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> content = <span class="keyword">this</span>,</span><br><span class="line">        args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        callBack.apply(content, args);</span><br><span class="line">    &#125;, delay)</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// MDN上给出了一中方法是 还是重新写了一遍</span></span><br><span class="line"><span class="keyword">var</span> __nativeST__ = <span class="built_in">window</span>.setTimeout, __nativeSI__ = <span class="built_in">window</span>.setInterval;</span><br><span class="line"><span class="built_in">window</span>.setTimeout = <span class="function"><span class="keyword">function</span> (<span class="params">vCallback, nDelay </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oThis = <span class="keyword">this</span>,</span><br><span class="line">        aArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">return</span> __nativeST__(vCallback <span class="keyword">instanceof</span> <span class="built_in">Function</span> ? <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            vCallback.apply(oThis, aArgs);</span><br><span class="line">      &#125; : vCallback, nDelay);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.setInterval = <span class="function"><span class="keyword">function</span> (<span class="params">vCallback, nDelay </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oThis = <span class="keyword">this</span>,</span><br><span class="line">        aArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">return</span> __nativeSI__(vCallback <span class="keyword">instanceof</span> <span class="built_in">Function</span> ? <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            vCallback.apply(oThis, aArgs);</span><br><span class="line">      &#125; : vCallback, nDelay);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>简单的区别两者就是 <code>setTImeout</code> 仅会在超时值执行一次，但是这个超时值不一定是我们所设置的那个值。<code>setInterval</code> 会间歇性的调用，但是这个间歇时间可能会让程序出现问题。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">_</span>=&gt;</span>&#123; alert(<span class="number">1</span>) &#125;, <span class="number">500</span>); <span class="comment">// 有意思的事情就来了 弹窗并非很快的执行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10e8</span>;i++)&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>这个是因为window对象底下的定时器属于异步语句，js单线程的执行。当程序自上而下的去执行的时候，优先执行同步代码，浏览器会把异步的语句放入一个 <strong>异步语句列队</strong>(定时器，webAPI，DOM，ajax)，当js主线程的任务执行完毕之后在依次执行异步语句。</p>
<p>怎么去依次执行的异步语句呢？这个就是 <code>delay</code> 参数起作用了。延迟时间实际上的意思相当于 <em>当js主线程的任务完成之后异步列队中的语句推入主线程执行的时间</em> </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">_</span>=&gt;</span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>) &#125;, <span class="number">500</span>); </span><br><span class="line">setTimeout(<span class="function"><span class="params">_</span>=&gt;</span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>) &#125;, <span class="number">100</span>); </span><br><span class="line">setInterval(<span class="function"><span class="params">_</span>=&gt;</span>&#123; <span class="built_in">console</span>.log(<span class="number">3</span>)&#125;, <span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10e8</span>;i++)&#123;&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   3</span></span><br><span class="line"><span class="comment">   2</span></span><br><span class="line"><span class="comment">   1</span></span><br><span class="line"><span class="comment">   3...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>通过 <code>setTimeout</code> 可以模拟 <code>setInterval</code> 。更多的可能会用 <em>out</em> 来模拟 <em>interval</em> </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的示例</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    setTimeout(fn, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>
<p><code>setTimeout</code> 会在fn执行从上而下执行完成，在调用下一次定时器。而 <code>setInterval</code> 不会等待fn执行完成而是会</p>
<p>到达调用时间间隔就会插入事件列队去执行。所以在做某些场景的时候不要去影响业务就好了。 </p>
<h3 id="定时器休眠"><a href="#定时器休眠" class="headerlink" title="定时器休眠"></a>定时器休眠</h3><p>浏览器是很智能的程序。当用户切换了当前显示的页面，或者最小化窗口的时候 <code>setInterval</code> 会暂时进入休眠状态，但是并不是停止，而是很缓慢，并且在这个时间段的执行语句都会放入一个列队，当用户再次进入页面的时候会一次性全部执行，在很多 <em>canvas</em> 的效果中这个现象很普遍，以及在做无缝的轮播的时候可能也会碰到这样子的问题。贴一个链接可以去查看。<a href="http://www.html5tricks.com/demo/html5-canvas-dance-time/index.html" target="_blank" rel="external">Canvas实现会跳舞的时间动画</a> 切换到其它页面等一会在切换回去就会发现问题了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = ++index;</span><br><span class="line">&#125;, <span class="number">30</span>)</span><br><span class="line"><span class="comment">// 更改title打开页面可以看到快速的变化，切换到其它的页面会发现 title的改变会变得很缓慢。就是 setInterval的休眠机制 很有趣 h5 API另外一个 window.requestAnimationFrame()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title = ++index;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(fn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>window.requestAnimationFrame()</code> 比起 <code>setInterval</code> 会更加的稳定因为它会随着浏览器刷新频率的变化而变化做动画会更加的平滑。上边的执行当切换到其它的页面。title会停止改变，也就是说会更加的节约浏览器的开支消耗。这个不是重点。</p>
]]></content>
      
        <categories>
            
            <category> BOM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> BOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BOM]]></title>
      <url>/BOM/javascript/BOM/</url>
      <content type="html"><![CDATA[<p><img src="/img/javascript/dom/bom.jpg" alt="BOM"></p>
<p><em>ECMAScript</em> 是 <em>JavaScript</em> 语法的核心规范，如果在 <em>web</em> 中使用 <em>JavaScript</em>，那么 <em>BOM</em> 则是一个很重要的核心。BOM提供了很多的对象，用于访问浏览器的功能。BOM最早没有一个统一的规范导致浏览器厂商都有自己的想法随意的去扩展。后来把浏览器共有的对象做为事实上的标准。这些对象在浏览器中得以存在。W3C为了把浏览器中基本的部分标准化，将 <em>BOM</em> 纳入了 <em>H5</em> 的规范中。</p>
<a id="more"></a>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p><img src="/img/javascript/dom/bom.jpg" alt="bom"></p>
<p>BOM（Browser Object Model），核心对象 <em>window</em> 对象，它表示浏览器的一个实例。</p>
<p>在全局中定义的变量函数，都会被归纳在 <em>window</em> 对象名下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.loa(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br></pre></td></tr></table></figure>
<p>因为全局变量是归属于 <em>window</em> 对象，但是与直接扩展在 <em>window</em> 上的属性有点区别：直接定义在window上的属性可以被 <code>delete</code> 删除，通过 <code>var</code> 定义的变量是不会被删除的.</p>
<h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><p>说screen对象之前先说一下确定浏览器可视窗口大小的属性</p>
<p>浏览器确定一个窗口的大小不是简单的事情。有四个属性 innerWidth，innerHeight，outerWidth，outerHeight。IE8 及更早版本没有提供取得当前浏览器窗口尺寸的属性；不过，它通过 DOM 提供了页面可见区域的相关信息</p>
<ul>
<li>IE9+、 Safari 和 Firefox中， outerWidth 和 outerHeight 返回浏览器窗口本身的尺寸 </li>
<li>Chrome 中， outerWidth、 outerHeight 与innerWidth、 innerHeight 返回相同的值 </li>
<li>document.documentElement.clientWidth 和 document.documentElement.clientHeight 中保存了页面视口的信息。在 IE6 中，在标准模式下才有效；如果是混杂模式，就必须通过document.body.clientWidth 和 document.body.clientHeight 取得相同信息。而对于Chrome，则无论通过 document.documentElement 还是 document.body 中的 clientWidth 和clientHeight 属性，都可以取得视口的大小。 </li>
</ul>
<p><em>ps</em> ：虽然最终无法确定浏览器窗口本身的大小，但却可以取得页面视口的大小。关于浏览器的渲染模式<a href="https://www.cnblogs.com/imxiu/p/3541932.html" target="_blank" rel="external">参考</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pageWidth = <span class="built_in">window</span>.innerWidth,</span><br><span class="line">	pageHeight = <span class="built_in">window</span>.innerHeight;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> pageWidth != <span class="string">"number"</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.compatMode == <span class="string">"CSS1Compat"</span>)&#123;</span><br><span class="line">        pageWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">        pageHeight = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pageWidth = <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">        pageHeight = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通常我们可能会这么写</span></span><br><span class="line"><span class="keyword">var</span> pageWidth = <span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">window</span>.innerWidth</span><br></pre></td></tr></table></figure>
<p>screen对象其实没有很大的用处，screen对象可以表明浏览器的显示器信息。以像素表示</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.screen.availWidth  <span class="comment">// 可用的屏幕宽度 减去界面特性，比如窗口任务栏</span></span><br><span class="line"><span class="built_in">window</span>.screen.availHeight <span class="comment">// 可用的屏幕高度 减去界面特性，比如窗口任务栏</span></span><br></pre></td></tr></table></figure>
<h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><p>location是BOM中很重要的对象。提供了与当前窗口相关的信息。而且 <em>location</em> 对象既是 window对象也是document对象 </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location === <span class="built_in">document</span>.location</span><br></pre></td></tr></table></figure>
<p>以 <a href="https://www.baidu.com/s?wd=bom" target="_blank" rel="external">https://www.baidu.com/s?wd=bom</a> 举例说明</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>例子</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>hash</td>
<td>“#content”</td>
<td>返回URL中的hash（#号后跟零或多个字符），如果URL中不包含散列，则返回空字符串</td>
</tr>
<tr>
<td>host</td>
<td>“www.baidu.com”</td>
<td>返回服务器名称和端口号（如果有）</td>
</tr>
<tr>
<td>hostname</td>
<td>“www.baidu.com”</td>
<td>返回不带端口号的服务器名称</td>
</tr>
<tr>
<td>href</td>
<td><a href="https://www.baidu.com/s?wd=bom" target="_blank" rel="external">https://www.baidu.com/s?wd=bom</a></td>
<td>返回当前加载页面的完整URL。而location对象的toString()方法也返回这个值</td>
</tr>
<tr>
<td>pathname</td>
<td>“/s”</td>
<td>返回URL中的目录和（或）文件名</td>
</tr>
<tr>
<td>port</td>
<td>“”</td>
<td>返回URL中指定的端口号。如果URL中不包含端口号，则这个属性返回空字符串</td>
</tr>
<tr>
<td>protocol</td>
<td>“https”</td>
<td>返回页面使用的协议。通常是http:或https:</td>
</tr>
<tr>
<td>search</td>
<td>“?wd=bom”</td>
<td>返回URL的查询字符串。这个字符串以问号开头</td>
</tr>
</tbody>
</table>
<p>查询参数，通过location对象可以审查到URL中的参数返回一个对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlParam</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> qs = location.search;</span><br><span class="line">    <span class="keyword">var</span> str = qs.length &gt; <span class="number">0</span> ? qs.substring(<span class="number">1</span>) : <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> param = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> items = str.split(<span class="string">"&amp;"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len = items.length;i&lt;len;i++)&#123;</span><br><span class="line">        item = items[i].split(<span class="string">"="</span>);</span><br><span class="line">        param[<span class="built_in">decodeURIComponent</span>(item[<span class="number">0</span>])] = <span class="built_in">decodeURIComponent</span>(item[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> param;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlParam</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> qs = location.search;</span><br><span class="line">    <span class="keyword">var</span> str = qs.length &gt; <span class="number">0</span> ? qs.substring(<span class="number">1</span>) : <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> items = qs.match(<span class="regexp">/(\w+)=(\w+)/g</span>);</span><br><span class="line">    <span class="keyword">return</span> items.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = b.indexOf(<span class="string">"="</span>);</span><br><span class="line">        <span class="keyword">return</span> a[<span class="built_in">decodeURIComponent</span>(b.slice(<span class="number">0</span>,index))] = <span class="built_in">decodeURIComponent</span>(b.slice(index+<span class="number">1</span>)),a;</span><br><span class="line">    &#125;,&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外location对象中除了hash属性修改不会重新加载其它的属性修改之后都会重新加载，而且会在 <em>history</em> 产生一条记录，因此可以通过回退返回。可以禁止这个行为  <code>location.replace(url);</code> 用户不能点击返回，并且不会在  <em>history</em> 产生记录。</p>
<p>还有一个相关的方法 <code>reload()</code> 。重新加载当前的页面。无参数的时候会议最有效的方式加载。也就是会从浏览器缓存中加载。如果需要强制从服务器加载添加参数 <code>true</code> </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location.reload();      <span class="comment">// 可能从缓存加载</span></span><br><span class="line">location.reload(<span class="literal">true</span>);  <span class="comment">// 从服务器加载</span></span><br></pre></td></tr></table></figure>
<p>由于是重新载入页面所以位于 <code>reload</code> 之后的代码可能不在执行。所以请记得写在最后一行。</p>
<h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><p>Navigator 对象包含有关浏览器的信息，每个浏览器都有自己的一套属性。</p>
<table>
<thead>
<tr>
<th>属性或方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>appCodeName</td>
<td>浏览器的名称。通常都是Mozilla，即使在非Mozilla浏览器中也是如此</td>
</tr>
<tr>
<td>appName</td>
<td>完整的浏览器名称</td>
</tr>
<tr>
<td>appVersion</td>
<td>浏览器的版本。一般不与实际的浏览器版本对应</td>
</tr>
<tr>
<td>cookieEnabled</td>
<td>表示cookie是否启用</td>
</tr>
<tr>
<td>language</td>
<td>浏览器的主语言</td>
</tr>
<tr>
<td>onLine</td>
<td>表示浏览器是否连接到了因特网</td>
</tr>
<tr>
<td>oscpu</td>
<td>客户端计算机的操作系统或使用的CPU</td>
</tr>
<tr>
<td>platform</td>
<td>浏览器所在的系统平台</td>
</tr>
<tr>
<td>plugins</td>
<td>浏览器中安装的插件信息的数组</td>
</tr>
<tr>
<td>systemLanguage</td>
<td>操作系统的语言</td>
</tr>
<tr>
<td>userAgent</td>
<td>浏览器的用户代理字符串</td>
</tr>
<tr>
<td>userLanguage</td>
<td>操作系统的默认语言</td>
</tr>
<tr>
<td>userProfile</td>
<td>借以访问用户个人信息的对象</td>
</tr>
<tr>
<td>vendor</td>
<td>浏览器的品牌</td>
</tr>
<tr>
<td>javaEnabled()</td>
<td>表示当前浏览器中是否启用了Java</td>
</tr>
</tbody>
</table>
<p>这里给出一个书上的检测用于代理字符串，包括呈现引擎、平台、操作系统、移动设备和游戏系统的代码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//呈现引擎</span></span><br><span class="line">    <span class="keyword">var</span> engine = &#123;</span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        gecko: <span class="number">0</span>,</span><br><span class="line">        webkit: <span class="number">0</span>,</span><br><span class="line">        khtml: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">//完整的版本号</span></span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//浏览器</span></span><br><span class="line">    <span class="keyword">var</span> browser = &#123;</span><br><span class="line">        <span class="comment">//主要浏览器</span></span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        firefox: <span class="number">0</span>,</span><br><span class="line">        safari: <span class="number">0</span>,</span><br><span class="line">        konq: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line">        chrome: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">//具体的版本号</span></span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//平台、设备和操作系统</span></span><br><span class="line">    <span class="keyword">var</span> system = &#123;</span><br><span class="line">        win: <span class="literal">false</span>,</span><br><span class="line">        mac: <span class="literal">false</span>,</span><br><span class="line">        x11: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//移动设备</span></span><br><span class="line">        iphone: <span class="literal">false</span>,</span><br><span class="line">        ipod: <span class="literal">false</span>,</span><br><span class="line">        ipad: <span class="literal">false</span>,</span><br><span class="line">        ios: <span class="literal">false</span>,</span><br><span class="line">        android: <span class="literal">false</span>,</span><br><span class="line">        nokiaN: <span class="literal">false</span>,</span><br><span class="line">        winMobile: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//游戏系统</span></span><br><span class="line">        wii: <span class="literal">false</span>,</span><br><span class="line">        ps: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//检测呈现引擎和浏览器</span></span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.opera) &#123;</span><br><span class="line">        engine.ver = browser.ver = <span class="built_in">window</span>.opera.version();</span><br><span class="line">        engine.opera = browser.opera = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/AppleWebKit\/(\S+)/</span>.test(ua)) &#123;</span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">        engine.webkit = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">        <span class="comment">//确定是 Chrome 还是 Safari</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/Chrome\/(\S+)/</span>.test(ua)) &#123;</span><br><span class="line">            browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">            browser.chrome = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/Version\/(\S+)/</span>.test(ua)) &#123;</span><br><span class="line">            browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">            browser.safari = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//近似地确定版本号</span></span><br><span class="line">            <span class="keyword">var</span> safariVersion = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (engine.webkit &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                safariVersion = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">312</span>) &#123;</span><br><span class="line">                safariVersion = <span class="number">1.2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">412</span>) &#123;</span><br><span class="line">                safariVersion = <span class="number">1.3</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                safariVersion = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            browser.safari = browser.ver = safariVersion;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/KHTML\/(\S+)/</span>.test(ua) || <span class="regexp">/Konqueror\/([^;]+)/</span>.test(ua)) &#123;</span><br><span class="line">        engine.ver = browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">        engine.khtml = browser.konq = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/rv:([^\)]+)\) Gecko\/\d&#123;8&#125;/</span>.test(ua)) &#123;</span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">        engine.gecko = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">        <span class="comment">//确定是不是 Firefox</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/Firefox\/(\S+)/</span>.test(ua)) &#123;</span><br><span class="line">            browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">            browser.firefox = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/MSIE ([^;]+)/</span>.test(ua)) &#123;</span><br><span class="line">        engine.ver = browser.ver = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">        engine.ie = browser.ie = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检测浏览器</span></span><br><span class="line">    browser.ie = engine.ie;</span><br><span class="line">    browser.opera = engine.opera;</span><br><span class="line">    <span class="comment">//检测平台</span></span><br><span class="line">    <span class="keyword">var</span> p = navigator.platform;</span><br><span class="line">    system.win = p.indexOf(<span class="string">"Win"</span>) == <span class="number">0</span>;</span><br><span class="line">    system.mac = p.indexOf(<span class="string">"Mac"</span>) == <span class="number">0</span>;</span><br><span class="line">    system.x11 = (p == <span class="string">"X11"</span>) || (p.indexOf(<span class="string">"Linux"</span>) == <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//检测 Windows 操作系统</span></span><br><span class="line">    <span class="keyword">if</span> (system.win) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/Win(?:dows )?([^do]&#123;2&#125;)\s?(\d+\.\d+)?/</span>.test(ua)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">"$1"</span>] == <span class="string">"NT"</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (<span class="built_in">RegExp</span>[<span class="string">"$2"</span>]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"5.0"</span>:</span><br><span class="line">                        system.win = <span class="string">"2000"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"5.1"</span>:</span><br><span class="line">                        system.win = <span class="string">"XP"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"6.0"</span>:</span><br><span class="line">                        system.win = <span class="string">"Vista"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"6.1"</span>:</span><br><span class="line">                        system.win = <span class="string">"7"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        system.win = <span class="string">"NT"</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">"$1"</span>] == <span class="string">"9x"</span>) &#123;</span><br><span class="line">                system.win = <span class="string">"ME"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                system.win = <span class="built_in">RegExp</span>[<span class="string">"$1"</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移动设备</span></span><br><span class="line">    system.iphone = ua.indexOf(<span class="string">"iPhone"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    system.ipod = ua.indexOf(<span class="string">"iPod"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    system.ipad = ua.indexOf(<span class="string">"iPad"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    system.nokiaN = ua.indexOf(<span class="string">"NokiaN"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//windows mobile</span></span><br><span class="line">    <span class="keyword">if</span> (system.win == <span class="string">"CE"</span>) &#123;</span><br><span class="line">        system.winMobile = system.win;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (system.win == <span class="string">"Ph"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/Windows Phone OS (\d+.\d+)/</span>.test(ua)) &#123;</span><br><span class="line">            system.win = <span class="string">"Phone"</span>;</span><br><span class="line">            system.winMobile = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">"$1"</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检测 iOS 版本</span></span><br><span class="line">    <span class="keyword">if</span> (system.mac &amp;&amp; ua.indexOf(<span class="string">"Mobile"</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/CPU (?:iPhone )?OS (\d+_\d+)/</span>.test(ua)) &#123;</span><br><span class="line">            system.ios = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1.</span>replace(<span class="string">"_"</span>, <span class="string">"."</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            system.ios = <span class="number">2</span>; <span class="comment">//不能真正检测出来，所以只能猜测</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检测 Android 版本</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Android (\d+\.\d+)/</span>.test(ua)) &#123;</span><br><span class="line">        system.android = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>.$<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//游戏系统</span></span><br><span class="line">    system.wii = ua.indexOf(<span class="string">"Wii"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    system.ps = <span class="regexp">/playstation/i</span>.test(ua);</span><br><span class="line">    <span class="comment">//返回这些对象</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        engine: engine,</span><br><span class="line">        browser: browser,</span><br><span class="line">        system: system</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="built_in">console</span>.log(client);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	&#123;engine: &#123;…&#125;, browser: &#123;…&#125;, system: &#123;…&#125;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p><em>history</em> 对象保存着用户上网的历史记录。<em>history</em> 存在一个 <code>go()</code> 方法，用于前进或后退</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history.go(<span class="number">-1</span>);  <span class="comment">// 后退一页</span></span><br><span class="line">history.go(<span class="number">1</span>)；  <span class="comment">// 前进一页</span></span><br></pre></td></tr></table></figure>
<p>此外还有另外两个方法 <code>forward()</code> <code>back()</code> 与 <code>go()</code> 方法的前进后退一致。这里可以利用JavaScript的阻塞原理做一些小的功能。alert、confirm、prompt都可以让页面阻塞执行</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在有一个小的功能点击某个链接 但是需要验证一些信息</span></span><br><span class="line"><span class="keyword">var</span> submit = <span class="built_in">document</span>.getElementById(<span class="string">"submit"</span>);</span><br><span class="line">submit.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = confirm(<span class="string">"你是不是我的小可爱,请回答是或者不是"</span>);</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// window.history.go(-1);</span></span><br><span class="line">        <span class="built_in">window</span>.history.back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> BOM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript XML]]></title>
      <url>/XML/javascript/javascript-XML/</url>
      <content type="html"><![CDATA[<p>XML曾经做为存储和通过网络传输结构化数据的标准。微型的结构化的数据库，保存一些小型数据。从这里边可以看到 <em>web</em> 的发展 <em>DOM</em> 的发展。DOM的出现使得浏览器都内置了对 <em>XML</em> 的支持。</p>
<p><strong>XML DOM</strong></p>
<p>在没有正式规范之前，浏览器对 <em>XML</em> 的解析支持度参差不齐，<em>DOM2</em> 增加了对 <em>XML DOM</em> 的方法。<em>DOM3</em> 也进一步加强了。谈到标准就一定不能忘记老 <strong>IE</strong> 了。</p>
<h3 id="IE-中-XML"><a href="#IE-中-XML" class="headerlink" title="IE 中 XML"></a>IE 中 XML</h3><p><em>IE</em> 浏览器是第一个原生支持XML的浏览器，而它是通过 <em>ActiveX</em> 对象实现的。这个对象，只有IE有，一般是IE9之前采用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建 XMLDOM对象  IE</span><br><span class="line">MSXML2.DOMDocument.3.0  在JavaScript中使用，这是最低的建议版本</span><br><span class="line">MSXML2.DOMDocument.6.0  脚本能够可靠处理的最新版本</span><br><span class="line">MSXML2.DOMDocument      仅针对IE5.5之前的版本</span><br><span class="line">这三个版本常用其它的不稳定</span><br></pre></td></tr></table></figure>
<p>采取向下兼容的方式写兼容。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXmlDom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> version = [</span><br><span class="line">        <span class="string">'MSXML2.DOMDocument.6.0'</span>,</span><br><span class="line">        <span class="string">'MSXML2.DOMDocument.3.0'</span>,</span><br><span class="line">        <span class="string">'MSXML2.DOMDocument'</span></span><br><span class="line">	];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; version.length; i ++) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">var</span> xmlDom = <span class="keyword">new</span> ActiveXObject(version[i]);</span><br><span class="line">			<span class="keyword">return</span> xmlDom;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">			<span class="comment">//跳过</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'您的系统或浏览器不支持MSXML！'</span>);		<span class="comment">//循环后抛出错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建了xmlDom对象之后，载入xml，两种方式。第一种加载外部的xml文件，并序列化</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlDom = createXmlDom();</span><br><span class="line">xmlDom.load(<span class="string">'src'</span>);</span><br><span class="line">xmlDom.xml</span><br></pre></td></tr></table></figure>
<p>第二种载入 xml字符串，并序列化</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlDom = createXmlDom();</span><br><span class="line">xmlDom.loadXML(<span class="string">"&lt;root&gt;&lt;user&gt;Kobe&lt;/user&gt;&lt;/root&gt;"</span>);</span><br><span class="line">xmlDom.xml</span><br></pre></td></tr></table></figure>
<p>需要注意的是 <em>load</em> 方法用于服务器端，所以存在 同步 or 异步, 服务器端默认异步加载</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlDom.async = <span class="literal">false</span>; <span class="comment">// 同步</span></span><br><span class="line">xmlDom.load(<span class="string">'src.xml'</span>);</span><br><span class="line">xmlDom.xml; <span class="comment">// 打印</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">xmlDom.async = <span class="literal">true</span>;      <span class="comment">//同步设置false，异步设置true，默认是异步</span></span><br><span class="line">xmlDom.load(<span class="string">'src.xml'</span>);</span><br><span class="line">xmlDom.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span> (xmlDom.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xmlDom.parseError.errorCode == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//alert(this === xmlDom);               //this执行的是window</span></span><br><span class="line">            xmlDom.xml <span class="comment">// 打印</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">                <span class="string">'错误代号：'</span> + xmlDom.parseError.errorCode + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">'错误行号：'</span> + xmlDom.parseError.line + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">'错误位置：'</span> + xmlDom.parseError.linepos + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">'错误解释：'</span> + xmlDom.parseError.reason + <span class="string">'\n'</span> +</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>parseError是微软提供的如果说出现了解析错误，帮助排错的。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>errorCode</td>
<td>发生的错误类型的数字代号</td>
</tr>
<tr>
<td>filepos</td>
<td>发生错误文件中的位置</td>
</tr>
<tr>
<td>line</td>
<td>错误行号</td>
</tr>
<tr>
<td>linepos</td>
<td>遇到错误行号那一行上的字符的位置</td>
</tr>
<tr>
<td>reason</td>
<td>错误的解释信息</td>
</tr>
</tbody>
</table>
<h3 id="DOM2-XML"><a href="#DOM2-XML" class="headerlink" title="DOM2 XML"></a>DOM2 XML</h3><p>在支持 <em>DOM2</em> 级的浏览器中可以创建一个空白的 <em>XML</em> 文档，实际中很少会创建一个空白的 <em>XML</em> 文档。只有火狐支持 <code>load</code> 载入 xml文件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOM2 创建</span></span><br><span class="line"><span class="keyword">var</span> xmlDom = <span class="built_in">document</span>.implementation.createDocument(<span class="string">''</span>, <span class="string">'root'</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xmlDom.documentElement.nodeName); <span class="comment">// root</span></span><br><span class="line"><span class="comment">// 节点操作</span></span><br><span class="line"><span class="keyword">var</span> user = xmlDom.createElement(<span class="string">'user'</span>);</span><br><span class="line">xmlDom.documentElement.appendChild(user);</span><br><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="keyword">var</span> serializer = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line"><span class="keyword">var</span> xml = serializer.serializeToString(xmlDom);</span><br><span class="line"><span class="built_in">console</span>.log(xml);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"><span class="comment">// 加载 xml  firfox 支持load!!!!!! 并且不放在服务器上还是默认异步的</span></span><br><span class="line">xmlDom.async = <span class="literal">false</span>;</span><br><span class="line">xmlDom.load(<span class="string">"src.xml"</span>);</span><br><span class="line"><span class="keyword">var</span> serializer = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line"><span class="keyword">var</span> xml = serializer.serializeToString(xmlDom);</span><br><span class="line"><span class="built_in">console</span>.log(xml);</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xmlDom.async = <span class="literal">true</span>;</span><br><span class="line">xmlDom.load(<span class="string">"src.xml"</span>);</span><br><span class="line">xmlDom.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> serializer = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line">    <span class="keyword">var</span> xml = serializer.serializeToString(xmlDom);</span><br><span class="line">    <span class="built_in">console</span>.log(xml);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于只有火狐支持 <code>load</code> 载入，所以还可以通过解析 xml字符</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parser = <span class="keyword">new</span> DOMParser();</span><br><span class="line"><span class="keyword">var</span> xmlStr = <span class="string">'&lt;root&gt;&lt;user&gt;Lee&lt;/user&gt;&lt;/root&gt;'</span>;</span><br><span class="line"><span class="comment">// parseFromString 第二个参数为解析成什么类型 不能解析html</span></span><br><span class="line"><span class="keyword">var</span> xmlDom = parser.parseFromString(xmlStr, <span class="string">'text/xml'</span>);</span><br><span class="line"><span class="comment">// 解析 序列化</span></span><br><span class="line"><span class="keyword">var</span> serializer = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line"><span class="keyword">var</span> xml = serializer.serializeToString(xmlDom);</span><br><span class="line">alert(xml);</span><br></pre></td></tr></table></figure>
<p>错误解析。如果 <code>parseFromString</code> 解析错误会返回一个<code>parsererror</code> 元素，通过对它的判断</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parser = <span class="keyword">new</span> DOMParser();</span><br><span class="line"><span class="keyword">var</span> xmlDom,</span><br><span class="line">    errors;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	xmlDom = parser.parseFromString();</span><br><span class="line">    errors = xmlDom.getElementsByTagName(<span class="string">'parsererror'</span>);</span><br><span class="line">    <span class="keyword">if</span> (errors.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'XML格式有误：'</span> + errors[<span class="number">0</span>].textContent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    alert(<span class="string">'error'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> serializer = <span class="keyword">new</span> XMLSerializer();</span><br><span class="line"><span class="keyword">var</span> xml = serializer.serializeToString(xmlDom);</span><br></pre></td></tr></table></figure>
<p> 跨浏览器处理 <em>XML</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseXML</span>(<span class="params">xml</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xmlDom = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> DOMParser != <span class="string">'undefined'</span>)&#123;</span><br><span class="line">        xmlDom = (<span class="keyword">new</span> DOMParser()).parseFromString(xml, <span class="string">'text/xml'</span>);</span><br><span class="line">        <span class="keyword">var</span> errors = xmlDom.getElementsByTagName(<span class="string">'parsererror'</span>);</span><br><span class="line">        <span class="keyword">if</span> (errors.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'XML格式有误：'</span> + errors[<span class="number">0</span>].textContent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> ActiveXObject != <span class="string">'undefined'</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> xmlDom = createXmlDom();</span><br><span class="line">        xmlDom.loadXML(xml);</span><br><span class="line">        <span class="keyword">if</span>(xmlDom.parseError.errorCode != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">                <span class="string">'错误代号：'</span> + xmlDom.parseError.errorCode + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">'错误行号：'</span> + xmlDom.parseError.line + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">'错误位置：'</span> + xmlDom.parseError.linepos + <span class="string">'\n'</span> +</span><br><span class="line">                <span class="string">'错误解释：'</span> + xmlDom.parseError.reason + <span class="string">'\n'</span> +</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No xml available"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> xmlDom;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>序列化 <em>XML</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serializeXML</span>(<span class="params">xmlDom</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> xml = <span class="string">''</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> XMLSerializer != <span class="string">'undefined'</span>) &#123;</span><br><span class="line">		xml = (<span class="keyword">new</span> XMLSerializer()).serializeToString(xmlDom);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> xmlDom.xml != <span class="string">'undefined'</span>) &#123;</span><br><span class="line">		xml = xmlDom.xml;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'无法解析XML！'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> xml;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> XML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DOM </tag>
            
            <tag> XML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM 节点操作]]></title>
      <url>/DOM/javascript/cold-active-dom/</url>
      <content type="html"><![CDATA[<h3 id="DOM-操作-cold"><a href="#DOM-操作-cold" class="headerlink" title="DOM 操作 - cold"></a>DOM 操作 - cold</h3><p>dom的操作有很多在平时操作中很少用到的，但是却十分好用的API。</p>
<h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><p>与 <em>insertBefore</em> 类似的几个 <em>API</em> 查看 MDN开发者手册，在这里赘述一下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">改方法将一个给定的元素节点插入到相对于被调用的元素的给定的一个位置。</span><br><span class="line">1. node.insertAdjacentElement(position, element)</span><br><span class="line"></span><br><span class="line">将指定的文本解析为HTML或XML，并将结果节点插入到DOM树中的指定位置。它不会重新解析它正在使用的元素，因此它不会破坏元素内的现有元素。这避免了额外的序列化步骤，使其比直接innerHTML操作更快。</span><br><span class="line">如果只是为了插入文本内容(而不是HTML节点), 不建议使用这个方法, 建议使用node.textContent 或者 node.insertAdjacentText() . 因为这样不需要经过HTML解释器的转换, 性能会好一点.</span><br><span class="line">看到这想说为什么不用innerHTML innerHTML不属于标准DOM 所以并没有被推荐，但是innerHTML的性能也是很好</span><br><span class="line">2. node.insertAdjacentHTML(position, element)</span><br><span class="line"></span><br><span class="line">将一个给定的文本节点插入在相对于被调用的元素给定的位置。</span><br><span class="line">3. node.insertAdjacentText(position, element)</span><br><span class="line"></span><br><span class="line">参数示意 三个方法都具有四个位置</span><br><span class="line">position</span><br><span class="line">&lt;!-- beforebegin --&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;!-- afterbegin --&gt;</span><br><span class="line">    foo</span><br><span class="line">    &lt;!-- beforeend --&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;!-- afterend --&gt;</span><br></pre></td></tr></table></figure>
<p><em>example</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boxDom = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line"><span class="keyword">var</span> pDom1 = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">pDom1.insertAdjacentText(<span class="string">'afterbegin'</span>, <span class="string">"afterbegin"</span>);</span><br><span class="line"><span class="keyword">var</span> pDom2 = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">pDom2.insertAdjacentText(<span class="string">'beforeend'</span>, <span class="string">"beforeend"</span>);</span><br><span class="line">boxDom.insertAdjacentElement(<span class="string">'afterbegin'</span>, pDom1);</span><br><span class="line">boxDom.insertAdjacentElement(<span class="string">'beforeend'</span>, pDom2);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	change</span></span><br><span class="line"><span class="comment">	&lt;div id="box"&gt;</span></span><br><span class="line"><span class="comment">        &lt;p&gt;afterbegin&lt;/p&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="line"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;p&gt;beforeend&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><em>example</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">	div &#123;width: 50px; height: 50px; margin: 3px; border: 3px solid black; display: inline-block; background-color: red; float: left&#125;</span></span><br><span class="line"><span class="undefined">    section&#123;overflow: hidden;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击彩色框选择它，然后使用下面的前两个按钮在选择之前和之后插入元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"before"</span>&gt;</span>Insert before<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"after"</span>&gt;</span>Insert after<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"reset"</span>&gt;</span>Reset demo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> beforeBtn = <span class="built_in">document</span>.querySelector(<span class="string">'.before'</span>);</span><br><span class="line"><span class="keyword">var</span> afterBtn = <span class="built_in">document</span>.querySelector(<span class="string">'.after'</span>);</span><br><span class="line"><span class="keyword">var</span> resetBtn = <span class="built_in">document</span>.querySelector(<span class="string">'.reset'</span>);</span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.querySelector(<span class="string">'section'</span>);</span><br><span class="line"><span class="keyword">var</span> activeElem;</span><br><span class="line">resetBtn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (container.firstChild) &#123;</span><br><span class="line">        container.removeChild(container.firstChild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;=<span class="number">3</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> tempDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      container.appendChild(tempDiv);</span><br><span class="line">      setListener(tempDiv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">beforeBtn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tempDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    tempDiv.style.backgroundColor = randomColor();</span><br><span class="line">    activeElem.insertAdjacentElement(<span class="string">'beforebegin'</span>,tempDiv);</span><br><span class="line">    setListener(tempDiv);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">afterBtn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tempDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    tempDiv.style.backgroundColor = randomColor();</span><br><span class="line">    activeElem.insertAdjacentElement(<span class="string">'afterend'</span>,tempDiv);</span><br><span class="line">    setListener(tempDiv);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setListener</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">    elem.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> allElems = <span class="built_in">document</span>.querySelectorAll(<span class="string">'section div'</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; allElems.length; i++) &#123;</span><br><span class="line">            allElems[i].style.border = <span class="string">'3px solid black'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        elem.style.border = <span class="string">'3px solid aqua'</span>;</span><br><span class="line">        activeElem = elem;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">255</span>);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'rgb('</span> + random() + <span class="string">','</span> + random() + <span class="string">','</span> + random() + <span class="string">')'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> initElems = <span class="built_in">document</span>.querySelectorAll(<span class="string">'section div'</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; initElems.length; i++) &#123;</span><br><span class="line">      setListener(initElems[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure>
<h4 id="scrollIntoView"><a href="#scrollIntoView" class="headerlink" title="scrollIntoView"></a>scrollIntoView</h4><ul>
<li><p>MDN官网注解</p>
<p>scrollIntoView：让当前的元素滚动到浏览器窗口的可视区域内。</p>
</li>
<li><p>​参数 （<em>boolean</em>  |  <em>object</em>）</p>
<p>boolean</p>
<ul>
<li>如果为<code>true</code>，元素的顶端将和其所在滚动区的可视区域的顶端对齐。</li>
<li>如果为<code>false</code>， 元素的底端将和其所在滚动区的可视区域的底端对齐。</li>
</ul>
<p>object </p>
<ul>
<li>{block: ‘start’} 对应boolean <code>true</code></li>
<li>{block:’end’} 对应boolean <code>false</code></li>
<li>object中还有一个<code>key</code> behavior 三种值 auto、instant、smooth 其中 smooth 支持动画效果 obj.scrollIntoView( {block: true, behavior: ‘smooth’} )</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">#up,#down&#123;width: 120px;height: 30px;text-align: center;line-height: 30px;position: fixed;right: 10px;top: 330px;background: red;color: #fff;&#125;</span></span><br><span class="line"><span class="undefined">#down&#123;top: 380px&#125;</span></span><br><span class="line"><span class="undefined">#wrap&#123;height: 20vh;background: skyblue;margin-top: 100vh;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"up"</span>&gt;</span>up<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"down"</span>&gt;</span>down<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wrap = <span class="built_in">document</span>.getElementById(<span class="string">"wrap"</span>);</span><br><span class="line"><span class="keyword">var</span> up = <span class="built_in">document</span>.getElementById(<span class="string">"up"</span>);</span><br><span class="line"><span class="keyword">var</span> down = <span class="built_in">document</span>.getElementById(<span class="string">"down"</span>);</span><br><span class="line">up.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// wrap.scrollIntoView(true)</span></span><br><span class="line">    wrap.scrollIntoView(&#123;</span><br><span class="line">        block: <span class="string">'start'</span>,</span><br><span class="line">        behavior: <span class="string">'smooth'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">down.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// wrap.scrollIntoView(false)</span></span><br><span class="line">    wrap.scrollIntoView(&#123;</span><br><span class="line">        block: <span class="string">'end'</span>,</span><br><span class="line">        behavior: <span class="string">'smooth'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="scrollIntoViewIfNeeded"><a href="#scrollIntoViewIfNeeded" class="headerlink" title="scrollIntoViewIfNeeded"></a>scrollIntoViewIfNeeded</h4><ul>
<li><p>MDN官方注解</p>
<p>用来将不在浏览器窗口的可见区域内的元素滚动到浏览器窗口的可见区域。 如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动。 此方法是标准的 Element.scrollIntoView() 方法的专有变体。</p>
<p><em>PS</em>：MDN官方说一个说明 这个是非标注的一个方法。其中有些小问题</p>
</li>
<li><p>参数 （<em>booean</em>）</p>
<p>true   则元素将在其所在滚动区的可视区域中居中对齐。</p>
<p>false   可视区顶部，或者底部</p>
</li>
<li><p>补充说明</p>
<p>scrollIntoViewIfNeeded是比较懒散的，如果元素在可视区域，那么调用它的时候，页面是不会发生滚动的其次是scrollIntoViewIfNeeded只有Boolean型参数，没有动画。</p>
<p>不是全部可见或者全部不可见的情况下，调用scrollIntoViewIfNeeded时，无论参数是<code>true</code> 还是<code>false</code> ，都会发生滚动而且效果是滚动到元素与可视区域顶部或底部对齐，元素离哪端更近，往那边靠。</p>
<p><em>PS</em>：scrollIntoViewIfNeeded 完全不可见的情况下 元素距离那边近 <code>true</code>，<code>false</code> 效果都一样就近原则</p>
<p>移动端，以及原生的使用页面滚动的时候采用jQuery动画操作，现在的原生API都这么好用。当然如果不考虑兼容问题（IE 移动端的UC浏览器不支持）这个是不错的选择</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    #up,#center,#down&#123;width: 120px;height: 30px;text-align: center;line-height: 30px;position: fixed;right: 10px;top: 330px;background: red;color: #fff;&#125;</span></span><br><span class="line"><span class="undefined">    #center&#123;top: 380px&#125;</span></span><br><span class="line"><span class="undefined">    #down&#123;top: 430px&#125;</span></span><br><span class="line"><span class="undefined">    #wrap&#123;height: 20vh;background: skyblue;margin-top: 100vh;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"up"</span>&gt;</span>up<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"down"</span>&gt;</span>down<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wrap = <span class="built_in">document</span>.getElementById(<span class="string">"wrap"</span>);</span><br><span class="line"><span class="keyword">var</span> up = <span class="built_in">document</span>.getElementById(<span class="string">"up"</span>);</span><br><span class="line"><span class="keyword">var</span> down = <span class="built_in">document</span>.getElementById(<span class="string">"down"</span>);</span><br><span class="line">up.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    wrap.scrollIntoView(<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">center.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    wrap.scrollIntoViewIfNeeded(<span class="literal">true</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">down.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    wrap.scrollIntoViewIfNeeded(<span class="literal">false</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> DOM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM 节点操作]]></title>
      <url>/DOM/javascript/DOM-03/</url>
      <content type="html"><![CDATA[<p>DOM的操作，包括节点的获取、创建节点属性、添加节点、设置节点标签属性、类名操作</p>
<h3 id="节点的获取"><a href="#节点的获取" class="headerlink" title="节点的获取"></a>节点的获取</h3><ul>
<li>document.getElementById(id)　　　　 　　</li>
<li>document.getElementsByName(name)　　　　　　</li>
<li>document.getElementsByTagName(tag)　</li>
<li>document.getElementsByClassName(class)</li>
<li>document.querySelector(选择器)</li>
<li>document.querySelectorAll(选择器)</li>
</ul>
<p>最上边的三个方法无兼容问题，其余的获取方式都为 <em>IE9+</em> 这里说一下其它的一点小区别</p>
<p>表单中通过getElementsByName获取</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txt"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> txt = <span class="built_in">document</span>.getElementsByName(<span class="string">"txt"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> pwd = <span class="built_in">document</span>.getElementsByName(<span class="string">"pwd"</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>class</em> 与 <em>tag</em> 获取为动态获取，区别 querySelectorAll</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .red&#123;color: red;&#125;</span></span><br><span class="line"><span class="undefined">    .green&#123;color: green;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"green"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1</span></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> divDoms = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"green"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;divDoms.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(divDoms[i].className === <span class="string">'green'</span>)&#123;</span></span><br><span class="line"><span class="javascript">            divDoms[i].className = <span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> divDoms = <span class="built_in">document</span>.querySelectorAll(<span class="string">".green"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;divDoms.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(divDoms[i].className === <span class="string">'green'</span>)&#123;</span></span><br><span class="line"><span class="javascript">            divDoms[i].className = <span class="string">'red'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>第一个只有1，3变色。第二个全部变色。querySelectorAll返回的是节点快照，在此获取也不会改变。然而通过class获取的获取的获取都随着节点的改变而改变。二者皆有兼容问题，探讨一下 getElementsByClassName兼容问题。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClass</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.getElementsByClassName)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">document</span>.getElementsByClassName(name);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    	<span class="keyword">var</span> all = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line">        <span class="keyword">var</span> res = [];</span><br><span class="line">        <span class="comment">// 在所有的标签里边去筛选</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;all.length;i++)&#123;</span><br><span class="line">            <span class="comment">// 类名可以是单个 也可以是多个</span></span><br><span class="line">            <span class="keyword">var</span> clsName = all[i].className.split(<span class="string">' '</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;clsName.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(clsName[j] == name)&#123;</span><br><span class="line">                    <span class="comment">// all[i] 满足条件的</span></span><br><span class="line">                    res.push(all[i]);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 另一种思路</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClass</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> all = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(all).filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 把每一项的类名 切开 只要有 name这一项 返回</span></span><br><span class="line">        <span class="keyword">return</span> item.className.split(<span class="string">' '</span>).indexOf(name) != <span class="number">-1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>顺便在说一下addClass，removeClass</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;res.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == res[j])&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span>(j == res.length)&#123;</span><br><span class="line">            res.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">ele,cname</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cArr = cname.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="comment">// 1. 判断和原来是否相等 去重 保留一个数组</span></span><br><span class="line">    <span class="comment">// 2. 传递的和原来全都放到一起 直接去重 在拼接</span></span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">var</span> arr = ele.className.split(<span class="string">' '</span>).concat(cArr);</span><br><span class="line">    ele.className = unique(newArr).join(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>换一个思路</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">ele, name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = name.split(<span class="string">' '</span>).concat(ele.className.split(<span class="string">' '</span>));</span><br><span class="line">    ele.className = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr)).join(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// h5 api classList 局限在于只能添加一个 并且不会重复添加</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">ele, name</span>)</span>&#123;</span><br><span class="line">    name.split(<span class="string">' '</span>).forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        ele.classList.add(item);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>removeClass</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">ele, name</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 判断原有的和 要删除的</span></span><br><span class="line">    <span class="keyword">var</span> arr = ele.className.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">var</span> na = name.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=arr.length;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>,naLen = na.length;j&lt;naLen;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] === na[j])&#123;</span><br><span class="line">                arr.splice(i,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ele.className = arr.join(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// h5 api 删除只能删除一个</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">ele, name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> na = name.split(<span class="string">' '</span>);</span><br><span class="line">    <span class="keyword">if</span>(na.length === <span class="number">1</span>)&#123;</span><br><span class="line">        ele.classList.remove(name);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        na.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">            ele.classList.remove(item);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上仅仅是做一个参考，希望大家可以学以致用。不同的思路。实际中课以使用，只是做的不健壮，如果想要更加的完善可以做一些判断。</p>
<h3 id="创建节点-属性"><a href="#创建节点-属性" class="headerlink" title="创建节点,属性"></a>创建节点,属性</h3><ul>
<li>document.createElement(eName);　　</li>
<li>document.createAttribute(attrName); </li>
<li>document.createTextNode(text);</li>
<li>document.createDocumentFragment();</li>
</ul>
<p>在所有节点中，文档片段没有对应的标记。是一个轻量级的文档，可以包含和控制节点，但不会像完整的文档那样占用资源，可以理解成为一个容器。当要大量添加节点时如果频繁的添加节点，可能会让页面回流重绘所以在添加的时候可以先放到这个空壳中然后一次性放入所需的地方。</p>
<h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><ul>
<li>document.insertBefore(newNode,referenceNode);</li>
<li>parentNode.appendChild(newNode);　</li>
<li>parentNode.append(text/newNode, …)</li>
</ul>
<p>这里介绍一下 <em>append</em></p>
<ol>
<li>ParentNode.append() 允许你也追加  DOMString 对象，而 Node.appendChild() 只接受 Node 对象。</li>
<li>ParentNode.append() 没有返回值，而 Node.appendChild() 返回追加的 Node 对象。</li>
<li>ParentNode.append() 可以追加几个节点和字符串，而 Node.appendChild() 只能追加一个节点。</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加文本</span></span><br><span class="line"><span class="keyword">var</span> cDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">cDiv.append(<span class="string">'div element'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加多个 节点与字符串</span></span><br><span class="line"><span class="keyword">var</span> cDiv = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line"><span class="keyword">var</span> cSpan = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line">cDiv.append(cSpan, <span class="string">"span文本"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="设置节点标签属性-类名"><a href="#设置节点标签属性-类名" class="headerlink" title="设置节点标签属性,类名"></a>设置节点标签属性,类名</h3><ul>
<li>hasAttribute(attr)</li>
<li>getAttribute(attr)</li>
<li>setAttribute(attr, value)</li>
<li>removeAttribute(attr)</li>
<li>dataset.attr</li>
<li>classList.remove(name)</li>
<li>classList.add(name)</li>
</ul>
<p>attr 设置标签属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">attr</span>(<span class="params">ele, value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> value == <span class="string">'string'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ele.getAttribute(value);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> value == <span class="string">'object'</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> value)&#123;</span><br><span class="line">            ele.setAttribute(k, value[k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>removeAttr 删除标签属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeAttr</span>(<span class="params">ele, value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> value == <span class="string">'string'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ele.hasAttribute(value))&#123;</span><br><span class="line">            ele.removeAttribute(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置data-attr属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataAttr</span>(<span class="params">ele, key, value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">var</span> len = args.length;</span><br><span class="line">    <span class="keyword">switch</span>(len)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> value == <span class="string">'string'</span>)&#123;</span><br><span class="line">        		ele.dataset[key] = value;</span><br><span class="line">    		&#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> args[<span class="number">1</span>] == <span class="string">'object'</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> args[<span class="number">1</span>])&#123;</span><br><span class="line">                    ele.dataset[k] = args[<span class="number">1</span>][k]</span><br><span class="line">                &#125;</span><br><span class="line">    		&#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'param error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>PS</em>：需要注意一点 <code>data-*</code> 设置一个属性，如果想设置的属性为 <code>data-a-b</code> 时，使用驼峰才会生效。element.dataset[“a-b”]时非法的不被允许的。</p>
<p>说到标签属性就要提到一个属性 <code>attributes</code> 返回一个 <code>NameNodeMap</code> 动态集合。包含了每一个 <code>attr</code> </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">class</span>=<span class="string">"a"</span> <span class="attr">title</span>=<span class="string">"123"</span> <span class="attr">name</span>=<span class="string">"xx"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> attrs = box.attributes;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 获取属性</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> title = attrs.getNamedItem(<span class="string">"title"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 设置属性</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> haha = <span class="built_in">document</span>.createAttribute(<span class="string">"haha"</span>);</span></span><br><span class="line"><span class="javascript">    haha.nodeValue=<span class="string">"haha"</span>;</span></span><br><span class="line"><span class="undefined">    attrs.setNamedItem(haha);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 删除属性</span></span></span><br><span class="line"><span class="javascript">    attrs.removeNamedItem(<span class="string">"haha"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 返回指定位置的属性</span></span></span><br><span class="line"><span class="javascript">    attrs.item(<span class="number">0</span>) 		<span class="comment">// id="box"</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以写一个方法用来遍历元素的标签属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAttr</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> attrs = el.attributes,</span><br><span class="line">        len = attrs.length,</span><br><span class="line">        arr = <span class="built_in">Array</span>(len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> item = attrs.item(i);</span><br><span class="line">        arr[i] = item.nodeName + <span class="string">"="</span> + item.nodeValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是在 <strong>IE7</strong> 之前的浏览器可能会返回很多没有指定的属性，事实上只需要返回需要的其它没有显示的内在的不需要显示，通过 <code>specified</code> 属性检测，这个属性如果为 <em>true</em> ,要么是HTML中存在的，要么是 <code>setAttribute</code> ,<code>dataset</code> 设置的,要是不加这个属性在 <strong>IE7</strong> 下可以遍历出100多个属性。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAttr</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> attrs = el.attributes,</span><br><span class="line">        len = attrs.length,</span><br><span class="line">        arr = <span class="built_in">Array</span>(len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> item = attrs.item(i);</span><br><span class="line">        <span class="keyword">if</span>(item.specified)&#123;</span><br><span class="line">        	arr[i] = item.nodeName + <span class="string">"="</span> + item.nodeValue;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后放一道题。给定一个DOM元素，创建一个能访问该元素所有子元素的函数，并且要将每个子元素传递给指定的回调函数。</p>
<p>分析一下，如果DOM是body元素其实就是和<code>document.all</code> 通配符获取所有的标签节点一个意思。只是多了一条输出语句，其实为了找到某写元素去做一些事情，比如查找符合要求的元素、查找匹配的元素或者内容或者类名。思路从给定DOM元素开始，依次从自己到子元素遍历，再从子元素执行相同的操作，没错就是递归。相同的问题，不断的细化。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wark_dom</span>(<span class="params">dom, callBack</span>)</span>&#123;</span><br><span class="line">    callback(dom);</span><br><span class="line">    <span class="keyword">var</span> list = dom.children;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">        wark_dom(list[i],callback); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> DOM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM 属性和方法]]></title>
      <url>/DOM/javascript/DOM-02/</url>
      <content type="html"><![CDATA[<blockquote>
<p>DOM （ Document Object Model ）是针对HTML和XML文档的一个API.DOM是一个具有丰富层次的节点树,我们可以对其进行添加、删除、修改. 所以来认识一下DOM中的属性和API以及兼容问题.</p>
</blockquote>
<h2 id="节点层次"><a href="#节点层次" class="headerlink" title="节点层次"></a>节点层次</h2><p>DOM将 <em>HTML</em> 与 <em>XML</em> 文档绘制成由一个 <strong>根节点</strong> 发散出来的多层节点构成的树状结构（DOM树）。 所以存在很多的节点， 不同的节点在文档中表示的信息也是不同的， 每个节点有自己的特点、属性、方法。节点与节点之间存在一定的关系。直观的看一下w3c中的DOM树</p>
<p><img src="http://www.w3school.com.cn/i/ct_htmltree.gif" alt="w3c"></p>
<h2 id="Node-类型"><a href="#Node-类型" class="headerlink" title="Node 类型"></a>Node 类型</h2><p>DOM1级定义了一个 <em>Node</em> 接口，将DOM中的所有节点类型实现，在JavaScript中做为 <em>Node</em> 类。（IE中访问不到，IE使用COM对象去实现的）。所有的节点都继承自 <em>Node</em> 类 。打开浏览器可以在开发工具中看到一个列表</p>
<p><img src="/img/javascript/dom/node.png" alt="node"></p>
<p>每一种节点都有一个 <code>nodeType</code> 属性表明节点的类型，这个值用数字表示。常见有</p>
<ul>
<li>元素节点（ELEMENT_NODE）  nodeType = 1</li>
<li>属性节点（ATTRIBUTE_NODE）nodeType = 2</li>
<li>文本节点（TEXT_NODE）nodeType = 3</li>
<li>注释节点（COMMENT_NODE）nodeType = 9</li>
<li>fragment片段节点（DOCUMENT_FRAGMENT_NODE） nodeType = 11</li>
</ul>
<p>另外还有nodeName nodeValue属性</p>
<table>
<thead>
<tr>
<th>node</th>
<th>nodeType</th>
<th>nodeName</th>
<th>nodeValue</th>
</tr>
</thead>
<tbody>
<tr>
<td>元素</td>
<td>1</td>
<td>标签名称</td>
<td>null</td>
</tr>
<tr>
<td>属性</td>
<td>2</td>
<td>属性名称</td>
<td>属性值</td>
</tr>
<tr>
<td>文本</td>
<td>3</td>
<td>#text</td>
<td>文本值</td>
</tr>
</tbody>
</table>
<h3 id="关系属性"><a href="#关系属性" class="headerlink" title="关系属性"></a>关系属性</h3><p>节点与节点之间存在一定的联系，例如 <em>html</em> 可以看成是 <em>body</em> 的父级，<em>body</em> 中的标签就都是 <em>body</em> 的子孙。所以每一个节点都有一个 <code>childNodes</code> 属性</p>
<p><img src="/img/javascript/dom/node_attr.png" alt="node_attr"></p>
<p>列举一下常见的节点关系属性</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>parentNode</td>
<td>返回指定的节点在DOM树中的父节点，parentNode不能被append</td>
</tr>
<tr>
<td>parentElement</td>
<td>返回当前节点的父元素节点,如果该元素没有父节点,或者父节点不是一个元素节点.则 返回 null</td>
</tr>
<tr>
<td>childNode</td>
<td>返回包含指定节点的子节点的集合，该集合为即时更新的集合</td>
</tr>
<tr>
<td>children</td>
<td>返回 一个Node的子elements 是一个动态更新的 HTMLCollection</td>
</tr>
<tr>
<td>firstChild</td>
<td>返回树中节点的第一个子节点，如果节点是无子节点，则返回 null</td>
</tr>
<tr>
<td>firstElementChild</td>
<td>同上 IE9+</td>
</tr>
<tr>
<td>lastChild</td>
<td>返回树中节点的最后一个子节点，如果节点是无子节点，则返回 null</td>
</tr>
<tr>
<td>lastElementChild</td>
<td>同上 IE9+</td>
</tr>
<tr>
<td>nextSibling</td>
<td>返回node节点紧跟在其后面的节点，如果指定的节点为最后一个节点，则返回 null</td>
</tr>
<tr>
<td>nextElementSibling</td>
<td>同上 IE9+</td>
</tr>
<tr>
<td>previousSibling</td>
<td>返回当前节点的前一个兄弟节点,没有则返回 null</td>
</tr>
<tr>
<td>previousElementSibling</td>
<td>同上 IE9+</td>
</tr>
<tr>
<td>ownerDocument</td>
<td>返回当前节点的顶层的 document 对象，如果在document 自身上使用此属性，返回null</td>
</tr>
</tbody>
</table>
<p><em>example 1</em> </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boxDom = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line">boxDom.childNodes.length  			<span class="comment">// 7</span></span><br><span class="line">boxDom.children.length    			<span class="comment">// 3</span></span><br><span class="line">boxDom.firstChild.nodeType 			<span class="comment">// 3</span></span><br><span class="line">boxDom.firstElementChild.nodeType	<span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p><em>example 2</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>text</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boxDom = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line">boxDom.nextSibling.nodeType           <span class="comment">// 3</span></span><br><span class="line">boxDom.nextElementSibling.nodeType    <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p><em>ps</em> : childNodes 会获取除了元素节点的其它节点 推荐使用 children。firstChild、lastChild、nextSibling、previousSibling同样会获取到非元素节点，推荐使用另外一种但是有兼容问题需要手动做兼容</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兼容处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstChild</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(el.firstElementChild)&#123;</span><br><span class="line">        <span class="keyword">return</span> el.firstElementChild;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> f = el.firstChild;</span><br><span class="line">        <span class="comment">// 直到找到nodeType是1的停止</span></span><br><span class="line">        <span class="keyword">if</span>(f &amp;&amp; f.nodeType != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">// f = f.nextSibling;</span></span><br><span class="line">            f = next(f);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// while(f &amp;&amp; f.nodeType != 1)&#123;</span></span><br><span class="line">        <span class="comment">//     f = f.nextSibling;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lastChild</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(el.lastElementChild)&#123;</span><br><span class="line">        <span class="keyword">return</span> el.lastElementChild;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> l = el.lastChild;</span><br><span class="line">        <span class="comment">// 直到找到nodeType是1的停止</span></span><br><span class="line">        <span class="keyword">if</span>(l &amp;&amp; l.nodeType != <span class="number">1</span>)&#123;</span><br><span class="line">            l = prev(l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种思路</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lastChild</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = el.children.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">var</span> l = el.children[index];</span><br><span class="line">    <span class="keyword">while</span> (l) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l.nodeType == <span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">        l = el.children[index--];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isElement(el))<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(el.nextElementSibling)&#123;</span><br><span class="line">        <span class="keyword">return</span> el.nextElementSibling;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// ie 678</span></span><br><span class="line">        <span class="keyword">var</span> nxt = el.nextSibling;</span><br><span class="line">        <span class="keyword">if</span>(nxt &amp;&amp; nxt.nodeType != <span class="number">1</span>)nxt = next(nxt);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// while(nxt.nodeType != 1)&#123;</span></span><br><span class="line">        <span class="comment">//     nxt = nxt.nextSibling;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">return</span> nxt;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prev</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isElement(el))<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(el.previousElementSibling)&#123;</span><br><span class="line">        <span class="keyword">return</span> el.previousElementSibling;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// ie 678</span></span><br><span class="line">        <span class="keyword">var</span> pre = el.previousSibling;</span><br><span class="line">        <span class="keyword">if</span>(pre.nodeType != <span class="number">1</span>)pre = prev(pre);</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">siblings</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">var</span> child = el.parentElement.children;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;child.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(child[i] != el)&#123;</span><br><span class="line">            arr.push(child[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有同级元素 不包含自己</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">siblings</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pDom = el.parentNode;</span><br><span class="line">    <span class="keyword">var</span> child = pDom.children;</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(child).filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item != el;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">siblings</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pDom = el.parentNode;</span><br><span class="line">    <span class="keyword">var</span> child = [].slice.call(pDom.children);</span><br><span class="line">    <span class="keyword">if</span>(child.indexOf(el) != <span class="number">-1</span>)child.splice(child.indexOf(el),<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">siblings</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">var</span> prev = el.previousElementSibling;</span><br><span class="line">    <span class="keyword">while</span> (prev) &#123;</span><br><span class="line">        arr.unshift(prev);</span><br><span class="line">        prev = prev.previousElementSibling;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 向下找到所有的</span></span><br><span class="line">    <span class="keyword">var</span> next = el.nextElementSibling;</span><br><span class="line">    <span class="keyword">while</span> (next) &#123;</span><br><span class="line">        arr.push(next);</span><br><span class="line">        next = next.nextElementSibling;</span><br><span class="line">    &#125;;</span><br><span class="line">    reutrn arr;</span><br><span class="line">&#125;；</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定元素中的某子元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eq</span>(<span class="params">el, index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> el.children[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找指定元素中的某子元素根据 标签 id class</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">el, param</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> [].slice.call(el.children).filter(<span class="function"><span class="params">item</span>=&gt;</span>( item.id == param.slice(<span class="number">1</span>) || item.className.indexOf(param.slice(<span class="number">1</span>)) != <span class="number">-1</span> || item.tagName.toLowerCase() == param));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把零散的整理起来 定义一个 domUtils对象</span></span><br><span class="line"><span class="keyword">var</span> domUtils = &#123;</span><br><span class="line">    first: firstChild,</span><br><span class="line">    last: lastChild,</span><br><span class="line">    next: next,</span><br><span class="line">    prev: prev,</span><br><span class="line">    siblings: siblings,</span><br><span class="line">    eq: eq,</span><br><span class="line">    find: find</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>ps</em> : 兼容的方法很多可以多多去尝试</p>
<h3 id="关于text-的属性"><a href="#关于text-的属性" class="headerlink" title="关于text 的属性"></a>关于text 的属性</h3><p><em>Node</em> 节点除了关系属性之外还包含关于 <em>Node</em> 自己的一些属性，关于文本的。当然一般都是标签才具有这类属性，会生效。</p>
<p><em>tagName</em>，<em>localName</em> 这两个属性返回的都是标签自己独有的名称，后者为小写</p>
<p><em>innerText</em> <em>innerHTML</em> <em>textContent</em> 区别</p>
<ul>
<li>innerText 返回元素的文本内容可读写</li>
<li>innerHTML 返回元素标签中的内容，可读写（标签可以被解析）innerHTML不属于规范</li>
<li>textContent IE9+使用 规范DOM <ul>
<li>innerText受 CSS 样式的影响，它会触发重排（reflow），但textContent不会</li>
<li>textContent通常具有更好的性能，因为文本不会被解析为HTML</li>
</ul>
</li>
</ul>
<p><em>outerText</em> <em>outerHTML</em> 用法和上边一样，区别在于写的时候都会把父元素删除，基本不会使用这个属性</p>
<h3 id="关于位置大小的属性"><a href="#关于位置大小的属性" class="headerlink" title="关于位置大小的属性"></a>关于位置大小的属性</h3><blockquote>
<p>offsetWidth/Height clientWidth/Height scrollWidth/Height </p>
<p>offsetParent offsetLeft offsetTop </p>
</blockquote>
<p>元素大小 自动取整round 只读属性</p>
<ul>
<li>offsetWidth/Height = width/height + padding + border + scrollbar </li>
<li>clientWidth/Height = width/height + padding</li>
<li>scrollWidth/Height = width/height + padding + 溢出</li>
</ul>
<p>元素位置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素到页面的绝对距离</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">offset</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> cleft = <span class="number">0</span>, ctop = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        ctop += elem.offsetTop || <span class="number">0</span>;</span><br><span class="line">        cleft += elem.offsetLeft || <span class="number">0</span>;</span><br><span class="line">        elem = elem.offsetParent;</span><br><span class="line">    &#125; <span class="keyword">while</span> (elem);</span><br><span class="line">    <span class="keyword">return</span> &#123;ctop, cleft&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取指定父元素 不指定到页面的绝对距离</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">offsetxq</span>(<span class="params">el,parent,position</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pos = position || &#123;<span class="attr">top</span>:<span class="number">0</span>,<span class="attr">left</span>:<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(el == parent)<span class="keyword">return</span> pos;</span><br><span class="line">    pos.top += el.offsetTop;</span><br><span class="line">    pos.left += el.offsetLeft;</span><br><span class="line">    <span class="keyword">return</span> offsetxq(el.offsetParent,parent,pos);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="关于节点的样式"><a href="#关于节点的样式" class="headerlink" title="关于节点的样式"></a>关于节点的样式</h3><p><em>style</em> 属性用来操作节点的 <em>css</em> 样式 <em>className</em> 属性用来获取节点的类名</p>
<p><em>style</em> 获取的是行内样式，同样设置的也是行内样式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">el.style.color = <span class="string">'red'</span>;</span><br><span class="line">el.style.marginLeft = <span class="string">'100px'</span>;</span><br></pre></td></tr></table></figure>
<p><em>cssText</em> 属性可以一次性写入多个css样式，连字符的样式需要转为驼峰</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">el.style.cssText += <span class="string">'width:100px;height:100px;backgroundColor:red'</span>;</span><br></pre></td></tr></table></figure>
<p>这里用了 <code>+=</code> 因为cssText会覆盖原有的样式，这样子为了保存原有的,如果相同被覆盖。</p>
<p>问题来了怎么获取行间样式？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">el, attr</span>)</span>&#123;</span><br><span class="line"> 	<span class="keyword">return</span> el.currentStyle? el.currentStyle[attr] : <span class="built_in">window</span>.getComputedStyle(el, <span class="literal">null</span>)[attr];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>currentStyle</em> 针对IE <em>getComputedStyle</em> 针对非IE。后者还可以获取伪元素，如果要获取伪元素（after，before）第二个参数为伪元素。getComputedStyle(el, ‘after’)  getComputedStyle(el, ‘before’)</p>
<p><em>PS</em>：上边的关于元素的大小位置的获取与 <em>getStyle</em> 获取的区别在于前者会取整不会取到小数，两者都没有px单位。所以使用的过程中如果需要小数则选取后者。</p>
<p><em>API</em> 中有一个方法也是可以获取的 <code>getBoundingClientRect</code> 这个方法返回了6个属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bound = Element.getBoundingClientRect()</span><br><span class="line">bound.width / bound.height / bound.top / bound.left / bound.right / bound.bottom</span><br></pre></td></tr></table></figure>
<p>top属性获取的是 Element距离当前窗口的距离而非绝对距离，可以写一个更加完美的获取元素绝对位置的方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getOffsetPosition=<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( !elem ) <span class="keyword">return</span> &#123;<span class="attr">left</span>:<span class="number">0</span>, <span class="attr">top</span>:<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> top = <span class="number">0</span>, left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( <span class="string">"getBoundingClientRect"</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement )&#123;</span><br><span class="line">        <span class="keyword">var</span> box = elem.getBoundingClientRect(),</span><br><span class="line">            doc = elem.ownerDocument,</span><br><span class="line">            body = doc.body,</span><br><span class="line">            docElem = doc.documentElement,</span><br><span class="line">            <span class="comment">// clientTop 获取元素顶部边框的宽度</span></span><br><span class="line">            clientTop = docElem.clientTop || body.clientTop || <span class="number">0</span>,</span><br><span class="line">            clientLeft = docElem.clientLeft || body.clientLeft || <span class="number">0</span>,</span><br><span class="line">            top  = box.top  + (self.pageYOffset || docElem &amp;&amp; docElem.scrollTop  || body.scrollTop ) - clientTop,</span><br><span class="line">            left = box.left + (self.pageXOffset || docElem &amp;&amp; docElem.scrollLeft || body.scrollLeft) - clientLeft;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            top += elem.offsetTop || <span class="number">0</span>;</span><br><span class="line">            left += elem.offsetLeft || <span class="number">0</span>;</span><br><span class="line">            elem = elem.offsetParent;</span><br><span class="line">        &#125; <span class="keyword">while</span> (elem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">left</span>:left, <span class="attr">top</span>:top&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>getBoundingClientRect</code> 在做图片惰性加载的时候就显得很容易了,这里就写一下判断时候需要显示的函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只考虑向下滚动加载</span></span><br><span class="line"><span class="comment">// 如果图片出现在小于等于可视窗口300的位置时候就应该让该图片显示 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInSight</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> bound = el.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">const</span> clientHeight = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">  <span class="keyword">return</span> bound.top &lt;= clientHeight - <span class="number">300</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="关于document的属性"><a href="#关于document的属性" class="headerlink" title="关于document的属性"></a>关于document的属性</h3><p>document.all 非标准</p>
<p>document.title</p>
<p>document.body 返回body</p>
<p>document.compatMode</p>
<p>document.documentElement 返回文档对象</p>
<p>document.documentElement.scrollTop/Left 获取滚动条</p>
<p>document.documentElement.clientWidth/clientHeight 获取窗口大小 兼容 window.innerWidth/innerHeight</p>
]]></content>
      
        <categories>
            
            <category> DOM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DOM 发展]]></title>
      <url>/DOM/javascript/DOM_01/</url>
      <content type="html"><![CDATA[<h3 id="网页生成过程、DOM发展"><a href="#网页生成过程、DOM发展" class="headerlink" title="网页生成过程、DOM发展"></a>网页生成过程、DOM发展</h3><h4 id="1-理解网页的性能-先了解一下网页的生成过程"><a href="#1-理解网页的性能-先了解一下网页的生成过程" class="headerlink" title="1. 理解网页的性能,先了解一下网页的生成过程"></a>1. 理解网页的性能,先了解一下网页的生成过程</h4><blockquote>
<ol>
<li>HTML代码转化成DOM</li>
<li>CSS代码转化成CSSOM（CSS Object Model）</li>
<li>结合DOM和CSSOM，生成一棵渲染树（包含每个节点的视觉信息）</li>
<li>生成布局（layout），即将所有渲染树的所有节点进行平面合成</li>
<li>将布局绘制（paint）在屏幕上</li>
</ol>
</blockquote>
<p><strong>webkit渲染流程</strong></p>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015091502.png" alt="webkit流程"></p>
<p><strong>Geoko渲染过程</strong></p>
<p><img src="/img/javascript/dom/Geoko.jpg" alt="Geoko"></p>
<p>从第一步到第三步都是很快速的, 第四步与第五步是很耗时的</p>
<p><strong>“生成布局”（flow）和”绘制”（paint）这两步，合称为”渲染”（render）。</strong> </p>
<blockquote>
<p><strong>ps: 火狐把Layout过程成为回流是一个意思</strong></p>
</blockquote>
<h4 id="2-重排与重绘"><a href="#2-重排与重绘" class="headerlink" title="2. 重排与重绘"></a>2. 重排与重绘</h4><p><strong>网页生成的时候，至少会渲染一次。用户访问的过程中，还会不断重新渲染。</strong></p>
<p>以下情况, 会导致网页的重新渲染</p>
<ul>
<li>修改DOM</li>
<li>修改样式表</li>
<li>用户事件（比如鼠标悬停、页面滚动、输入框键入文字、改变窗口大小等等）</li>
<li>添加、删除元素(回流+重绘)</li>
<li>隐藏元素，display:none(回流+重绘)，visibility:hidden(只重绘，不回流)</li>
</ul>
<ol>
<li>移动元素，比如改变top,left(jquery的animate方法就是,改变top,left不一定会影响回流)，或者移动元素到另外1个父元素中。(重绘+回流)</li>
<li>对style的操作(对不同的属性操作，影响不一样)</li>
</ol>
<p><strong>重新渲染，就需要重新生成布局和重新绘制。前者叫做”重排”（reflow），后者叫做”重绘”（repaint）。</strong></p>
<p>需要注意的是，<strong>“重绘”不一定需要”重排”</strong>，比如改变某个网页元素的颜色，就只会触发”重绘”，不会触发”重排”，因为布局没有改变。但是，<strong>“重排”必然导致”重绘”</strong>，比如改变一个网页元素的位置，就会同时触发”重排”和”重绘”，因为布局改变了。</p>
<p>传送门 <a href="http://kb.cnblogs.com/page/129756/" target="_blank" rel="external">浏览器内部工作原理</a></p>
<h4 id="3-对性能的影响"><a href="#3-对性能的影响" class="headerlink" title="3. 对性能的影响"></a>3. 对性能的影响</h4><blockquote>
<p>重排和重绘会不断触发，这是不可避免的。但是，它们非常耗费资源，是导致网页性能低下的根本原因。</p>
</blockquote>
<p><strong>提高网页性能，就是要降低”重排”和”重绘”的频率和成本，尽量少触发重新渲染。</strong></p>
<p>前面提到，DOM变动和样式变动，都会触发重新渲染。但是，浏览器已经很智能了，会尽量把所有的变动集中在一起，排成一个队列，然后一次性执行，尽量避免多次重新渲染。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div.style.color = <span class="string">'blue'</span>;</span><br><span class="line">div.style.marginTop = <span class="string">'30px'</span>;</span><br></pre></td></tr></table></figure>
<p>上述代码会触发浏览器一次的重排重绘</p>
<p><strong>如果写的不好就会导致浏览器执行多次</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">div.style.color = <span class="string">'blue'</span>;</span><br><span class="line"><span class="comment">// 这里再次出现了元素的位置 浏览器不得不重新排列一次</span></span><br><span class="line"><span class="keyword">var</span> margin = <span class="built_in">parseInt</span>(div.style.marginTop);</span><br><span class="line">div.style.marginTop = margin + <span class="number">10</span> + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure>
<p>一般来说浏览器对于一些样式的<strong>写</strong>操作之后,出现一下的读属性操作,都会引发浏览器的重新渲染</p>
<ul>
<li>offsetTop/offsetLeft/offsetWidth/offsetHeight</li>
<li>scrollTop/scrollLeft/scrollWidth/scrollHeight</li>
<li>clientTop/clientLeft/clientWidth/clientHeight</li>
<li>getComputedStyle()</li>
</ul>
<p><strong>尽量不要把读写操作混到一起</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">div.style.left = div.offsetLeft + <span class="number">10</span> + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> l = div.offsetLeft;</span><br><span class="line">div.style.left = l + <span class="number">10</span> + <span class="string">'px'</span>;</span><br></pre></td></tr></table></figure>
<p>一般的规则是:</p>
<ul>
<li>样式表越简单，重排和重绘就越快。</li>
</ul>
<ul>
<li>重排和重绘的DOM元素层级越高，成本就越高。</li>
</ul>
<ul>
<li>table元素的重排和重绘成本，要高于div元素</li>
</ul>
<h4 id="4-提高性能的几种方式"><a href="#4-提高性能的几种方式" class="headerlink" title="4. 提高性能的几种方式"></a>4. 提高性能的几种方式</h4><ol>
<li>DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作</li>
<li>如果某个样式是通过重排得到的，那么最好缓存结果。避免下一次用到的时候，浏览器又要重排。</li>
<li>不要一条条地改变样式，而要通过改变class，或者csstext属性，一次性地改变样式。</li>
<li>尽量使用离线DOM，而不是真实的网面DOM，来改变元素样式。比如，操作Document Fragment对象，完成后再把这个对象加入DOM。再比如，使用 cloneNode() 方法，在克隆的节点上进行操作，然后再用克隆的节点替换原始节点。 documentFragment ( 文档片段:虚拟的节点在重复的渲染过程中避免产生渲染回流,其实可以理解为重排 )</li>
<li>先将元素设为<code>display: none</code>（需要1次重排和重绘），然后对这个节点进行100次操作，最后再恢复显示（需要1次重排和重绘）。这样一来，你就用两次重新渲染，取代了可能高达100次的重新渲染。</li>
<li>position属性为<code>absolute</code>或<code>fixed</code>的元素，重排的开销会比较小，因为不用考虑它对其他元素的影响。</li>
<li>只在必要的时候，才将元素的display属性为可见，因为不可见的元素不影响重排和重绘。另外，<code>visibility : hidden</code>的元素只对重绘有影响，不影响重排。</li>
<li>虚拟DOM框架 vue、react</li>
<li>使用 window.requestAnimationFrame()、window.requestIdleCallback() 这两个方法调节重新渲染</li>
</ol>
<p><a href="http://www.ruanyifeng.com/blog/2015/09/web-page-performance-in-depth.html" target="_blank" rel="external">详见阮一峰大大文章</a></p>
<h4 id="5-什么是DOM"><a href="#5-什么是DOM" class="headerlink" title="5. 什么是DOM"></a>5. 什么是DOM</h4><p>DOM，文档对象模型（Document Object Model）。DOM是 W3C（万维网联盟）的标准，DOM定义了访问HTML和XML文档的标准。在W3C的标准中，DOM是独于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。</p>
<p>DOM（文档对象模型）是针对xml经过扩展用于html的应用程序编程接口，我们又叫API。DOM把整个页面映射为一个多层的节点结构，html或xml页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。</p>
<h4 id="6-DOM的地位"><a href="#6-DOM的地位" class="headerlink" title="6. DOM的地位"></a>6. DOM的地位</h4><p>一个网页是由html来搭建结构的，通过css来定义网页的样式，而JavaScript赋予了页面的行为，通过它我们可以与页面进行交互，实现页面的动画效果等等。那javascript究竟通过什么来实现的呢？通过ECMAScript这个标准，我们可以编写程序让浏览器来解析，利用ECMAScript，我们可以通过BOM对象（即browser object model）来操作浏览器窗口、浏览器导航对象(navigator)、屏幕分辨率(screen)、浏览器历史(history)、cookie等等。但这个通过BOM来实现的交互远远不够。要实现页面的动态交互和效果，操作html才是核心。那如何操作html呢？对，就是DOM，简单的说，DOM给我们提供了用程序来动态控制html的接口，也就是早期的DHTMl的概念。因此，DOM处在javascript赋予html具备动态交互和效果的能力的核心地位上。</p>
<h4 id="7-DOM的发展-DOM1、DOM2、DOM3的区别"><a href="#7-DOM的发展-DOM1、DOM2、DOM3的区别" class="headerlink" title="7. DOM的发展 DOM1、DOM2、DOM3的区别"></a>7. DOM的发展 DOM1、DOM2、DOM3的区别</h4><ul>
<li><p>DOM0</p>
<p>JavaScript在早期版本中提供了查询和操作Web文档的内容API（如：图像和表单），在JavaScript中定义了定义了’images’、’forms’等，因此我们可以像下这样访问第一张图片或名为“user”的表单</p>
<p>这实际上是未形成标准的试验性质的初级阶段的DOM，现在习惯上被称为DOM0，即：第0级DOM。由于DOM0在W3C进行标准备化之前出现，还处于未形成标准的初期阶段，这时Netscape和Microsoft各自推出自己的第四代浏览器，自此DOM遍开始出各种问题。</p>
<p>​</p>
</li>
<li><p>DOM1</p>
<p>在浏览器厂商进行浏览器大站的同时，W3C结合大家的优点推出了一个标准化的DOM，并于1998年10月完成了第一级 DOM，即：DOM1。W3C将DOM定义为一个与平台和编程语言无关的接口，通过这个接口程序和脚本可以动态的访问和修改文档的内容、结构和样式</p>
<p>DOM1级主要定义了HTML和XML文档的底层结构。在DOM1中，DOM由两个模块组成：DOM Core（DOM核心）和DOM HTML。其中，DOM Core规定了基于XML的文档结构标准，通过这个标准简化了对文档中任意部分的访问和操作。DOM HTML则在DOM核心的基础上加以扩展，添加了针对HTML的对象和方法，如：JavaScript中的Document对象.</p>
<p><img src="/img/javascript/dom/dom_1.jpg" alt=""></p>
</li>
<li><p>DOM2</p>
<p>在DOM1的基础上DOM2引入了更多的交互能力，也支持了更高级的XML特性。DOM2将DOM分为更多具有联系的模块。DOM2级在原来DOM的基础上又扩充了鼠标、用户界面事件、范围、遍历等细分模块，而且通过对象接口增加了对CSS的支持。DOM1级中的DOM核心模块也经过扩展开始支持XML命名空间。在DOM2中引入了下列模块，在模块包含了众多新类型和新接口：</p>
<ol>
<li>DOM视图（DOM Views）：定义了跟踪不同文档视图的接口</li>
<li>DOM事件（DOM Events）：定义了事件和事件处理的接口</li>
<li>DOM样式（DOM Style）：定义了基于CSS为元素应用样式的接口</li>
<li>DOM遍历和范围（DOM Traversal and Range）：定义了遍历和操作文档树的接口</li>
</ol>
<p><img src="/img/javascript/dom/dom_2.jpg" alt=""></p>
<p>百度百科完整DOM2标准</p>
<p><img src="/img/javascript/dom/dom_22.jpg" alt=""></p>
</li>
</ul>
<ul>
<li><p>DOM3</p>
<p>DOM3级：进一步扩展了DOM，引入了以统一方式加载和保存文档的方法，它在DOM Load And Save这个模块中定义；同时新增了验证文档的方法，是在DOM Validation这个模块中定义的。</p>
<p>DOM3进一步扩展了DOM，在DOM3中引入了以下模块：</p>
<ol>
<li>DOM加载和保存模块（DOM Load and Save）：引入了以统一方式加载和保存文档的方法</li>
<li>DOM验证模块（DOM Validation）：定义了验证文档的方法</li>
<li>DOM核心的扩展（DOM Style）：支持XML 1.0规范，涉及XML Infoset、XPath和XML Base</li>
</ol>
<p><img src="/img/javascript/dom/dom_3.jpg" alt=""></p>
</li>
</ul>
<h4 id="8-认识DOM"><a href="#8-认识DOM" class="headerlink" title="8. 认识DOM"></a>8. 认识DOM</h4><p>DOM可以将任何HTML描绘成一个由多层节点构成的结构。节点分为12种不同类型，每种类型分别表示文档中不同的信息及标记。每个节点都拥有各自的特点、数据和方法，也与其他节点存在某种关系。节点之间的关系构成了层次，而所有页面标记则表现为一个以特定节点为根节点的树形结构。</p>
<p><img src="/img/javascript/dom/dom_tree1.jpg" alt=""></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>javascript DOM<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>对HTML元素进行操作，可添加、改变或移除css样式等<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>DOM<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将HTML代码分解成DOM节点层次</p>
<p><img src="/img/javascript/dom/dom_tree.jpg" alt=""></p>
<ul>
<li><p>文档节点的发展历史</p>
<blockquote>
<p>我们说DOM文档对象模型是从文档中抽象出来的，DOM操作的对象也是文档，因此我们有必要了解一下文档的类型。文档随着历史的发展演变为多种类型，如下:</p>
</blockquote>
<p><img src="/img/javascript/dom/dom_his.jpg" alt=""></p>
<p>​</p>
</li>
<li><p>DOM节点的类型</p>
<blockquote>
<p>DOM1级定义了一个Node接口，这个Node接口在javascript中是作为Node类型来实现的。除了IE以外，其他所有浏览器都可以访问这个类型。每个节点都有一个nodeType属性，用于表明节点的类型。节点类型通过定义数值常量和字符常量两种方式来表示，IE只支持数值常量。节点类型一共有12种，这里介绍常用的7种类型。如下图：</p>
</blockquote>
<p><img src="/img/javascript/dom/dom_type.jpg" alt=""></p>
<ol>
<li><h4 id="Element-元素节点"><a href="#Element-元素节点" class="headerlink" title="Element(元素节点)"></a>Element(元素节点)</h4><blockquote>
<p>是组成文档树的重要部分，它表示了html、xml文档中的元素。通常元素因为有子元素、文本节点或者两者的结合，元素节点是唯一能够拥有属性的节点类型。</p>
</blockquote>
<p>​</p>
</li>
<li><h4 id="Attr-属性节点"><a href="#Attr-属性节点" class="headerlink" title="Attr(属性节点)"></a>Attr(属性节点)</h4><blockquote>
<p>代表了元素中的属性，因为属性实际上是附属于元素的，因此属性节点不能被看做是元素的子节点。因而在DOM中属性没有被认为是文档树的一部分。换句话说，属性节点其实被看做是包含它的元素节点的一部分，它并不作为单独的一个节点在文档树中出现。</p>
</blockquote>
<p>​</p>
</li>
<li><h4 id="Text-文本节点"><a href="#Text-文本节点" class="headerlink" title="Text(文本节点)"></a>Text(文本节点)</h4><blockquote>
<p>是只包含文本内容的节点，在xml中称为字符数据，它可以由更多的信息组成，也可以只包含空白。在文档树中元素的文本内容和属性的文本内容都是由文本节点来表示的。</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<ul>
<li><h3 id="DOM的nodeType、nodeName、nodeValue"><a href="#DOM的nodeType、nodeName、nodeValue" class="headerlink" title="DOM的nodeType、nodeName、nodeValue"></a>DOM的nodeType、nodeName、nodeValue</h3><blockquote>
<p>通过DOM节点类型，我们可知，可以通过某个节点的nodeType属性来获得节点的类型，节点的类型可以是数值常量或者字符常量。示例代码如下：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>nodeName,nodeValue<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--nodeName,nodeValue实验--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span>这是一个元素节点<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">  </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> divNode = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(divNode.nodeName + <span class="string">"/"</span> + divNode.nodeValue);     </span></span><br><span class="line"><span class="javascript">        <span class="comment">//结果:    DIV/null  </span></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> attrNode = divNode.attributes[<span class="number">0</span>];  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(attrNode.nodeName + <span class="string">"/"</span> + attrNode.nodeValue);      </span></span><br><span class="line"><span class="javascript">        <span class="comment">//结果：   id/container  </span></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> textNode = divNode.childNodes[<span class="number">0</span>];  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(textNode.nodeName + <span class="string">"/"</span> + textNode.nodeValue);      </span></span><br><span class="line"><span class="javascript">        <span class="comment">//结果：   #text/这是一个元素节点  </span></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> commentNode = <span class="built_in">document</span>.body.childNodes[<span class="number">1</span>];  </span></span><br><span class="line"><span class="javascript">        <span class="comment">//表示取第二个注释节点，因为body下面的第一个注释节点为空白符。  </span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(commentNode.nodeName + <span class="string">"/"</span> +commentNode.nodeValue);  </span></span><br><span class="line"><span class="javascript">        <span class="comment">//结果：  #comment/nodeName,nodeValue实验  </span></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">document</span>.doctype.nodeName + <span class="string">"/"</span> + <span class="built_in">document</span>.doctype.nodeValue);   </span></span><br><span class="line"><span class="javascript">        <span class="comment">//结果： html/null  </span></span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> frag = <span class="built_in">document</span>.createDocumentFragment();  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(frag.nodeName + <span class="string">"/"</span> + frag.nodeValue);    </span></span><br><span class="line"><span class="javascript">        <span class="comment">//结果： #document-fragment/null  </span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>总结:</p>
<p><img src="/img/javascript/dom/nodeType.jpg" alt=""></p>
<p>​</p>
</li>
</ul>
<h4 id="9-关于domReady、onload"><a href="#9-关于domReady、onload" class="headerlink" title="9. 关于domReady、onload"></a>9. 关于domReady、onload</h4><blockquote>
<p>html是一种标记语言，它告诉我们这个页面有什么内容，但行为交互是需要通过DOM操作来实现的。我们不要以为有两个尖括号就以为它是一个DOM了，html标签要通过浏览器解析才会变成DOM节点，当我们向地址栏传入一个url的时候，我们开始加载页面，就能看到内容，在这期间就有一个DOM节点构建的过程。节点是以树的形式组织的，当页面上所有的html都转换为节点以后，就叫做<code>DOM树构建完毕</code>，简称为<code>domReady</code>。</p>
</blockquote>
<p>上边已经介绍了浏览器的渲染引擎的基本渲染流程</p>
<blockquote>
<p>浏览器渲染要做的事情就是把css、html、图片等静态资源显示到用户的面前</p>
</blockquote>
<p><img src="/img/javascript/dom/load.jpg" alt=""></p>
<blockquote>
<p>渲染引擎首先通过网络获得所请求文档的内容，通常以8k分块的方法来完成：</p>
</blockquote>
<p><img src="/img/javascript/dom/render.jpg" alt=""></p>
<blockquote>
<p>上图就是html渲染的基本过程，但这并不包含解析过程中浏览器加载外部资源，比如图片、脚本、iframe等的一些过程。说白了，<strong>上面的4步仅仅是html结构的渲染过程</strong>。而外部资源的加载在html结构的渲染过程中是贯彻始终的，即便绘制DOM节点已经完成，而外部资源仍然可能正在加载或者尚未加载。</p>
</blockquote>
<p>然而我们并不是要在去了解浏览器渲染引擎到底是怎么来工作的、我们需要了解的是domReady的实现策略</p>
<ul>
<li>实例1</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Dom not ready<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">"header"</span>).style.color = <span class="string">"red"</span>;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>这里是h1元素包含的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里文字并没有变成红色,开始学习DOM的操作多少都会碰到这个问题,原因就在于没有区分清楚<code>HTML标签</code>与<code>DOM节点</code>的区别, 浏览器通过解析器解析html语义标签,解析css样式表构建生成一个DOM节点树,就叫做DOM树构建,结束的过程代表<code>domReady</code></p>
<ol>
<li>这里可以通过一个定时器来不断的去执行也可以实现效果</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'header'</span>).style.color = <span class="string">'red'</span>;</span><br><span class="line">&#125;,<span class="number">30</span>);</span><br></pre></td></tr></table></figure>
<p>虽然也可以实现效果但是用户界面总会有一个短暂的闪烁,颜色在随之改变.不利于用户的体验.</p>
<ol>
<li>另外一个解决方式</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">document</span>.getElementById(<span class="string">'header'</span>).style.color = <span class="string">'red'</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有一定了解的这里肯定会去使用<code>window.onload</code> 来解决这个问题,没有任何问题</p>
<blockquote>
<p>window.onload方法，表示当页面所有的元素都加载完毕，并且所有要请求的资源也加载完毕才触发执行function这个匿名函数里边的具体内容。这样肯定保证了代码在domReady之后执行。使用window.onload方法在文档外部资源不多的情况下不会有什么问题，但是当页面中有大量远程图片或要请求的远程资源时，我们需要让js在点击每张图片时，进行相应的操作，如果此时外部资源还没有加载完毕，点击图片是不会有任何反应的，大大降低了用户体验。那既然window.onload方法不可行，又该怎么做呢？</p>
</blockquote>
<ul>
<li>实例2</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Dom not ready<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>这里是h1元素包含的内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">"header"</span>).style.color = <span class="string">"red"</span>;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里并没有考虑 domReady 程序也可以正常运行, 因为浏览器是从上而下,从左到右渲染元素的, js代码肯定会在domReady之后去执行, 那为什么还要去写domReady呢? 在编写大型项目的时候，js文件往往非常多，而且之间会相互调用，大多数都是外部引用的，不把js代码直接写在页面上。这样的话，如果有个domReady这个方法，我们想用它就调用，不管逻辑代码写在哪里，都是等到domReady之后去执行的。</p>
</blockquote>
<p>jQuery中的readey事件其实就是domReady完成执行其中的代码块,算是弥补了window.onload的短板, 用的是w3c提供的<code>DOMContentLoaded</code>事件, 但是DOMContentLoaded不支持低版本的IE(<a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded" target="_blank" rel="external">DOMContentLoaded</a>)MDN文档</p>
<p>简单的来说,在页面的DOM树创建完成后（也就是HTML解析第一步完成）即触发，而无需等待其他资源的加载。即domReady实现策略:</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; 1. 支持DOMContentLoaded事件的，就使用DOMContentLoaded事件。</span><br><span class="line">&gt; 2. 不支持的就用来自Diego Perini发现的著名Hack兼容。兼容原理大概就是通过IE中的document，</span><br><span class="line">&gt; documentElement.doScroll(&apos;left&apos;)来判断DOM树是否创建完毕。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="10-javascript对DOMReady的实现"><a href="#10-javascript对DOMReady的实现" class="headerlink" title="10. javascript对DOMReady的实现"></a>10. javascript对DOMReady的实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 目前Mozilla、Opera和webkit 525+内核支持DOMContentLoaded事件</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.addEventListener) &#123;</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.removeEventListener(<span class="string">'DOMContentLoaded'</span>,<span class="built_in">arguments</span>.callee, <span class="literal">false</span>);</span><br><span class="line">            fn();</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果IE</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.attachEvent) &#123;</span><br><span class="line">        <span class="comment">// 确保当页面是在iframe中加载时，事件依旧会被安全触发</span></span><br><span class="line">        <span class="built_in">document</span>.attachEvent(<span class="string">'onreadystatechange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">document</span>.readyState == <span class="string">'complete'</span>) &#123;</span><br><span class="line">                <span class="built_in">document</span>.detachEvent(<span class="string">'onreadystatechange'</span>, <span class="built_in">arguments</span>.callee);</span><br><span class="line">                fn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是IE且页面不在iframe中时，轮询调用doScroll 方法检测DOM是否加载完毕</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.documentElement.doScroll &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span>.frameElement === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="built_in">document</span>.documentElement.doScroll(<span class="string">'left'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(error)&#123;</span><br><span class="line">                <span class="keyword">return</span> setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">20</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">            fn();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myReady</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//对于现代浏览器，对DOMContentLoaded事件的处理采用标准的事件绑定方式</span></span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">document</span>.addEventListener ) &#123;</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        IEContentLoaded(fn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//IE模拟DOMContentLoaded</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">IEContentLoaded</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> d = <span class="built_in">window</span>.document;</span><br><span class="line">        <span class="keyword">var</span> done = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只执行一次用户的回调函数init()</span></span><br><span class="line">        <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!done) &#123;</span><br><span class="line">                done = <span class="literal">true</span>;</span><br><span class="line">                fn();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// DOM树未创建完之前调用doScroll会抛出错误</span></span><br><span class="line">                d.documentElement.doScroll(<span class="string">'left'</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="comment">//延迟再试一次~</span></span><br><span class="line">                setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">50</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 没有错误就表示DOM树创建完毕，然后立马执行用户回调</span></span><br><span class="line">            init();</span><br><span class="line">        &#125;)();</span><br><span class="line">        <span class="comment">//监听document的加载状态</span></span><br><span class="line">        d.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 如果用户是在domReady之后绑定的函数，就立马执行</span></span><br><span class="line">            <span class="keyword">if</span> (d.readyState == <span class="string">'complete'</span>) &#123;</span><br><span class="line">                d.onreadystatechange = <span class="literal">null</span>;</span><br><span class="line">                init();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery实现的过程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindReady</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( readyBound ) <span class="keyword">return</span>;</span><br><span class="line">    readyBound = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// Mozilla, Opera and webkit nightlies currently support this event</span></span><br><span class="line">     <span class="keyword">if</span> ( <span class="built_in">document</span>.addEventListener ) &#123;</span><br><span class="line">        <span class="comment">// Use the handy event callback</span></span><br><span class="line">         <span class="built_in">document</span>.addEventListener( <span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.removeEventListener( <span class="string">"DOMContentLoaded"</span>, <span class="built_in">arguments</span>.callee, <span class="literal">false</span> );</span><br><span class="line">            jQuery.ready();</span><br><span class="line">        &#125;, <span class="literal">false</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If IE event model is used</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="built_in">document</span>.attachEvent ) &#123;</span><br><span class="line">        <span class="comment">// ensure firing before onload,</span></span><br><span class="line">        <span class="comment">// maybe late but safe also for iframes</span></span><br><span class="line">        <span class="built_in">document</span>.attachEvent(<span class="string">"onreadystatechange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">document</span>.readyState === <span class="string">"complete"</span> ) &#123;</span><br><span class="line">                <span class="built_in">document</span>.detachEvent( <span class="string">"onreadystatechange"</span>, <span class="built_in">arguments</span>.callee );</span><br><span class="line">                jQuery.ready();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// If IE and not an iframe</span></span><br><span class="line">        <span class="comment">// continually check to see if the document is ready</span></span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">document</span>.documentElement.doScroll &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span>.frameElement === <span class="string">"undefined"</span> ) (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( jQuery.isReady ) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// If IE is used, use the trick by Diego Perini</span></span><br><span class="line">                <span class="comment">// http://javascript.nwbox.com/IEContentLoaded/</span></span><br><span class="line">                <span class="built_in">document</span>.documentElement.doScroll(<span class="string">"left"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span>( error ) &#123;</span><br><span class="line">                setTimeout( <span class="built_in">arguments</span>.callee, <span class="number">0</span> );</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// and execute any waiting functions</span></span><br><span class="line">            jQuery.ready();</span><br><span class="line">        &#125;)();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// A fallback to window.onload, that will always work</span></span><br><span class="line">    jQuery.event.add( <span class="built_in">window</span>, <span class="string">"load"</span>, jQuery.ready );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/JulyZhang/archive/2011/02/12/1952484.html" target="_blank" rel="external">各大主流JS框架中对DOMReady事件的实现</a></p>
<p>本文借鉴了很多大神的blog，自己也对DOM有了更深的理解，希望可以帮助到更多人。</p>
]]></content>
      
        <categories>
            
            <category> DOM </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DOM </tag>
            
            <tag> domReady </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RegExp]]></title>
      <url>/Javascript/javascript/RegExp/</url>
      <content type="html"><![CDATA[<p><img src="/img/javascript/RegExp.jpg" alt="reg"></p>
<p>Regular Expression 正则表达式，又称正规表示式。使用单个字符串来描述，匹配一系列符合某个句法规则的字符串。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。正则表达式是是一种匹配模式要么匹配字符，要么匹配位置</p>
<a id="more"></a> 
<p>正则表达式的应用非常的广泛，比如在dos窗口下 <em>find</em> 命令</p>
<blockquote>
<p>dir find *.txt</p>
</blockquote>
<p>找到当前目录下所有的 <code>.txt</code> 结尾的文件。再比如很多 <em>IDE</em> 工具中都有正则替换的功能。再比如替换日期格式，匹配请求头替换等等。正则让一些繁琐的处理方式变得简单。重温了一遍黑魔法正则表达式。</p>
<p><img src="/img/javascript/ide.png" alt="ide"></p>
<h1 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h1><p>JavaScript中正则表达式使用包含两个方面字符方法与正则方法。不同的方法调用方式是不同的。下面列举一下</p>
<p>字符方法中可以接受正则表达式的方法有</p>
<blockquote>
<p>split、match、replace、search</p>
</blockquote>
<p>正则方法</p>
<blockquote>
<p>test、exec</p>
</blockquote>
<p>标识符</p>
<blockquote>
<p>g（global）、i（ignoreCase）、m（multiline）</p>
</blockquote>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>元字符某些其实就是转义字符，正则表达式中常用的几个元字符</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>\d</td>
<td>数字</td>
</tr>
<tr>
<td>\D</td>
<td>非数字</td>
</tr>
<tr>
<td>\w</td>
<td>数字字母下划线</td>
</tr>
<tr>
<td>\W</td>
<td>非数字字母下划线</td>
</tr>
<tr>
<td>\s</td>
<td>空格</td>
</tr>
<tr>
<td>\S</td>
<td>非空格</td>
</tr>
<tr>
<td>\b</td>
<td>单词边界</td>
</tr>
<tr>
<td>\B</td>
<td>非单词边界</td>
</tr>
<tr>
<td>^</td>
<td>以xx开头</td>
</tr>
<tr>
<td>$</td>
<td>以xx结尾</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\d/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(<span class="string">"abc"</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(<span class="string">"abc1"</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\bis\b/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this is a box'</span>.replace(pattern, <span class="string">'IS'</span>)); <span class="comment">// this IS a box</span></span><br></pre></td></tr></table></figure>
<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>字符集用来指定某一些符合特性的字符，用 <code>[]</code> 来表示可以是单个字符或者是一个范围 例如[abc] [0-9] </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/[0-9a-zA-Z_]/g</span>;        <span class="comment">// 与\w意思相同</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(<span class="string">'*'</span>));      <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'--abc--'</span>.replace(pattern, <span class="string">'X'</span>)); <span class="comment">// --XXX--</span></span><br></pre></td></tr></table></figure>
<p>取反 字符集中使用 <code>^</code> 代表非的意思</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/[^abc]/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'abc123'</span>.replace(pattern, <span class="string">'X'</span>)); <span class="comment">// XXX123</span></span><br></pre></td></tr></table></figure>
<p>js的正则中 <code>.</code> 也代表一个范围和上边的元字符一样代表一个范围 写成字符集可以是 <code>[^\r\n]</code> ，<code>\d</code> 可以写成 <code>[0-9]</code> 。</p>
<h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p>用来判断字符重复出现</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>?</td>
<td>出现零次或者一次(最多一次)</td>
</tr>
<tr>
<td>+</td>
<td>出现一次或者多次(最少出现一次)</td>
</tr>
<tr>
<td>*</td>
<td>出现零次或者多次</td>
</tr>
<tr>
<td>{n}</td>
<td>出现n次</td>
</tr>
<tr>
<td>{n,m}</td>
<td>出现n到m次</td>
</tr>
<tr>
<td>{n,}</td>
<td>最少出现n次</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\d&#123;3&#125;/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><em>贪婪模式</em></p>
<p>在满足匹配条件的情况下尽可能的多的去匹配</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\d&#123;2,5&#125;/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(pattern, <span class="string">'x'</span>)); <span class="comment">// x6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\d&#123;2,5&#125;/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(pattern, <span class="string">'x'</span>)); <span class="comment">// x6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\d&#123;2,5&#125;/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern));  <span class="comment">// ["12345", index: 0, input: "123456"]</span></span><br></pre></td></tr></table></figure>
<p><em>非贪婪模式</em></p>
<p>在满足条件的情况下尽可能少的去匹配</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\d&#123;2,5&#125;?/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(pattern, <span class="string">'x'</span>)); <span class="comment">// xxx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\d&#123;2,5&#125;?/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(pattern, <span class="string">'x'</span>)); <span class="comment">// x3456</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\d&#123;2,5&#125;?/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern));  <span class="comment">// ["12", index: 0, input: "123456"]</span></span><br></pre></td></tr></table></figure>
<h2 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h2><p>子集也是分组，在正则表达式中分组是一个重要的功能</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/box&#123;2&#125;/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"boxx"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern，test(str)); <span class="comment">// true  box&#123;2&#125;匹配的是x出现两次 不是box两次</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(box)&#123;2&#125;/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="regexp">/boxbox/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><em>反向引用</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'boxbox'</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(box)&#123;2&#125;/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/(box)\1/</span>.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>反向引用顾名思义就是去引用前边的内容也就是说要一模一样。比如检测一个字符串中是否有连续出现相同的字符</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(\w)\<span class="number">1</span>/.test(<span class="string">"pattern"</span>);</span><br></pre></td></tr></table></figure>
<p><em>捕获性分组</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"2018-2-13"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(2018)-(2)-(13)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ["2018-2-13", "2018", "2", "13", index: 0, input: "2018-2-13"]</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.exec(str));  <span class="comment">// ["2018-2-13", "2018", "2", "13", index: 0, input: "2018-2-13"]</span></span><br></pre></td></tr></table></figure>
<p><code>match</code> 与 <code>exec</code> 返回一个数组，匹配成功，返回的数组第一项是匹配成功的字符串，其余项为 <em>分组项</em> 即 <em>子集</em> </p>
<p>非捕获性分组*</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(?:a)(b)(c)/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(pattern)); <span class="comment">// ["abc", "b", "c", index: 0, input: "abc"]</span></span><br></pre></td></tr></table></figure>
<p><code>?:</code> 这个分组将不会被返回。为了整体的匹配只返回需要的</p>
<p><em>前瞻模式</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'google'</span>;    </span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/goo(?=gle)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(patter.test(str));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.exec(str)); <span class="comment">// ["goo", index: 0, input: "google"]</span></span><br></pre></td></tr></table></figure>
<p><em>goo</em> 后边必须跟的是 <em>gle</em> 。同样捕获返回分组内容，只会返回匹配成功的字符</p>
<p><em>负向前瞻</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"ab123"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/a(?![a-zA-Z])/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(pattern, <span class="string">"X"</span>)); <span class="comment">// aX123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"a123*7vv"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\w(?!\d)/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(pattern, <span class="string">'X'</span>)); <span class="comment">// a12X*XXX</span></span><br></pre></td></tr></table></figure>
<p>如何实现数字的千位分隔符表示？<em>123456789 =&gt; 123,456,789</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'123456789'</span>.replace(<span class="regexp">/(?!^)(?=(\d&#123;3&#125;)+$)/g</span>, <span class="string">','</span>);</span><br></pre></td></tr></table></figure>
<p><em>或者</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"box is xob"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/box|xob/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(pattern, <span class="string">'X'</span>));</span><br></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>正则表达式提供了两个方法 <code>test</code> <code>exec</code> 这个两个方法有些地方需要注意一下</p>
<p><em>test example</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\w/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str));  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str));  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>有点奇怪是吧~</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\w/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>两个的区别在于加了 <code>global</code> 标识符的正则表达式的 <code>lastIndex</code> 属性会每次作用于正则表达式本身。lastIndex 属性为匹配文本的最后一个字符的下一个位置，所以出现了一次 <em>true</em> 一次 <em>false</em> 奇怪的现象好像看着正则表达式一点都不靠谱。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\w/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str), pattern.lastIndex);  <span class="comment">// true  1</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str), pattern.lastIndex);  <span class="comment">// false 0</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.test(str), pattern.lastIndex);  <span class="comment">// true  1</span></span><br></pre></td></tr></table></figure>
<p>只有加了 <code>global</code> 标识符 <code>lastIndex</code> 才会生效</p>
<p><em>exec example</em> </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'1ab2cc3dd4'</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\d\w\w\d/</span>;</span><br><span class="line"><span class="keyword">var</span> ret1 = pattern.exec(str);</span><br><span class="line"><span class="keyword">var</span> ret2 = str.match(pattern);</span><br><span class="line"><span class="built_in">console</span>.log(ret1, pattern.lastIndex);  <span class="comment">// ["1ab2", index: 0, input: "1ab2cc3dd4"] undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(ret2, pattern.lastIndex);  <span class="comment">// ["1ab2", index: 0, input: "1ab2cc3dd4"] undefined</span></span><br></pre></td></tr></table></figure>
<p>加上 <code>global</code> 标识符</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'1ab2cc3dd4'</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\d\w\w\d/g</span>;</span><br><span class="line"><span class="keyword">var</span> ret1 = pattern.exec(str);</span><br><span class="line"><span class="keyword">var</span> ret2 = str.match(pattern);</span><br><span class="line"><span class="comment">// 第一次</span></span><br><span class="line"><span class="built_in">console</span>.log(ret1, pattern.lastIndex);  <span class="comment">// ["1ab2", index: 0, input: "1ab2cc3dd4"] 4</span></span><br><span class="line"><span class="comment">// 第二次</span></span><br><span class="line"><span class="built_in">console</span>.log(ret2, pattern.lastIndex);  <span class="comment">// ["1ab2", "3dd4"] 0</span></span><br></pre></td></tr></table></figure>
<p>同样加了全局标识符之后 <code>lastIndex</code> 会随着匹配过程改变，变成全局的正则表达式 <em>match</em> 方法 <code>lastIndex</code> 是不会改变的，也不会像 <em>exec</em> 返回一个详细的信息包括匹配成功的位置，匹配的字符串，下一次匹配的起始位置。选择时候如果不需要这些信息完全可以使用 <em>match</em> 获取结果就ok，如果需要位置信息就要选择 <em>exec</em></p>
<p>全局正则 <code>lastIndex</code> 改变那么就可以反复调用 <em>exec</em> 方法来遍历字符串中的所有匹配文本。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'1ab2cc3dd4'</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\d\w\w\d/g</span>;</span><br><span class="line"><span class="keyword">var</span> ret;</span><br><span class="line"><span class="keyword">while</span>(ret = pattern.exec(str))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(ret);</span><br><span class="line">    <span class="built_in">console</span>.log(pattern.lastIndex + <span class="string">'\t'</span> + ret.index + <span class="string">'\t'</span> + ret.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RegExp-1-9"><a href="#RegExp-1-9" class="headerlink" title="RegExp.$1-$9"></a>RegExp.$1-$9</h2><blockquote>
<p>$1 - $9 属性是包含括号子集匹配的正则表达式的静态和只读属性。通过RegExp直接访问</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/(\w+)\s(\w+)/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'John Smith'</span>;</span><br><span class="line">str.replace(re, <span class="string">'$2, $1'</span>); <span class="comment">// "Smith, John"</span></span><br><span class="line"><span class="built_in">RegExp</span>.$<span class="number">1</span>; <span class="comment">// "John"</span></span><br><span class="line"><span class="built_in">RegExp</span>.$<span class="number">2</span>; <span class="comment">// "Smith"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="string">'2018-01-10'</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(date.replace(pattern, <span class="string">'$2/$3/$1'</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'我是&#123;&#123;name&#125;&#125;，年龄&#123;&#123;age&#125;&#125;，性别&#123;&#123;sex&#125;&#125;'</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name:<span class="string">'张三'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    sex: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = str.replace(<span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>,<span class="function"><span class="keyword">function</span> (<span class="params">match, m1</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> person[m1]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 我是张三，年龄20，性别男</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中文</span></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/^[\\u4e00-\\u9fa5]&#123;0,&#125;$/</span>;</span><br><span class="line"><span class="comment">// 颜色</span></span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/^#([A-Fa-f0-9]&#123;6&#125;|[A-Fa-f0-9]&#123;3&#125;)$/</span>;</span><br></pre></td></tr></table></figure>
<h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>正则表达式图形化界面，对于理解很有帮助</p>
<ul>
<li><a href="https://regexper.com/" target="_blank" rel="external">Regexper: 可视化正则表达式</a></li>
<li><a href="https://regex101.com/" target="_blank" rel="external">在线正则表达式使用</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> RegExp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Object]]></title>
      <url>/Javascript/javascript/Object/</url>
      <content type="html"><![CDATA[<p><img src="/img/javascript/Object.jpg" alt="object"></p>
<a id="more"></a>
<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><blockquote>
<p>ECMAScript中，引用类型是一种结构好比一个类，将数据和功能结合到一起。描述一类对象的属性和方法。</p>
</blockquote>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>js中属于 <em>Object</em> 数据类型的很多数组、日期、正则、甚至是函数。创建对象的方式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new 关键字</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>对象可以有自己的方法和属性，例如可以给obj扩展 <em>property</em> 和方法 <em>method</em> </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">"xq"</span>;</span><br><span class="line">person.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.name) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// key value形式书写 key可以加引号或者不加</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">"xq"</span>, <span class="attr">say</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.name) &#125;&#125;;</span><br></pre></td></tr></table></figure>
<p>访问对象的属性和方法可以采用方括号的语法 <code>[]</code> </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person[<span class="string">'name'</span>]);</span><br><span class="line"><span class="keyword">var</span> method = <span class="string">'say'</span>;</span><br><span class="line">person[method]();</span><br><span class="line"><span class="comment">// 为什么会有这样的写法呢？</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="string">"e-mail"</span>: <span class="string">"youname@mail.com"</span>, <span class="string">"first name"</span>: <span class="string">"xx"</span>&#125;;</span><br><span class="line">person.e-mail;       <span class="comment">// error</span></span><br><span class="line">person.first name    <span class="comment">// error</span></span><br><span class="line">person[<span class="string">"e-mail"</span>]     <span class="comment">// bingo</span></span><br><span class="line">person[<span class="string">"first name"</span>] <span class="comment">// bingo</span></span><br></pre></td></tr></table></figure>
<p>上边访问方式可以看到也可以用一个变量，但是能去点访问就不要写变量，毕竟多一个变量多一份担忧。</p>
<h2 id="in-amp-hasOwnProperty"><a href="#in-amp-hasOwnProperty" class="headerlink" title="in &amp; hasOwnProperty"></a>in &amp; hasOwnProperty</h2><blockquote>
<p>去检测一个对象中的属性是否存在是非常必要的，比如当我们去合并数据的时候，或者对这个数据做一些筛选的时候</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"xx"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// in </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name"</span> <span class="keyword">in</span> obj);    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"valueOf"</span> <span class="keyword">in</span> obj); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// hasOwnProperty</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">"name"</span>));    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">"valueOf"</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>检测 <code>name</code> 字段都没问题返回 <em>true</em> ，检测 <code>valueOf</code> 字段结果不同，因为 <code>valueOf</code> 是所有对象都具有的也就是继承父类的，<em>in</em>是可以检测到的，相反<em>hasOwnProperty</em>是不会去检测继承的与在原型扩展的属性只检测<strong>自有属性 </strong></p>
<p>合并数据</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>， d: <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> date2 = &#123;<span class="attr">b</span>: <span class="number">3</span>, <span class="attr">c</span>: <span class="number">4</span>&#125;;</span><br><span class="line"><span class="comment">// 将date1合并到date2中 相同的合并</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> date1)&#123;</span><br><span class="line">    <span class="comment">// 做检测是否是date1的自有属性</span></span><br><span class="line">    <span class="keyword">if</span>(date1.hasOwnProperty(k))&#123;</span><br><span class="line">    	date2[k] = date1[k]    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(date2); <span class="comment">// &#123;a: 1, b: 3, c: 4, d: 5&#125;;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(&#123;&#125;, date1, date2)); <span class="comment">// 原生提供的方法，在不破坏原有对象属性的情况下进行合并 自己也可以写一个合并数据的方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixin</span>(<span class="params">target, source</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 不定参</span></span><br><span class="line">    <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">if</span>(args.length == <span class="number">1</span>) <span class="keyword">return</span> target;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (source = args[index++]) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> source)&#123;</span><br><span class="line">            <span class="keyword">if</span>(source.hasOwnProperty(k))&#123;</span><br><span class="line">                target[k] = source[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixin</span>(<span class="params">target, ...source</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> source.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> b)<span class="keyword">if</span>(b.hasOwnProperty(k))&#123;</span><br><span class="line">            a[k] = b[k]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    ), target);</span><br><span class="line">    <span class="comment">// source.forEach(item =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     for(var k in item)if(item.hasOwnProperty(k))&#123;</span></span><br><span class="line">    <span class="comment">//         target[k] = item[k]</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    <span class="comment">// return target;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><blockquote>
<p>对象的属性和方法是可以被删除的</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">delete</span> b;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// not defined</span></span><br><span class="line"><span class="comment">// 定义在window作用域中的属性和方法相当于对 window对象扩展属性和方法 没有var定义的会被delete删除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.num); <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">delete</span> obj.num;</span><br><span class="line"><span class="built_in">console</span>.log(obj.num); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><blockquote>
<p>this是javascript中很头疼的一个东西</p>
</blockquote>
<p>this，<em>call</em>、<em>apply</em>、<em>bind</em> 的使用与区别</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// window</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// window</span></span><br></pre></td></tr></table></figure>
<p>定义在 <em>script</em> 标签下的全局函数相当于给 <em>window</em> 对象添加了一个方法上边的调用还可以写成 window.foo()。this的指向为调用该方法的对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   a: <span class="number">10</span>,</span><br><span class="line">   say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.say(); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">window</span>.obj.say(); <span class="comment">// 10</span></span><br><span class="line"><span class="comment">// this的指向都是调用这个方法的对象也就是obj</span></span><br></pre></td></tr></table></figure>
<p>但是当把函数的引用指向一个变量的时候就有点问题了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = obj.say;</span><br><span class="line">fn(); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">window</span>.fn(); <span class="comment">// 相当于此 this === window this的指向都是调用它的那个对象</span></span><br></pre></td></tr></table></figure>
<p><strong>this</strong> 指向的偏移，打一个不恰当的比方就相当于移情别恋了。。。</p>
<ul>
<li><em>call</em></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">   name: <span class="string">'如花'</span>,</span><br><span class="line">   say: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"你只能爱我一人。。。"</span>+ <span class="keyword">this</span>.name);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">   name: <span class="string">'凤姐'</span></span><br><span class="line">&#125;</span><br><span class="line">a.say();       <span class="comment">// a爱着如花</span></span><br><span class="line">a.say.call(b); <span class="comment">// a变心了爱上了凤姐</span></span><br></pre></td></tr></table></figure>
<ul>
<li>apply</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.say.apply(b) <span class="comment">// 凤姐</span></span><br></pre></td></tr></table></figure>
<p><code>call</code> <code>apply</code> 有什么区别呢？现在a想说点其它的，于是乎</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">   name: <span class="string">'如花'</span>,</span><br><span class="line">   say: <span class="function"><span class="keyword">function</span>(<span class="params">param1, param2</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(param1 + <span class="string">"你只能爱我一人。。。"</span>+ <span class="keyword">this</span>.name + parma2);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">   name: <span class="string">'凤姐'</span></span><br><span class="line">&#125;</span><br><span class="line">a.say(<span class="string">'皇天在上'</span>, <span class="string">'永远不变'</span>);            <span class="comment">// 皇天在上你只能爱我一人。。。如花永远不变</span></span><br><span class="line">a.say.call(b, <span class="string">'皇天在上'</span>, <span class="string">'永远不变'</span>);    <span class="comment">// 皇天在上你只能爱我一人。。。凤姐永远不变 </span></span><br><span class="line">a.say.apply(b, [<span class="string">'皇天在上'</span>, <span class="string">'永远不变'</span>]); <span class="comment">// 皇天在上你只能爱我一人。。。凤姐永远不变</span></span><br></pre></td></tr></table></figure>
<p>call() 和 apply()，两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。</p>
<p>apply() 方法调用一个函数, 其具有一个指定的this值，以及作为一个数组（或类似数组的对象）提供的参数。</p>
<ul>
<li>bind</li>
</ul>
<p><em>bind</em> 与 <em>call</em> 在传递参数上没什么区别，区别在于 bind()方法<strong>创建</strong>一个新的函数， 并且 <em>bind</em> 有兼容问题</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.say.call(b, <span class="string">'皇天在上'</span>, <span class="string">'永远不变'</span>); <span class="comment">// 说话了</span></span><br><span class="line">a.say.bind(b, <span class="string">'皇天在上'</span>, <span class="string">'永远不变'</span>); <span class="comment">// 不说话</span></span><br><span class="line"><span class="comment">// 再次调用</span></span><br><span class="line">a.say.bind(b, <span class="string">'皇天在上'</span>, <span class="string">'永远不变'</span>)();</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">a.say.bind(b)(<span class="string">'皇天在上'</span>, <span class="string">'永远不变'</span>);</span><br></pre></td></tr></table></figure>
<p>还有 <code>new</code> 也可以改变this指向，构造函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">   obj.name = name;</span><br><span class="line">   obj.age = age;</span><br><span class="line">   <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person(<span class="string">"xxx"</span>, <span class="number">18</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">this</span>.age = age;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// Person() this指向window</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Person(<span class="string">'xxx'</span>, <span class="number">18</span>)); <span class="comment">// this指向 Person对象 通过new改变了this的指向</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">this</span>.age = age;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// Person() this指向window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Person(<span class="string">'xxx'</span>, <span class="number">18</span>)); <span class="comment">// 构造函数默认返回this 所以可以不写</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Date]]></title>
      <url>/Javascript/javascript/Date/</url>
      <content type="html"><![CDATA[<p><img src="/img/javascript/Date.jpg" alt="date"></p>
<a id="more"></a>
<blockquote>
<p>Date类型使用自UTC（Coordinated Universal Time，国际协调时间）。从1970.1.1 00:00:00开始</p>
</blockquote>
<h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h1><p>日期对象的定义</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以传递参数</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(year, month, day, hours, minutes, seconds);</span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(milliseconds);</span><br></pre></td></tr></table></figure>
<p>js还定义另外两种方法 <code>Date.parse</code> <code>Date.UTC</code> 同样可以接受参数返回毫秒数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(<span class="string">"2018,02,09"</span>));</span><br><span class="line"><span class="comment">// Fri Feb 09 2018 00:00:00 GMT+0800</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2018</span>,<span class="number">02</span>,<span class="number">09</span>));</span><br><span class="line"><span class="comment">// Fri Mar 09 2018 08:00:00 GMT+0800</span></span><br><span class="line"><span class="comment">// 可以发现两个日期的月份不一样 UTC格式中传入的月份 0-11 parse月份 1-12 时间差了8个小时</span></span><br></pre></td></tr></table></figure>
<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>toTimeString()</td>
<td>把 Date 对象的时间部分转换为字符串。</td>
</tr>
<tr>
<td>toDateString()</td>
<td>把 Date 对象的日期部分转换为字符串。</td>
</tr>
<tr>
<td>toUTCString()</td>
<td>根据世界时，把 Date 对象转换为字符串。</td>
</tr>
<tr>
<td>tolocaleString()</td>
<td>根据本地时间格式，把 Date 对象转换为字符串。</td>
</tr>
<tr>
<td>toLocaleTimeString()</td>
<td>根据本地时间格式，把 Date 对象的时间部分转换为字符串。</td>
</tr>
<tr>
<td>toLocaleDateString()</td>
<td>根据本地时间格式，把 Date 对象的日期部分转换为字符串。</td>
</tr>
</tbody>
</table>
<h2 id="Date对象方法"><a href="#Date对象方法" class="headerlink" title="Date对象方法"></a>Date对象方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>getDate()</td>
<td>从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td>
</tr>
<tr>
<td>getDay()</td>
<td>从 Date 对象返回一周中的某一天 (0 ~ 6)。</td>
</tr>
<tr>
<td>getMonth()</td>
<td>从 Date 对象返回月份 (0 ~ 11)。</td>
</tr>
<tr>
<td>getFullYear()</td>
<td>从 Date 对象以四位数字返回年份。</td>
</tr>
<tr>
<td>getHours()</td>
<td>返回 Date 对象的小时 (0 ~ 23)。</td>
</tr>
<tr>
<td>getMinutes()</td>
<td>返回 Date 对象的分钟 (0 ~ 59)。</td>
</tr>
<tr>
<td>getSeconds()</td>
<td>返回 Date 对象的秒数 (0 ~ 59)。</td>
</tr>
<tr>
<td>getTime()</td>
<td>返回 1970 年 1 月 1 日至今的毫秒数。</td>
</tr>
<tr>
<td>getTimezoneOffset()</td>
<td>返回本地时间与格林威治标准时间 (GMT) 的分钟差。</td>
</tr>
</tbody>
</table>
<p><em>tip</em> : Date.now() 可以获取当前的毫秒。IE不支持</p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Array]]></title>
      <url>/Javascript/javascript/Array/</url>
      <content type="html"><![CDATA[<p><img src="/img/javascript/array.jpg" alt="array"></p>
<blockquote>
<p>数组是 <em>ECMAscript</em> 中除了object之外最常用的类型了</p>
</blockquote>
<a id="more"></a>
<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><p>数组是什么？一个盒子，一个容器，还是一个垃圾桶。</p>
<p><em>Array</em> 类型是ECMAScript最常用的类型。而且ECMAScript中的Array类型和其他语言中的数组有着很大的区别。虽然数组都是有序排列，但ECMAScript中的数组每个元素可以保存任何类型。ECMAScript中数组的大小也是可以调整的。</p>
<ul>
<li>数组的定义</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用字面量写法创建数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; 					<span class="comment">// 创建了一个数字并且分配了元素</span></span><br><span class="line"><span class="comment">// PS: var arr = [1,2,];			// 禁止使用IE会识别错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用new关键字创建数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();				<span class="comment">// 创建了一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">7</span>);				<span class="comment">// 创建了一个包含7个元素的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);         <span class="comment">// 创建了一个数组并且分配了元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接Array创建</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>(<span class="number">7</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>数组的数据类型</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr); 		 <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr)); <span class="comment">// true 准确判断是不是数组</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意点</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">'xq'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">4</span>]);	<span class="comment">// undefined 第3,4位没有元素被undefined所占位</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.length);<span class="comment">// 5 使用索引也可以增加数组的长度</span></span><br></pre></td></tr></table></figure>
<h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><blockquote>
<p>数组中的方法很多，栈方法、列队方法、重排序方法、操作方法、位置方法、迭代方法</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>push(param)</td>
<td>往数组的末尾添加元素</td>
</tr>
<tr>
<td>unshift(param)</td>
<td>往数组的前端添加元素</td>
</tr>
<tr>
<td>pop()</td>
<td>从数组的末尾删除元素,并返回</td>
</tr>
<tr>
<td>shift()</td>
<td>从数组的前端删除元素,并返回</td>
</tr>
<tr>
<td>sort()</td>
<td>数组排序(默认按照ASCII值排序),可以传递一个<strong>function</strong>参数</td>
</tr>
<tr>
<td>slice()</td>
<td>复制数组，并返回</td>
</tr>
<tr>
<td>splice()</td>
<td>剪切数组元素，并返回</td>
</tr>
<tr>
<td>concat()</td>
<td>拼接数组,返回一个数组</td>
</tr>
<tr>
<td>join()</td>
<td>按照param拼接数组,返回字符串</td>
</tr>
<tr>
<td>reverse()</td>
<td>数组反转 (也可以反转字符串)</td>
</tr>
<tr>
<td>indexOf()</td>
<td>返回匹配的项,并返回索引,找不到返回-1</td>
</tr>
<tr>
<td>lastIndexOf()</td>
<td>返回匹配的项,并返回索引,找不到返回-1</td>
</tr>
<tr>
<td>find()</td>
<td>找到第一个满足测试函数的元素并返回那个元素的值，如果找不到，则返回 undefined</td>
</tr>
<tr>
<td>findIndex()</td>
<td>找到第一个满足测试函数的元素并返回那个元素的索引，如果找不到，则返回 -1</td>
</tr>
<tr>
<td>forEach()</td>
<td>遍历数组</td>
</tr>
<tr>
<td>filter()</td>
<td>对数组的每一项执行指定函数，返回该函数会返回true的项组成的数组</td>
</tr>
<tr>
<td>map()</td>
<td>对数组的每一项执行指定函数，返回该函数调用结果组成的数组</td>
</tr>
<tr>
<td>some()</td>
<td>对数组的每一项执行指定函数，如果每一项都返回true则返回该数组</td>
</tr>
<tr>
<td>reduce()</td>
<td>迭代方法</td>
</tr>
<tr>
<td>fill()</td>
<td>用一个固定值填充一个数组中从起始索引到终止索引内的全部元素</td>
</tr>
<tr>
<td>entries()</td>
<td>返回一个迭代器</td>
</tr>
</tbody>
</table>
<p><em>ps</em></p>
<p>数组中一些方法会改变原有数组的排列</p>
<blockquote>
<p>push、unshift、pop、shift、splice、sort、reverse、fill</p>
</blockquote>
<p>会返回的一个数组或者期望值的方法</p>
<blockquote>
<p>sort、reverse、splice、slice、concat、join、indexOf、lastIndexOf、find、findIndex</p>
</blockquote>
<p>会涉及到遍历数组的方法</p>
<blockquote>
<p>forEach、filter、find、findIndex、some、map、reduce</p>
</blockquote>
<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p><em>reverse</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.reverse());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> start=<span class="number">0</span>,end=arr.length<span class="number">-1</span>;start&lt;end;start++,end--)&#123;</span><br><span class="line">    arr[start] ^= arr[end];</span><br><span class="line">    arr[end] ^= arr[end];</span><br><span class="line">    arr[start] ^= arr[end];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>sort</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">11</span>];</span><br><span class="line">arr.sort();</span><br><span class="line"><span class="comment">// sort 默认排序使用ASCII值比较</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); 	<span class="comment">// [1,11,16,3,4,5,6,8];</span></span><br><span class="line"><span class="comment">// 字符串之间的比较</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'2'</span> &gt; <span class="string">'199'</span>);	<span class="comment">// true 一个道理</span></span><br><span class="line"><span class="comment">// 怎么样完成数字大小的排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  	<span class="comment">// a &lt; b &lt;==&gt; a-b&lt;0</span></span><br><span class="line">    <span class="keyword">return</span> a -b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 完成正常排序需要 通过回调函数完成</span></span><br><span class="line">arr.sort(compare);</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// return a-b; 		// 升序</span></span><br><span class="line">  	<span class="comment">// return b-a;		// 降序</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> entries = arr.entries(),temp;</span><br><span class="line">    <span class="comment">// while(temp = entries.next().value)&#123;</span></span><br><span class="line">	<span class="comment">//     temp[1].sort((a ,b) =&gt; a - b);</span></span><br><span class="line">	<span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> e <span class="keyword">of</span> entries)e[<span class="number">1</span>].sort(<span class="function">(<span class="params">a ,b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">34</span>],[<span class="number">456</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">44</span>,<span class="number">234</span>],[<span class="number">4567</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">34</span>,<span class="number">78</span>,<span class="number">23</span>,<span class="number">1</span>]];</span><br><span class="line">sortArr(arr);</span><br><span class="line"><span class="comment">// ### 元素重排序</span></span><br></pre></td></tr></table></figure>
<p><em>数组升维降维</em> </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, len</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(arr[index])&#123;</span><br><span class="line">        temp.push(arr.slice(index, index+=len));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">array, size</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(array))&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    size = size || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">        resIndex = <span class="number">0</span>,</span><br><span class="line">        length = array === <span class="literal">null</span> ? <span class="number">0</span> : array.length,</span><br><span class="line">        resLen = <span class="built_in">Math</span>.ceil(length / ( size|<span class="number">0</span>));</span><br><span class="line">        result = <span class="built_in">Array</span>(resLen);</span><br><span class="line">    <span class="keyword">while</span>(index &lt; resLen)&#123;</span><br><span class="line">        result[index++] = array.slice(resIndex, resIndex+=size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(chunk(arr,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.concat(b);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(flattened); 	<span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>
<p><em>indexOf</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">2</span>)); 	<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同样indexOf 也有去重的作用</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> foo = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(foo.indexOf(arr[i]) != <span class="number">-1</span>)&#123;</span><br><span class="line">        foo.push(arr[i]);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(foo); 			<span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure>
<p><em>filter</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	filter(item,index,array)</span></span><br><span class="line"><span class="comment">	item 	遍历的当前元素</span></span><br><span class="line"><span class="comment">	index	遍历的当前元素索引</span></span><br><span class="line"><span class="comment">	array	当前所遍历的数组</span></span><br><span class="line"><span class="comment">	做为数组的高级方法filter的过滤作用有很多的用处</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">// 返回满足条件的项 这里返回了偶数</span></span><br><span class="line"><span class="keyword">var</span> foo = arr.filter(<span class="function"><span class="params">item</span>=&gt;</span> item %<span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(foo); 		<span class="comment">// [2,4,6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</span><br><span class="line">  	<span class="comment">//检索当前的索引是不是唯一 indexOf总返回第一个元素 后续的重复元素位置与 indexOf 返回的位置不相等</span></span><br><span class="line">  	<span class="keyword">return</span> array.indexOf(item) === index;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">//反过来思考 查看是否重复 返回-1的留下</span></span><br><span class="line">  	<span class="keyword">return</span> array.indexOf(item,index+<span class="number">1</span>) == <span class="number">-1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保留非空的非undefined</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,,<span class="number">2</span>,<span class="number">3</span>,,<span class="number">4</span>,<span class="literal">undefined</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> foo = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> item &amp;&amp; item.toString().trim() &amp;&amp; <span class="keyword">typeof</span> item != <span class="string">'undefined'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><em>find</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	find(fn) findIndex(fn)</span></span><br><span class="line"><span class="comment">	fn(item,index,array)</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">name</span>:<span class="string">'xq'</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'vk'</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'afei'</span>&#125;];</span><br><span class="line"><span class="keyword">var</span> obj = arr.find(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x.name == <span class="string">'xq'</span>&#125;));</span><br><span class="line"><span class="keyword">var</span> idx = arr.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> x.name == <span class="string">'xq'</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(obj); 	<span class="comment">// &#123;name: 'xq'&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(idx); 	<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看是不是质数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  	<span class="keyword">var</span> start = <span class="number">2</span>;</span><br><span class="line">  	<span class="keyword">while</span> (start &lt;= <span class="built_in">Math</span>.sqrt(element)) &#123;</span><br><span class="line">    	<span class="keyword">if</span> (element % start++ &lt; 1) &#123;</span><br><span class="line">      		return false;</span><br><span class="line">    	&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">  	return element &gt; 1;</span><br><span class="line">&#125;</span><br><span class="line">console.log([4, 5, 8, 12].find(isPrime)); // 5</span><br></pre></td></tr></table></figure>
<p><em>map</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	map 方法会给原数组中的每个元素都按顺序调用一次  callback 函数</span></span><br><span class="line"><span class="comment">	map(fn);</span></span><br><span class="line"><span class="comment">	fn(item,index,array);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化时间 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatTime</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">  	<span class="keyword">var</span> year = date.getFullYear(),</span><br><span class="line">  		month = date.getMonth() + <span class="number">1</span>,</span><br><span class="line">        day = date.getDate(),</span><br><span class="line">		hour = date.getHours(),</span><br><span class="line">  		minute = date.getMinutes(),</span><br><span class="line">  		second = date.getSeconds();</span><br><span class="line">  	<span class="keyword">return</span> [year, month, day].map(formatNumber).join(<span class="string">'/'</span>) + <span class="string">' '</span> + [hour, minute, second].map(formatNumber).join(<span class="string">':'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatNumber</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  	n = n.toString()</span><br><span class="line">  	<span class="keyword">return</span> n[<span class="number">1</span>] ? n : <span class="string">'0'</span> + n</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取字符串的ASCII值</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'I love you'</span>;</span><br><span class="line">[].map.call(str,<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n.charCodeAt();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历元素的属性</span></span><br><span class="line"><span class="keyword">var</span> inputDoms = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line">[].map.call(inputDoms,<span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> val.value;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello xq'</span>;</span><br><span class="line">[].map.call(str,<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;).reverse().join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似的数字操作</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">21</span>,<span class="number">32</span>,<span class="number">4</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> foo = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x % <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(foo);   <span class="comment">// 0, 1, 2, 4, 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题</span></span><br><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// 可能觉的会是[1, 2, 3]</span></span><br><span class="line"><span class="comment">// 但实际的结果是 [1, NaN, NaN]</span></span><br><span class="line"><span class="comment">// parseInt有两个参数默认 parseInt做为回调函数传入map会给其默认传递三个参数 会把索引值当成进制使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进</span></span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(<span class="built_in">Number</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>
<p><em>reduce</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代求和</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    sum += arr[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sum1 = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计字符出现次数</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"aabbcc"</span>;</span><br><span class="line"><span class="keyword">var</span> count = str.split(<span class="string">""</span>).reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> ( a[b]++ || (a[b]=<span class="number">1</span>),a ), &#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(count);</span><br><span class="line"><span class="comment">// 判断 a出现的次数</span></span><br><span class="line"><span class="keyword">var</span> count = str.split(<span class="string">"a"</span>).length - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 判断数组中某一个元素出现次数</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b === value ? a + <span class="number">1</span> : a + <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换中文数字</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">123450</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"零"</span>, <span class="string">"一"</span>, <span class="string">"二"</span>, <span class="string">"三"</span>, <span class="string">"四"</span>, <span class="string">"五"</span>, <span class="string">"六"</span>, <span class="string">"七"</span>, <span class="string">"八"</span>, <span class="string">"九"</span>];</span><br><span class="line">    <span class="keyword">return</span> num.toString().split(<span class="string">""</span>).reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> ( a + arr[b] ), <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(convert(num));</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[String Number Boolean]]></title>
      <url>/Javascript/javascript/String-Number-Boolean/</url>
      <content type="html"><![CDATA[<p><img src="/img/javascript/package-class.jpg" alt="type"></p>
<a id="more"></a>
<blockquote>
<p>为了便于操作，<em>javascript</em> 提供了三个基本包装类型。在使用中不需要声明再去调用不同的方法。</p>
</blockquote>
<h1 id="Package-Class"><a href="#Package-Class" class="headerlink" title="Package Class"></a>Package Class</h1><p>看一个 <em>example</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"String"</span>;</span><br><span class="line">str.substring(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p><code>str</code> 固然是一个字符串基本类型，那怎么可以去调用 <code>substring</code> 这个方法的。其实是这样的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"String"</span>;</span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">String</span>(str);</span><br><span class="line">temp.substring(<span class="number">2</span>);</span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<p>经过这样子的处理之后基本类型变得和对象一样了。其它的 <em>Number</em>、 <em>Boolean</em> 同样适用。基本包装类型的<strong>生命周期</strong>，当调用对象的方法时，就会自动创建一个相应的引用实例，然后执行结束后又会马上销毁的。这也就意为不能为基本类型去添加属性。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"xq"</span>;</span><br><span class="line">str.color = <span class="string">"red"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.color); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"xq"</span>;</span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="built_in">String</span>(str);</span><br><span class="line">temp.color = <span class="string">'red'</span>;</span><br><span class="line">temp = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.color); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>类型检测</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"String"</span>;</span><br><span class="line"><span class="keyword">var</span> object = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"String"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str); <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> object); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(str <span class="keyword">instanceof</span> <span class="built_in">String</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(object <span class="keyword">instanceof</span> <span class="built_in">String</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>手动创建一个基本包装类类型为 <em>object</em> 。不推荐这么去做，会傻傻分不清楚。搞清楚了基本包装类那么来看一下基本包装类底下的常用方法有哪些。</p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>chaAt(n)</td>
<td>返回指定索引位置的字符</td>
</tr>
<tr>
<td>charCodeAt(n)</td>
<td>以Unicode编码形式返回指定索引位置的字符</td>
</tr>
<tr>
<td>fromCharCode(ascii)</td>
<td>返回ASCII对应的字符</td>
</tr>
<tr>
<td>indexOf(str, index)</td>
<td>从左往右查找字符str是否在字符串中,找到返回索引,找不到返回-1</td>
</tr>
<tr>
<td>lastIndexOf(str, index)</td>
<td>从右往左查找字符str是否在字符串中,找到返回索引,找不到返回-1</td>
</tr>
<tr>
<td>substring(n,m)</td>
<td>返回区间[n,m]之间的字符串,不包括m索引位</td>
</tr>
<tr>
<td>slice(n,m)</td>
<td>返回区间[n,m]之间的字符串,不包括m索引位</td>
</tr>
<tr>
<td>substr(n,m)</td>
<td>返回n索引之后的m个字符</td>
</tr>
<tr>
<td>toLowerCase()</td>
<td>全部转换成小写</td>
</tr>
<tr>
<td>toUpperCase()</td>
<td>全部转换成大写</td>
</tr>
<tr>
<td>split(pattern)</td>
<td>按照pattern匹配来切分原始字符串</td>
</tr>
<tr>
<td>repalce(str, repalceStr)</td>
<td>被用来在正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串。</td>
</tr>
<tr>
<td>trim()</td>
<td>从字符串的开始和结尾去除空格</td>
</tr>
<tr>
<td>trimLeft()</td>
<td>去除字符串左边空格</td>
</tr>
<tr>
<td>trimRight()</td>
<td>去除字符串右边空格</td>
</tr>
<tr>
<td>match(pattern)</td>
<td>使用正则表达式与字符串相比较。</td>
</tr>
</tbody>
</table>
<p><strong>新增语法</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>includes(str)</td>
<td>判断一个字符串里是否包含其他字符串</td>
</tr>
<tr>
<td>endsWith(search, index)</td>
<td>判断一个字符串的结尾是否包含其他字符串中的字符，可以调整位置</td>
</tr>
<tr>
<td>startsWith(search, index)</td>
<td>判断一个字符串的起始是否包含其他字符串中的字符，可以调整位置</td>
</tr>
<tr>
<td>repeat(n)</td>
<td>返回指定重复次数的由元素组成的字符串</td>
</tr>
</tbody>
</table>
<p><em>ps</em>：</p>
<ul>
<li>需要注意一下substring和slice 参数的<strong>正负</strong><ul>
<li>substring() <code>n,m</code> 如果小于0 就变成0。  <code>n&gt;m</code> ，<code>n,m</code> 交换位置</li>
<li>slice() <code>n,m</code> 如果小于0 就变成n/m+str.length。<code>n&gt;m</code> ，结果null</li>
</ul>
</li>
<li>substr 在IE传递负值会返回原始字符串</li>
<li>str[index]、charAt(index) 效果一样的 但是str[index] 在IE会返回undefined</li>
</ul>
<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><blockquote>
<p>属性</p>
</blockquote>
<table>
<thead>
<tr>
<th>属  性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>MAX_VALUE</td>
<td>表示最大数</td>
</tr>
<tr>
<td>MIN_VALUE</td>
<td>表示最小值</td>
</tr>
<tr>
<td>NaN</td>
<td>非数值</td>
</tr>
<tr>
<td>NEGATIVE_INFINITY</td>
<td>负无穷大，溢出返回该值</td>
</tr>
<tr>
<td>POSITIVE_INFINITY</td>
<td>无穷大，溢出返回该值</td>
</tr>
</tbody>
</table>
<blockquote>
<p>方法</p>
</blockquote>
<table>
<thead>
<tr>
<th>方  法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>toString()</td>
<td>将数值转化为字符串，并且可以转换进制</td>
</tr>
<tr>
<td>toFixed()</td>
<td>将数字保留小数点后指定位数并转化为字符串</td>
</tr>
<tr>
<td>toExponential(param)</td>
<td>将数字以指数形式表示，保留小数点后指定位数并转化为字符串</td>
</tr>
<tr>
<td>toPrecision(param)</td>
<td>指数形式或点形式表述数，保留小数点后面指定位数并转化为字符串</td>
</tr>
<tr>
<td>isNaN(param)</td>
<td>ES6 判断到底是不是NaN  区别isNaN方法</td>
</tr>
<tr>
<td>toLocaleString(param)</td>
<td>返回一个字符串</td>
</tr>
</tbody>
</table>
<h2 id="pactice"><a href="#pactice" class="headerlink" title="pactice"></a>pactice</h2><p>这里挑几个有意思的练习一下，因为上述方法需要结合很多不同的内容场景使用。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomNumber</span>(<span class="params">start, end</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (end - start + <span class="number">1</span>) + start);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rgb</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomRgb</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'rgb('</span> + randomNumber(<span class="number">255</span>) + <span class="string">','</span> + randomNumber(<span class="number">255</span>) + <span class="string">','</span> + randomNumber(<span class="number">255</span>) + <span class="string">')'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hex</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomHex</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'#'</span> + <span class="built_in">Math</span>.random().toString(<span class="number">16</span>).substring(<span class="number">2</span>).substr(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomHex</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> color = <span class="string">'#'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        color += <span class="string">'0123456789abcdef'</span>[randomNumber(<span class="number">15</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重复</span></span><br><span class="line">str.repeat(n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'xq很帅,xq很帅,xq很帅'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceStr</span>(<span class="params">str, search, rep</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = str.slice();</span><br><span class="line">	<span class="keyword">while</span>(temp.includes(search))&#123;</span><br><span class="line">        temp = temp.replace(search, rep);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// while(temp.indexOf(search) != -1)&#123;</span></span><br><span class="line">    <span class="comment">//    temp = temp.replace(search, rep);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMinNum</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> max = <span class="built_in">Number</span>.MAX_VALUE;		<span class="comment">// 最大数</span></span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(max &gt; arr[i])&#123;</span><br><span class="line">      max = arr[i];</span><br><span class="line">      index = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// toLocaleString</span></span><br><span class="line"><span class="keyword">var</span> number = <span class="number">123456.12</span>；</span><br><span class="line"><span class="comment">// 逗号隔开</span></span><br><span class="line"><span class="built_in">console</span>.log(number.toLocaleString())；<span class="comment">// 123,456.123</span></span><br><span class="line"><span class="comment">// 中文</span></span><br><span class="line"><span class="built_in">console</span>.log(number.toLocaleString(<span class="string">'zh-Hans-CN-u-nu-hanidec'</span>))；</span><br><span class="line"><span class="comment">// 一二三,四五六.一二三</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 货币</span></span><br><span class="line"><span class="built_in">console</span>.log(number.toLocaleString(<span class="string">'en'</span>, &#123; <span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'USD'</span>&#125;));</span><br><span class="line"><span class="comment">// $ 123,456.12</span></span><br><span class="line"><span class="built_in">console</span>.log(number.toLocaleString(<span class="string">'en-IN'</span>, &#123; <span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'EUR'</span>&#125;));</span><br><span class="line"><span class="comment">// € 123,456.12</span></span><br><span class="line"><span class="built_in">console</span>.log(number.toLocaleString(<span class="string">'en-IN'</span>, &#123; <span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'CNY'</span>&#125;));</span><br><span class="line"><span class="comment">// ￥123,456.12</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[callBack]]></title>
      <url>/Javascript/javascript/callBack/</url>
      <content type="html"><![CDATA[<p><img src="/img/javascript/callBack.jpg" alt="callback"></p>
<blockquote>
<p>callBack的存在在javascript中随处可见在没有 <em>promise</em> 的年代各种流行的框架随处可见包括原生DOM事件，jQuery中通过callBack可以做很多很多事情。</p>
</blockquote>
<a id="more"></a>
<h2 id="callBack"><a href="#callBack" class="headerlink" title="callBack?"></a>callBack?</h2><p>首先看一下 google 与 百度 的释义</p>
<blockquote>
<p>A callback is a function that is passed as an argument to another function and is executed after its parent function has completed.</p>
<p>译：回调是一个函数，作为参数传递给另一个函数，并在其父函数完成后执行。</p>
<p>通过 <strong>函数指针</strong> 调用的函数。如果你把函数的 <strong>指针</strong>（地址）作为 <strong>参数传递</strong> 给另一个函数，当这个指针被用为调用它所指向的函数时，我们就说这是回调函数。回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由另外的一方调用的，用于对该事件或条件进行响应。</p>
</blockquote>
<p>看一下官方的说法之后并且对语言特性的理解，其实就很容易明白两句话中的一个点 <strong>参数传递</strong>。如果对c或者c++学习的人可能就明白下面百度的释义。毕竟 <em>javascript</em> 是 <em>c++</em> 开发出来的。</p>
<p>先来看例子</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#box"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// statement</span></span><br><span class="line">&#125;);</span><br><span class="line">obj.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// statement</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在 <em>javascript</em> 中很多地方都可以看到这样的执行方式。它们有一个名字叫做回调函数（callBack）。</p>
<h2 id="为什么出现callBack"><a href="#为什么出现callBack" class="headerlink" title="为什么出现callBack"></a>为什么出现callBack</h2><p>首先说一下浏览器内部包含 <code>js解析引擎</code> <code>渲染引擎</code> <code>http请求</code> <code>event事件</code> <code>webAPI</code> ，常驻线程前三个。</p>
<p>js开始设计的时候是一个单线程的，这就省了很多复杂的操作比如线程间的通信，所以浏览器在处理js代码的时候需要一件件去做，产生列队（<em>这里不讨论浏览器怎么去处理事件列队的</em>）。经常见到的场景就是用户发起一个请求，等到资源加载完毕执行一些用户的操作，请求的过程大多是一个异步的过程，试想一下如果在发起请求的时候浏览器把当前页面锁住了，是不是很蛋疼？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步请求 success执行 statement语句</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// statement</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>也就是说有两个任务A、B在执行的时候需要先执行A等到一定的结果之后在去执行B的时候就必须使用这样的方式</p>
<p><em>example</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</span><br><span class="line">    <span class="keyword">if</span>(expression)&#123;</span><br><span class="line">        B();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"world"</span>);</span><br><span class="line">&#125;</span><br><span class="line">A();</span><br></pre></td></tr></table></figure>
<p>那么问题来了如果A任务完成之后，我们的需求并不是执行B这个任务的时候想换成任务C是不是就需要在去添加一个C任务，等待我们去选择。如果这样子的话那真的要累死了。因为你永远不知道下一次变化是什么。打一个不恰当的比方就好比你女票突然生气但是很多男孩子基本都不知道怎么了，基本都是临场应变，如果是一个有经验的人可能有一些预备措施，看似好像这个男孩子很聪明，如果下次女孩子生气你没有预料到不就惨了。反映到程序上就是，开发者不需要管任务A执行完成，B任务是什么。</p>
<p><em>example</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">girl</span>(<span class="params">boy</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(expression)&#123;</span><br><span class="line">        （boy &amp;&amp; <span class="keyword">typeof</span> boy === <span class="string">'function'</span>）&amp;&amp; boy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">girl(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">// 想干嘛干嘛我都接住</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>讲函数做为参数传递是很多语言都具有的能力，js中函数也是一个数据类型所以理所应当可以传递只是区别与其它的数据类型的地方在于<strong>函数可以执行</strong></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote>
<p>事物都有两面性，当然有好处就有坏处。</p>
</blockquote>
<p><em>example</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a(<span class="function"><span class="keyword">function</span> (<span class="params">resultA</span>) </span>&#123;</span><br><span class="line">    b(resultA, <span class="function"><span class="keyword">function</span> (<span class="params">resultB</span>) </span>&#123;</span><br><span class="line">        c(resultB, <span class="function"><span class="keyword">function</span> (<span class="params">resultC</span>) </span>&#123;</span><br><span class="line">            d(resultC, <span class="function"><span class="keyword">function</span> (<span class="params">resultD</span>) </span>&#123;</span><br><span class="line">                e(resultD, <span class="function"><span class="keyword">function</span> (<span class="params">resultE</span>) </span>&#123;</span><br><span class="line">                    f(resultE, <span class="function"><span class="keyword">function</span> (<span class="params">resultF</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// 子子孙孙无穷尽也</span></span><br><span class="line">                    <span class="built_in">console</span>.log(resultF);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>现在有很多任务a、b、c、d、e、f……都要依赖上一个任务的结果做为执行的条件。那么就进入了一个无限去嵌套的过程，现在看似很轻松很容易读，但是加上一系列的逻辑判断之后，面目全非……。经过很多年的发展 <em>jQuery</em> 以及很多的框架都在努力去解决这个问题，于是 <em>promise</em> 诞生了。暂且不谈。只是想告诉大家回调虽好但是在使用的过程中也要注意避免出现这样的代码，首先不便阅读，在者就不易维护与修改。</p>
<p>回调的好处可以简单的总结一下了</p>
<ul>
<li>更加的灵活去处理需求</li>
<li>DOM事件处理监听</li>
<li>setTimeout与setInterval中调用得到结果并且返回，setTimeout延迟0的挂起作用</li>
<li>callBack是一个可以被执行一次或者多次，看情况例如Array中的迭代方法</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> function </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[scope]]></title>
      <url>/Javascript/javascript/scope/</url>
      <content type="html"><![CDATA[<p><img src="/img/javascript/scope.jpg" alt="scope"></p>
<a id="more"></a>
<blockquote>
<p>Javascript的执行环境（ <em>execution context</em> 执行上下文）依赖于浏览器，每一个变量，函数都会有自己的执行环境，在web浏览器中执行环境 <em>window</em> 对象。即全局创建的变量函数都做为 <em>window</em> 对象的属性和方法。需要强调的是 <em>function</em> 也是一个独立的执行环境。程序执行依次进入 <em>call stack</em> 进栈执行，执行到函数进入函数内部执行上下文，也就是进入执行环境会创建变量对象的作用域链（ <em>scope chain</em> ）按这种机制有序的访问所有的变量与函数。所以学习 <em>Javascript</em> 执行机制是非常必要的。</p>
</blockquote>
<h1 id="scope"><a href="#scope" class="headerlink" title="scope"></a>scope</h1><blockquote>
<p>我们习惯性的把script的大环境称之为全局，单独的函数，块级作用域称之为局部。所谓相对绝对都是依靠一个参照点。</p>
</blockquote>
<h2 id="hosit"><a href="#hosit" class="headerlink" title="hosit"></a>hosit</h2><p>首先来了解一下 <em>js</em> 在浏览器中执行所经过的两个阶段 <strong>词法分析</strong> 与 <strong>执行阶段</strong> 词法分析也可以想成其它语言的编译阶段。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">num += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line"><span class="comment">// 当浏览器的js解析引擎工作会把上述代码变成 比较简单</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line">num = <span class="number">10</span>;</span><br><span class="line">num = num + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure>
<p>再来看一个</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// js解析过程</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br><span class="line">num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure>
<p>这里有一个概念 <em>Hoist</em>（ 提升），词法分析阶段所有定义过程譬如定义变量，定义函数都会被提升到当前<code>context</code> 的<strong>顶端</strong>，在执行阶段在依次执行譬如赋值、运算、函数调用。但是函数是一个独立的作用域进入函数的 <code>context</code> 依然是进行这两个阶段。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo); 	<span class="comment">// foo</span></span><br><span class="line"><span class="built_in">console</span>.log(fn); 	<span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="number">1</span>) &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;；</span><br><span class="line"></span><br><span class="line"><span class="comment">//  js解析过程</span></span><br><span class="line"><span class="comment">// 词法分析</span></span><br><span class="line"><span class="keyword">var</span> num;</span><br><span class="line"><span class="keyword">var</span> fn;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line">num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="built_in">console</span>.log(fn);</span><br><span class="line">fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="number">1</span>) &#125;;</span><br></pre></td></tr></table></figure>
<p>需要注意的是函数的定义方式与表达式的写法在运行的过程中是不一样的。定义变量初始化赋值是两个过程。否则在调用的过程中可能会出现错误。</p>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p><code>let</code> 不存在 <em>hosit</em> 现象更好的规避了可能出现访问失败的问题，更好按照一种逻辑去执行。在这里提一下</p>
<h2 id="scope-chain"><a href="#scope-chain" class="headerlink" title="scope chain"></a>scope chain</h2><blockquote>
<p>作用域链。执行环境的不同，所以当程序访问不同的变量与函数需要一定的规则去辨别</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg1</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(num);</span><br><span class="line">   num = num + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>
<p><img src="/img/javascript/scope1.png" alt="scope"></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg2</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(num);</span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">   <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="comment">//  js解析过程</span></span><br><span class="line"><span class="comment">// 词法分析</span></span><br><span class="line"><span class="keyword">var</span> num；</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line">num = <span class="number">10</span>;</span><br><span class="line">fn();</span><br><span class="line"><span class="comment">// fn context 词法分析</span></span><br><span class="line">fn()&#123;</span><br><span class="line">  <span class="keyword">var</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行</span></span><br></pre></td></tr></table></figure>
<p><img src="/img/javascript/scope2.png" alt="scope"></p>
<p>上边两个情况做一个简单的对比 <code>eg1</code> fn内部可以访问到外部的 <code>num</code> 变量顺着作用域链，<code>eg2</code> fn内部同样可以访问到外部的 <code>num</code> 但是结果不同，试想一下如果外部与自己具有相同变量名称时，就会出现一个访问顺序的问题，当fn在搜索 <code>num</code> 这个变量时当前自己的 <em>scope</em> 不存在就会沿着 <em>chain</em> 去继续往上一级 <em>scope</em> 寻找，如果自己有就不会在顺着 <em>chain</em> 查找。</p>
<p>可能有人开始有这样的想法。那如果我想外部访问到函数内部的变量呢？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line">   <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);     <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(fn(num)); <span class="comment">// 20 可以通过return返回 这个并没有延长作用域链 return num同样也会去沿着作用域链去去查找 fn中的num生命周期会随着函数的结束而消失 js中垃圾回收</span></span><br></pre></td></tr></table></figure>
<h2 id="block-scope"><a href="#block-scope" class="headerlink" title="block scope"></a>block scope</h2><p>js中之前没有明确的块级作用域</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);     <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> block1 = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);   <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(block1); <span class="comment">// not defined</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> block2 = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(block2); <span class="comment">// not defined</span></span><br></pre></td></tr></table></figure>
<p><code>let</code> <code>const</code> 会把被大括号限制范围，也就是说外界无法通过大括号访问内部的用<code>let</code> <code>const</code>声明的变量。</p>
<p><strong>特殊的</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fn(); <span class="comment">//  TypeError: a is not a function</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>) &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>) &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><em>if</em> 会将函数定义转变为表达式去处理</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn;</span><br><span class="line">fn();</span><br><span class="line"><span class="keyword">if</span>()...else...</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[function]]></title>
      <url>/Javascript/javascript/function/</url>
      <content type="html"><![CDATA[<p><img src="/img/javascript/function.jpg" alt="func"></p>
<a id="more"></a>
<h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><blockquote>
<p>javascript中的函数被称为一等公民（<em>First-class object</em>）。函数是一种数据类型、可以当作构造函数、可以当作参数传递、可以赋值成为变量、可以添加属性、可以当作对象、可以当作返回值、可以存储、更加可以去执行。</p>
</blockquote>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>函数的定义分为三种</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义式 -- 有名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnName</span>(<span class="params">arg1, arg2, ..., args</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// statement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 表达式 -- 匿名</span></span><br><span class="line"><span class="keyword">var</span> fnName = <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2, ..., args</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// statement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. new 关键字实例化创建对象 -- 很少用 </span></span><br><span class="line"><span class="keyword">var</span> fnName = <span class="keyword">new</span> <span class="built_in">Function</span>(statement);</span><br></pre></td></tr></table></figure>
<p>通过 <code>()</code> 运算符执行调用函数运行</p>
<h2 id="函数理解"><a href="#函数理解" class="headerlink" title="函数理解"></a>函数理解</h2><p>刚刚接触函数个人觉得需要认识到几个点</p>
<ul>
<li>函数是一种特殊的数据类型</li>
<li>函数是一个独立的作用域</li>
<li>函数可以单独执行或者返回具体的结果</li>
<li>函数是单纯的个体</li>
</ul>
<p>分别来看一下，第一条不解释了</p>
<p>独立作用域</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// foo 中的a在函数外部是访问不到的 前提是通过了var let const 定义的变量</span></span><br><span class="line">  <span class="comment">// a相对于script是一个局部的变量 相对于foo是一个全局 理解全局局部的同时希望加上参考范围 不要混淆</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>
<p>单独执行、返回结果</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  同样都可以返回3 但是前者单纯的去执行 后者将结果返回并且赋值给变量result供其它去使用</span></span><br><span class="line"><span class="comment">  也就是说函数可以有返回值也可以没有返回值 javascript中函数默认返回undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p><strong>单纯</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所谓的单纯 不会过度的依赖一些变化 导致修改的时候会让复杂度不断提高</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> minAge = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> check = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> age &gt; mixAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> checkAge = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> minAge = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">return</span> age &gt; minAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  前者会依赖minAge影响最终的结果， 换句话说取决于另外一个程序状态</span></span><br><span class="line"><span class="comment">  后者因为minAge状态不会改变，结果不会受其它程序状态的影响</span></span><br><span class="line"><span class="comment">  有的时候我们可能为了复用一段代码而去封装成一个函数，但是还是多思考一下</span></span><br><span class="line"><span class="comment">  因为当你有一天去修改的时候可能已经对内在的复杂度……懂得吧</span></span><br><span class="line"><span class="comment">  所以尽可能做为一种功能去使用函数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="参数的理解"><a href="#参数的理解" class="headerlink" title="参数的理解"></a>参数的理解</h2><blockquote>
<p>函数中可以传递参数，javascript中传递参数不用去在乎是什么数据类型</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  函数定义所写的参数称之为形式参数</span></span><br><span class="line"><span class="comment">  调用时传递的参数称之为实际参数</span></span><br><span class="line"><span class="comment">  1. 形参个数 &gt; 实参个数 少的undefined代替</span></span><br><span class="line"><span class="comment">  2. 实参个数 &gt; 形参个数 多的忽略</span></span><br><span class="line"><span class="comment">  3. 不定参arguments 用于接受传递的所有参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>（<span class="title">a</span>, <span class="title">b</span>）</span>&#123;&#125;</span><br><span class="line">fn(<span class="number">1</span>); <span class="comment">// 少写的b被undefined代替 如果有运算就会出问题</span></span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 多写的3 会被忽略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(args);</span><br><span class="line">  <span class="built_in">console</span>.log(args.length == foo.length);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 打印1, 2  打印false</span></span><br></pre></td></tr></table></figure>
<p>foo.length 返回函数的形式参数的个数也就是定义的时候有多少参数。可以通过这个性质进行判断参数列表是否对应</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(foo.length == <span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">    <span class="comment">// statement1</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// statement2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo.length 可能为 arguments.callee （返回当前函数 可以想成就近原则）</span></span><br><span class="line"><span class="comment">// arguments.callee 是一个避免函数引用错误的一个很好的做法 但是在'use strict'下callee是禁止使用的</span></span><br></pre></td></tr></table></figure>
<p>在JavaScript中没有函数重载的概念，但是可以通过参数列表 <code>arguments</code> 来模拟重载效果，仅仅是类似的效果</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">if</span>(args.length === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> args[<span class="number">0</span>];</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(args.length === <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> args[<span class="number">0</span>] + args[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[控制语句]]></title>
      <url>/Javascript/javascript/Controlling%20Execution/</url>
      <content type="html"><![CDATA[<p><img src="/img/javascript/Control.jpg" alt="control"></p>
<a id="more"></a>
<h1 id="Controlling-Execution"><a href="#Controlling-Execution" class="headerlink" title="Controlling Execution"></a>Controlling Execution</h1><blockquote>
<p>所有生物都会去控制自己的行为。程序也必须在执行的过程中控制它的过程。程序在执行的时候要么在顺序执行要么跳转。因此选择合适的控制语句来帮助程序做出正确的判断。控制语句包含了 <strong>判断</strong> 、<strong>循环遍历</strong> 一系列简单的命令。</p>
</blockquote>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p> 在逻辑运算中已经使用到了 <em>if</em> 语句</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  if( boolean ) statement1 else statement2</span></span><br><span class="line"><span class="comment">  大括号可以省略不写 看情况</span></span><br><span class="line"><span class="comment">  boolean的含义不仅仅是简单的true or false </span></span><br><span class="line"><span class="comment">  false 0 NaN undefined null 空字符"" 在判断中都代表假</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">10</span> &gt; <span class="number">5</span>)</span><br><span class="line">  alert(<span class="string">"max:"</span> + <span class="number">10</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  alert(<span class="string">"min:"</span> + <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(condition1)</span><br><span class="line">  <span class="comment">// statement1</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(condition2)</span><br><span class="line">  <span class="comment">// statement2</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="comment">// statement3</span></span><br></pre></td></tr></table></figure>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p><em>switch</em> 与 <em>if</em> 有点相似</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	注意点：</span></span><br><span class="line"><span class="comment">		1. 每一条case加break，除非是要合并结果可以不加</span></span><br><span class="line"><span class="comment">		2. value不会发生隐式转换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">  <span class="keyword">case</span> value1:</span><br><span class="line">   	statement1</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> value2:</span><br><span class="line">   	statement2</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> value3:</span><br><span class="line">   	statement3</span><br><span class="line">  <span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><blockquote>
<p>所谓循环就是多次重复执行某些类似的操作。这个操作一般不是完全一样的操作，而是类似的操作。</p>
</blockquote>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>（<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++）&#123;</span><br><span class="line">  <span class="comment">// statement</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>（; i &lt; <span class="number">3</span>; i++）&#123;</span><br><span class="line">  <span class="comment">// statement</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">  <span class="comment">// statement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(; i &lt; <span class="number">3</span>; i+=<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// statement</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(; i &lt; <span class="number">3</span>; )&#123;</span><br><span class="line">  i+=<span class="number">1</span></span><br><span class="line">  <span class="comment">// statement</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 和上一种有区别</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">  <span class="comment">// statement 死循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在循环体外 访问console.log(i) 是可以找到的</span></span><br></pre></td></tr></table></figure>
<p>循环的写法有很多种，同样可以省略大括号。大家对循环的认识可能只是简单的遍历某一个内容，其实循环的使用是很广泛的是一类问题处理的总结。需要细细的去体会</p>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><blockquote>
<p>while是循环的一种变体</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  while(expression)&#123;</span></span><br><span class="line"><span class="comment">    // statement</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  expression 条件为假终止循环体 条件为假的情况在if中已经提到</span></span><br><span class="line"><span class="comment">  类似的场景下 满足while的这个特性都可以使用while循环</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">3</span>)&#123;</span><br><span class="line">  <span class="comment">// statement</span></span><br><span class="line">  i++; <span class="comment">// i+=1;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h3><blockquote>
<p>后测试语句，优先执行statement语句后进行判断</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  <span class="comment">// statement</span></span><br><span class="line">&#125;<span class="keyword">while</span>(expression);</span><br><span class="line"><span class="comment">// 至少会执行一次statement 如果有这种情况使用do...while的情况会比较多</span></span><br></pre></td></tr></table></figure>
<h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><blockquote>
<p>用于枚举对象属性、数组每一项</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 或者是数组 虽然不推荐用来迭代数组但是有效果 这个后面再看</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  <span class="comment">// statement  k 属性</span></span><br><span class="line">  <span class="built_in">console</span>.log(k +<span class="string">'---'</span>+ obj[k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for in 可以结合if语句使用 让一个语句更加清晰 只是这种写法并没有被ECMA视为规范</span></span><br><span class="line"><span class="comment">// 但是在平时的书写中还是可以让程序很清晰 便于阅读</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> arr) <span class="keyword">if</span>(k &gt; <span class="number">1</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[k]); <span class="comment">// 2, 3, 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h3><blockquote>
<p>可迭代对象（泛指）IE对此迭代不兼容</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="comment">//statements</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterable = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> value <span class="keyword">of</span> iterable)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value); <span class="comment">// 1, 2, 3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同样 for of也可以结合if</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> value <span class="keyword">of</span> iterable) <span class="keyword">if</span> (value &gt; <span class="number">1</span>) <span class="built_in">console</span>.log(value);</span><br></pre></td></tr></table></figure>
<h2 id="break-amp-continue"><a href="#break-amp-continue" class="headerlink" title="break &amp; continue"></a>break &amp; continue</h2><p>break 用于终止当前循环，并且跳出整个循环体</p>
<p>continue 用于结束当前语句，继续执行下一次循环迭代。</p>
<p>都是可选语句。</p>
<h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>虽然循环看起来只是重复执行一些类似的操作而已，但它其实是计算机程序解决问题的一种基本思维方式，计算机程序可以发挥出强大的能力，重复的工作都可以使用这种思想去解决，或者同一类相似的任务。更加应该明白的是for循环的执行过程以及与控制语句<code>break</code> <code>contiune</code> 的结合。</p>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[操作符]]></title>
      <url>/Javascript/javascript/Operators/</url>
      <content type="html"><![CDATA[<p><img src="/img/javascript/Operators.jpg" alt="操作符"></p>
<a id="more"></a>
<h1 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h1><blockquote>
<p>javascript中的操作符 算术运算符 赋值运算符 关系运算符 逻辑运算符 位运算符 逗号运算符</p>
</blockquote>
<p>这里我们着重看一下关系运算符 逻辑运算符 位运算符 逗号运算符</p>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>js的关系操作符需要 <strong>注意</strong> 几个点 </p>
<p>如果比较的是数值, 则执行数值比较</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"10"</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">11</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str &lt; num); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"100"</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str &gt; num); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>如果比较的是两个字符, 则比较两个字符对应的编码ASCII值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"100"</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="string">"2"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str &gt; num); <span class="comment">// false 比较第一位 如果相等比较第二位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">"mike"</span> &lt; <span class="string">"haha"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); 	<span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>如果比较的是布尔值, 则先将其转换为数值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> boolean = <span class="literal">true</span>; 	<span class="comment">// Number(true) 为 1</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(boolean &lt; num); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>来看几个特殊的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"x"</span> &lt; <span class="number">10</span>; 			<span class="comment">// false</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="literal">undefined</span> == <span class="literal">null</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="literal">undefined</span> === <span class="literal">null</span>;<span class="comment">// false</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="literal">null</span> == <span class="number">0</span>;			<span class="comment">// false</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="literal">null</span> &gt;= <span class="number">0</span>; 		<span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="literal">NaN</span> == <span class="literal">NaN</span>; 		<span class="comment">// false</span></span><br><span class="line"><span class="keyword">var</span> result = [] == ![]; 		<span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>“x”字符不能被合理的转化成数字即Number(“x”) = NaN, 然而NaN和任何操作数比较都返回false, 毕竟NaN == NaN都返回false, 我连我自己都不认识</p>
<p>undefined与null, 两个都表示<strong>无</strong>, 转成数值undefined为NaN, null为0 当进行两个等号判断返回true, 三个等号返回false, 但是在某些特定情况下, 例如定义变量未初始化, 对象扩展属性未赋值, 函数默认返回undefined在这些情况下null是无法替代的, 因为null会被转换成0可能造成运算错误.这个特性记住就好了.</p>
<p>null与0直接判断==操作时返回false, 惊不惊喜意不意外, null的数据类型是object, <strong>如果比较的是对象, 则调用valueOf()方法或者toLocaleString()方法返回的结果去比较</strong>, 但是null很特殊没有这些方法, null做为原型链的尽头,所以null == 0不会做特殊处理 返回false. null &gt;= 0比较时这个问题在ECMA规定中&gt;,=存在运算优先级的问题被分为了两部分,需要注意的是并不是&gt;和=判断的结合,这里只是当 null &gt;= 0判断是会转换成Number(null) &gt;= 0, 记住就好.</p>
<p>在关系判断中会存在很多的数据类型的转化, 抓住本质才好哟. 这个稍后再看</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><code>&amp;&amp;</code> and <code>||</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="number">10</span>&lt; num &lt; <span class="number">19</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1  因为 10 &lt; 20 &lt; 19 是依次从左向右执行 true &lt; 19 true被转换成1 &lt; 19 返回true 打印1 这也就是为什么必须要有 &amp;&amp; 操作符 应当改写成 num &gt; 10 &amp;&amp; num &lt; 19</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里就不得不提到 三目运算符 条件 ? 语句1 : 语句2</span></span><br><span class="line"><span class="keyword">var</span> max = (num1 &gt; num2) ? num1 : num2;</span><br></pre></td></tr></table></figure>
<p>并且操作符其它用法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line">(<span class="number">2</span>&gt;<span class="number">1</span>) &amp;&amp; fn(); 		<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span> &amp;&amp; <span class="number">5</span>;  <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// &amp;&amp; 碰到假才停止 只要前后表达式都是真就一直向后运算 那么|| 与之相反 碰到真就停止 也就是常说的惰性赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span> || <span class="number">1</span>; 	<span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>当一个表达式中并且, 或者同时出现, 并且优先级高于或者 适当的添加括号去进行合理的判断</p>
<h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>, b = <span class="number">20</span>, c = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">var</span> num = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> arr = ([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> y = (x++,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>逗号操作符可以用来声明多个变量，用于赋值的时候总是返回表达式最后一项。利用好这个特性可以很方便我们简化代码。</p>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><blockquote>
<p>一个字节的大小 8个二进制位, 有符号的整数占4个字节 32个二进制位, 其中31位用于表示整数的值, 最高位为符号位</p>
</blockquote>
<p>在学习位运算符首先我们需要清楚计算机存储数字的是怎么样的表现形式. </p>
<p>位运算符包括 右移(&gt;&gt;)、 左移(&lt;&lt;)、 无符号右移(&gt;&gt;&gt;)、 按位或(|)、 按位与(&amp;)、 按位异或(^)、按位非(~)</p>
<ul>
<li><p>右移、左移</p>
<p>​                <img src="/img/javascript/Binary.png" alt="binary"></p>
<p>​    <img src="/img/javascript/Binary01.png" alt="binary"> <img src="/img/javascript/Binary02.png" alt="binary"></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span> &lt;&lt; <span class="number">1</span>); 	<span class="comment">// 16   10000 = 2^4*1 + 2^3*0 + 2^2*0 + 2^1*0 + 2^0*0 = 16</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span> &gt;&gt; <span class="number">2</span>); 	<span class="comment">// 2  	00010 = 2^1*1 + 2^0*0</span></span><br></pre></td></tr></table></figure>
<p>简单记左移乘以2, 右移除以2, 无符号右移和右移的区别. 对于正数没有什么区别, 因为每次移动都会在最高位补符号位, 负数是正数的二进制补码直接右移之后会被当成正数的二进制, 会产生很大的误差.</p>
<ul>
<li><p>按位与、按位或</p>
<p>​        <img src="/img/javascript/Binary03.png" alt="binary"> <img src="/img/javascript/Binary04.png" alt="binary"></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> &amp; <span class="number">15</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> | <span class="number">15</span>); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure>
<p>原理和逻辑运算符中一致，&amp;运算同1返回1， |运算同0返回0， 在哪里使用？其实当我们想要返回一个数字的有效位就要用到&amp;运算了，可以尝试写一个进制转换的函数。运用一下, 另外在对一个数字取整时可以使用位或0</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">6.19</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="number">6.19</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">6.19</span> | <span class="number">0</span>); <span class="comment">// 6  因为二进制是没有小数的</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>按位异或</li>
</ul>
<p><img src="/img/javascript/Binary05.png" alt="binary"></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> ^ <span class="number">7</span>); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure>
<p>看图不做解释了， 这里说一下按位异或的用法。当对一个数字连续位异或同一个数字的时候会返回原来的数字也就是说, 可以用来交换两个变量的值，或者toggle一个变量，或者检测两个数正负是否一致</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> ^ <span class="number">7</span> ^ <span class="number">7</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">a ^= b;</span><br><span class="line">b ^= b; <span class="comment">// a ^ b ^ b = a</span></span><br><span class="line">a ^= b; <span class="comment">// a ^ a ^ b = b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toggle变量</span></span><br><span class="line"><span class="keyword">if</span> (x === a) &#123;</span><br><span class="line">  x = b</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x === b) &#123;</span><br><span class="line">  x = a</span><br><span class="line">&#125;</span><br><span class="line">x = a ^ b ^ x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测正负</span></span><br><span class="line"><span class="keyword">if</span> ((x ^ y) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高效判断符号是否相同</span></span><br><span class="line"><span class="built_in">console</span>.log((a ^ b) &gt;= <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>按位非</li>
</ul>
<p>把二进制的每一位取反就是 <code>~</code> ,一个整数的负数逐位取反加一. 这里就不介绍二进制补码的运算原理了可以自行查阅资料.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">8</span>;</span><br><span class="line"><span class="built_in">console</span>.log(~num+<span class="number">1</span>); <span class="comment">// -8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取整一个整数</span></span><br><span class="line"><span class="built_in">console</span>.log(~~<span class="number">8.5</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8.5</span> | <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8.5</span> &gt;&gt; <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<h2 id="convert"><a href="#convert" class="headerlink" title="convert"></a>convert</h2><blockquote>
<p>数据类型与运算符之间还有一个问题就是类型之间的转换问题，特别是js中的隐式类型转换</p>
</blockquote>
<p><em>强制类型转换</em></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  字符数字,布尔值转数字类型</span></span><br><span class="line"><span class="comment">  Number parseInt parseFloat</span></span><br><span class="line"><span class="comment">  parseInt(num, radix)</span></span><br><span class="line"><span class="comment">  radix代表进制</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">"123"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"123.2"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"123.2"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">"123+"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">"123.1+"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>), <span class="built_in">parseInt</span>(<span class="literal">false</span>), <span class="built_in">parseFloat</span>(<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  其它数据类型转成字符串</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString());</span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(bool.toString());</span><br></pre></td></tr></table></figure>
<p><em>javascript</em> 中的算术运算符引起的一些问题</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> + <span class="string">"10"</span> + <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> + <span class="number">10</span> + <span class="string">"10"</span>);</span><br><span class="line"><span class="comment">// 两条语句会得到不同的答案 因为 “+” 在这个地方做为了拼接 虽然结果变成了string字符串 但是在过程中转换的地方不一样</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> * <span class="string">"10"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> / <span class="string">"10"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> % <span class="string">"10"</span>);</span><br><span class="line"><span class="comment">// 都没有出问题 “* / %” 发生了隐式转换</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> + +<span class="string">"10"</span> + <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> + <span class="number">1</span> + <span class="string">"1"</span>);</span><br><span class="line"><span class="comment">// 看似很不正常的一个语句 结果可能有点差异 其实很容易想明白 typeof +"10" 结果为number </span></span><br><span class="line"><span class="comment">// 所以上边其实可以写成 10 + (+"10") + 10 这里的加号有将字符数字隐式转换成了number 同理 “-” 也一样</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(([][[]]+[])[+!![]]+([]+&#123;&#125;)[!+[]+!![]]); <span class="comment">// 神奇的隐式转换 nb</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据类型]]></title>
      <url>/Javascript/javascript/dataType/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><blockquote>
<p>javascript中有6中数据类型String Number Boolean Object undefined function ES6新添加了一种原始数据类型Symbol</p>
</blockquote>
<h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>javascript中通过 <code>typeof</code> 检测一个数据类型，返回一个字符串</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"javascript"</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> nu = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str); 	<span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); 	<span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>); 	<span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">typeof</span> str);  <span class="comment">// string （返回的是一个字符串）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined 未定义数据类型</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="built_in">console</span>.log(foo); 			<span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="literal">undefined</span> = <span class="number">66</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span>); 	<span class="comment">// 66 undefined可以被定义成变量名 通常不会这么做容易产生歧义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> bar); 	<span class="comment">// object 返回object </span></span><br><span class="line"><span class="comment">// undefined是变量未初始化 null是一个空对象 但是undefined == null js在判断 "等值" 操作的时候会返回true 尽管有这样子的关系 但是它们两的使用差别很大</span></span><br></pre></td></tr></table></figure>
<p><code>ps</code> : typeof 并不是一个绝对安全的判断数据类型的方式 后边学习其它数据类型的准确方式。例如精确的判断数组、日期等等。</p>
<h2 id="var-与-let-const"><a href="#var-与-let-const" class="headerlink" title="var 与 let const"></a>var 与 let const</h2><p>js中声明变量使用 <code>var</code> 关键字,同样 <code>let</code> <code>const</code> 也可以用来声明变量</p>
<p>做一个简单的比较说明一下</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line"><span class="keyword">delete</span> b;</span><br><span class="line"><span class="built_in">console</span>.log(a); 	<span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); 	<span class="comment">// 报错 not defined</span></span><br></pre></td></tr></table></figure>
<p>声明变量如果不加 <code>var</code> 那么这个变量可以被delete删除 var相当于一个标记 毕竟声明在全局的变量相当于window.b = 20 可以通过delete删除对象属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); 	<span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b);		<span class="comment">// 报错 not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123; <span class="comment">//... &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(i); 	<span class="comment">// 3</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123; <span class="comment">// ... &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(j); 	<span class="comment">// 报错</span></span><br></pre></td></tr></table></figure>
<p><code>let</code> 关键字声明的变量只在所在的代码块生效 看大括号的范围 所以let很适合用在for循环, 在循环体外引用就会报错 最常见的遍历节点获取索引的操作 使用 <code>let</code> 的循环可以很轻松的获取到对应的索引</p>
<p><strong>变量提升</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); 	<span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(b); 	// 报错</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);		<span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<p><code>var</code> 声明的变量会发生变量提升 js在编译阶段会把变量进行提升 <code>let</code> 声明的变量不会出现 变量一定 “要被声明之后” 才可以被使用也很符合正常的使用 毕竟要先有女朋友才可以一起做羞羞的事情</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</span><br></pre></td></tr></table></figure>
<p><code>const</code> 声明一个只读的常量, 声明之后必须立即赋值, 区别与 <code>var</code> <code>let</code> 可以声明之后在赋值 const会报错, 同样const不会产生变量提升, 只在所在代码块生效</p>
<p>简单的介绍了一下js中数据类型其中很多地方例如 ( 在后边在补充 )</p>
<ul>
<li>为什么 <code>typeof</code> 不能准确的判断数据类型</li>
<li>变量提升</li>
<li>块级作用域</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[layout]]></title>
      <url>/layout/web/layout_2/</url>
      <content type="html"><![CDATA[<p><img src="http://img-cdn2.luoo.net/pics/vol/52c14db094079.jpg!/fwfh/640x452" alt="layout"></p>
<a id="more"></a>
<h1 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h1><blockquote>
<p>上一篇内容相信大家应该掌握了，了解css中的属性值及其特性，分析问题与需求选择合适的解决方案。这一节讨论一下规范。</p>
</blockquote>
<h2 id="HTML规范"><a href="#HTML规范" class="headerlink" title="HTML规范"></a>HTML规范</h2><p>html的书写相对来说想写错真的太难了但是同样我们需要一个规范。无论从团队配合还是约定内容都是必须要遵守的。</p>
<h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><ul>
<li><p>声明html5的doctype</p>
</li>
<li><p>所有的html代码都使用小写</p>
</li>
<li><p>页面编码采用gbk，在系统允许的前提下可以使用utf-8</p>
</li>
<li><p>页面内容lang=<code>zh-Hans-CN</code> 以前的zh-CN已经被废除，当然废除不代表不生效了。</p>
</li>
<li><p>在head中添加对页面相关人员团队的注释</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面设计：xxx | 页面制作：xxx | 团队博客：http://tgideas.qq.com/ --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>内容性质的图片必须加上alt属性，修饰性的图片可以不加，width与height值为原始大小</p>
</li>
<li><p>注释的写法 IE条件注释</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- [if IE]&gt;</span></span><br><span class="line"><span class="comment">这里只有ie浏览器才可以显示</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- [if !IE]&gt;</span></span><br><span class="line"><span class="comment">这里只有非ie浏览器才可以显示</span></span><br><span class="line"><span class="comment">&lt;! &lt;![endif]--&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--[if IE 6]&gt;</span></span><br><span class="line"><span class="comment">这里只有ie6浏览器才可以显示</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">这里只有ie9以下浏览器才可以显示</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--[if lte IE 8]&gt;</span></span><br><span class="line"><span class="comment">这里只有ie8以及ie8以下浏览器才可以显示</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>
<p>对注释中的空白区域用等号替换</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- header======header --&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对于需要转义的字符使用转义字符 <code>&amp;lt;</code> <code>&amp;gt;</code> 等等</p>
</li>
<li><p>单标签不要写 <code>/</code> 闭合，声明为html5页面会自动处理 img、br、hr、input</p>
</li>
<li><p>元素嵌套段落标签嵌套内联标签，块级标签嵌套内联标签</p>
</li>
<li><p>对标签的特性熟悉对应的内容使用怎样的标签，及对网页标签的合理应用</p>
</li>
</ul>
<h2 id="CSS规范"><a href="#CSS规范" class="headerlink" title="CSS规范"></a>CSS规范</h2><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul>
<li>ID 在页面中具有唯一性，也就是说以ID做为选择器来写css就无法重用，使用类名选择器定义样式，避免使用ID定义。</li>
</ul>
<h3 id="以字母开头"><a href="#以字母开头" class="headerlink" title="以字母开头"></a>以字母开头</h3><ul>
<li>不允许单个字母的类选择器出现，单词名字使用有意义的名字，结构化的名字与作用相关的名字</li>
<li>不允许命名带有广告等英文的单词，例如ad,adv,adver,advertising，已防止该模块被浏览器当成垃圾广告过滤掉。</li>
<li>全部小写，使用 <code>-</code> 连接多个单词的class，不要使用下划线，禁止使用驼峰</li>
</ul>
<h3 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h3><ul>
<li><p>基本样式 <code>base.css</code></p>
</li>
<li><p>全局样式 <code>global.css</code></p>
</li>
<li><p>布局样式 <code>layout.css</code></p>
</li>
<li><p>字体样式 <code>font.css</code></p>
<p>​</p>
</li>
</ul>
<h3 id="常用名"><a href="#常用名" class="headerlink" title="常用名"></a>常用名</h3><p>整页<code>.wrap</code> 页眉<code>.header</code> 页脚 <code>.footer</code> 导航 <code>.nav</code> 主体内容 <code>.main</code>  侧边栏<code>.side</code>  标志 <code>.logo</code> 搜索 <code>.search</code> 登录 <code>.login</code>  注册 <code>.reg</code> 标题 <code>.tit</code> 按钮<code>.btn-</code>  背景图片 <code>.bg-</code>  列表 <code>.list-</code> 表格 <code>.tb-</code> 标签 <code>.tag-</code>  视频 <code>.video-</code> 联系 <code>.contact</code></p>
<h3 id="书写风格"><a href="#书写风格" class="headerlink" title="书写风格"></a>书写风格</h3><ul>
<li><p>单个css选择器或新申明开启新行</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>,</span><br><span class="line"><span class="selector-class">.header</span>,</span><br><span class="line"><span class="selector-class">.home</span>,</span><br><span class="line"><span class="selector-class">.nav</span>&#123; <span class="attribute">font-size</span>: <span class="number">12px</span>&#125;</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>内容属性顺序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/*  这些属性只是最常用到的, 并不代表全部 */</span><br><span class="line"></span><br><span class="line">/* 布局定位属性 */</span><br><span class="line">display / list-style / position / float / clear  / visibility / overflow</span><br><span class="line"></span><br><span class="line">/* 自身属性 */</span><br><span class="line">width / height / margin / padding / border / background</span><br><span class="line"></span><br><span class="line">/* 文本属性 */</span><br><span class="line">color / font / text-decoration / text-align / vertical-align / white- space / break-word</span><br><span class="line"></span><br><span class="line">/* 其他（CSS3）  */</span><br><span class="line">content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>属性时候换行随意个人习惯，最后都要被压缩，写一个属性后边冒号空一格 width: 100px</p>
</li>
<li><p>尽可能利用css控制交互视觉变换JS操作的只需要添加删除类名</p>
</li>
<li><p>注释</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/*=====头部=====*/</span><br><span class="line">.header &#123;background-color: #333;height: 100px;&#125;</span><br><span class="line">/*=====头部结束=====*/</span><br></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>这几天的练习抓住几个点</p>
<ul>
<li>布局看高度颜色，间距看文字距离。</li>
<li>类名组合写法</li>
<li>一个页面不要很多的父级元素 虽然说会产生一些代码嵌套 但是总的来说结构会比较清晰</li>
<li>类名组合使用</li>
<li>结构是结构 样式是样式</li>
<li>有时候可能会改变标签书写顺序，导致增加一些标签。考虑到以后可能的改变利大于弊</li>
<li>最后一定要细心 出了问题 别着急了 重新打开一个备份 标签是否闭合 可能会导致浏览器解析的时候出错</li>
<li>掌握每个css属性的特性，特性使然</li>
</ul>
<p>讲道理其实就是一个慢工出细活，如果这点耐心都没有是不行的哦。么么哒~</p>
]]></content>
      
        <categories>
            
            <category> layout </category>
            
        </categories>
        
        
        <tags>
            
            <tag> layout </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[layout]]></title>
      <url>/layout/web/layout_1/</url>
      <content type="html"><![CDATA[<p><img src="https://wallpapers.wallhaven.cc/wallpapers/full/wallhaven-375080.jpg" alt="layout"></p>
<a id="more"></a>
<h2 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h2><blockquote>
<p>布局是UI设计师将有限的视觉元素进行有机的排列组合。将理性的思维个性化的表现出来是一种具有个人风格和艺术特色的视觉传达方式。</p>
</blockquote>
<p>分栏又称为分列，常见的布局有一列、两列、三列、<strong>混合布局</strong>。我们需要通过css中的浮动定位完成UI设计中的布局要求，所以前端工程师就是将艺术与技术完美融合的岗位。</p>
<h2 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h2><h3 id="一列布局"><a href="#一列布局" class="headerlink" title="一列布局"></a>一列布局</h3><p>单页的应用没有太多的内容，文字内容较少。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.header</span>&#123;<span class="attribute">height</span>: <span class="number">80px</span>;<span class="attribute">background</span>: <span class="number">#ddd</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 主体main高度肯定是要靠内容去撑起来的实际中不用给 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.main</span>&#123;<span class="attribute">width</span>: <span class="number">800px</span>;<span class="attribute">height</span>: <span class="number">800px</span>;<span class="attribute">background</span>: <span class="number">#111</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.footer</span>&#123;<span class="attribute">height</span>: <span class="number">80px</span>;<span class="attribute">background</span>: <span class="number">#333</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="两列布局"><a href="#两列布局" class="headerlink" title="两列布局"></a>两列布局</h3><p>两列布局很常见，具体的可以通过浮动或flex</p>
<p><em>example 1</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="comment">/* 两列固定宽度 float */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;<span class="attribute">content</span>: <span class="string">''</span>;<span class="attribute">display</span>: table;<span class="attribute">clear</span>: both;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.wrap</span>&#123;<span class="attribute">width</span>: <span class="number">1000px</span>;<span class="attribute">margin-left</span>: auto;<span class="attribute">margin-right</span>: auto;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>&#123;<span class="attribute">float</span>: left;<span class="attribute">width</span>: <span class="number">300px</span>;<span class="attribute">background</span>: red;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span>&#123;<span class="attribute">float</span>: right;<span class="attribute">width</span>: <span class="number">700px</span>;<span class="attribute">background</span>: blue;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap clearfix"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>example 2</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="comment">/* 一列定 一列自适应 table */</span></span></span><br><span class="line"><span class="undefined">  /*   </span></span><br><span class="line"><span class="undefined">  	简单解释一下这个原理 table设定的容器内部的元素按照表格排列，并且每列单元格的宽度和一定等于总的宽度</span></span><br><span class="line"><span class="undefined">  	table-cell设定的元素不会超出父元素的宽度 一般给2000 当然如果你是4k屏幕分辨率高的惊人可以设置成9999</span></span><br><span class="line"><span class="undefined">  	另外table-cell设定后margin失效 需要间距设定padding</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="undefined">  	这里也可以不用外层的 如果需要居中则嵌套一层 </span></span><br><span class="line"><span class="undefined">  	table-layout: fixed 这个属性用来加速浏览器的渲染</span></span><br><span class="line"><span class="undefined">  */</span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>: table;<span class="attribute">table-layout</span>: fixed;<span class="attribute">width</span>: <span class="number">100%</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>&#123;<span class="attribute">float</span>: left;<span class="attribute">width</span>: <span class="number">400px</span>;<span class="attribute">height</span>: <span class="number">400px</span>;<span class="attribute">background</span>: red;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span>&#123;<span class="attribute">display</span>: table-cell;<span class="attribute">width</span>: <span class="number">2000px</span>;<span class="attribute">height</span>: <span class="number">400px</span>;<span class="attribute">background</span>: blue;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>example 3</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="comment">/* float + overflow 缺点溢出不可见 需要居中加一层 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>&#123;<span class="attribute">float</span>: left;<span class="attribute">width</span>: <span class="number">300px</span>;<span class="attribute">height</span>: <span class="number">400px</span>;<span class="attribute">background-color</span>: red;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span>&#123;<span class="attribute">overflow</span>: hidden;<span class="attribute">background-color</span>: blue;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span> <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">90px</span>;<span class="attribute">background-color</span>: yellow;<span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>example 4</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="comment">/* flex 除了兼容问题没毛病 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>: flex;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>&#123;<span class="attribute">width</span>: <span class="number">400px</span>;<span class="attribute">height</span>: <span class="number">400px</span>;<span class="attribute">background-color</span>: blue;<span class="attribute">flex</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">400px</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span>&#123;<span class="attribute">width</span>: <span class="number">2000px</span>;<span class="attribute">height</span>: <span class="number">400px</span>;<span class="attribute">background-color</span>: red;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="三列布局"><a href="#三列布局" class="headerlink" title="三列布局"></a>三列布局</h3><p>三列布局的一般为左右两边定宽 中间自适应 方法手段很多只是每一种html结构差异</p>
<p><em>example 1</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  /*</span></span><br><span class="line"><span class="undefined">  	两边定位 中间用margin定位 </span></span><br><span class="line"><span class="undefined">  	缺点：当父元素有margin的时候 中间的会被挤下去</span></span><br><span class="line"><span class="undefined">  */</span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>&#123;<span class="attribute">width</span>: <span class="number">300px</span>;<span class="attribute">height</span>: <span class="number">400px</span>;<span class="attribute">background-color</span>: red;<span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.middle</span>&#123;<span class="attribute">height</span>: <span class="number">400px</span>;<span class="attribute">background-color</span>: blue;<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">210px</span> <span class="number">0</span> <span class="number">310px</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">400px</span>;<span class="attribute">background-color</span>: black;<span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>example 2</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  /*</span></span><br><span class="line"><span class="undefined">  	两边浮动 中间margin定位 html结构产生了变化 </span></span><br><span class="line"><span class="undefined">  	缺点：两列和小于width之和右边会掉下去</span></span><br><span class="line"><span class="undefined">  */</span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>&#123;<span class="attribute">float</span>: left;<span class="attribute">width</span>: <span class="number">300px</span>;<span class="attribute">height</span>: <span class="number">400px</span>;<span class="attribute">background-color</span>: red;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span>&#123;<span class="attribute">float</span>: right;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">400px</span>;<span class="attribute">background-color</span>: black;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.middle</span>&#123;<span class="attribute">height</span>: <span class="number">400px</span>;<span class="attribute">background-color</span>: blue;<span class="attribute">margin</span>: <span class="number">0</span> <span class="number">210px</span> <span class="number">0</span> <span class="number">310px</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>example 3</em> </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  /*</span></span><br><span class="line"><span class="undefined">  	flex 布局 除了兼容问题</span></span><br><span class="line"><span class="undefined">  */</span></span><br><span class="line"><span class="css">  <span class="selector-class">.wrap</span>&#123;<span class="attribute">display</span>: flex;<span class="attribute">width</span>: <span class="number">1200px</span>;<span class="attribute">margin</span>: <span class="number">0</span> auto;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.left</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">300px</span>;<span class="attribute">background</span>: green;<span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.middle</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">background</span>: red;<span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.right</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">300px</span>;<span class="attribute">background</span>: yellow;<span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>example 4</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  /* </span></span><br><span class="line"><span class="undefined">  	圣杯布局 一个流传很久的布局 有兴趣自行查看</span></span><br><span class="line"><span class="undefined">  */</span></span><br><span class="line"><span class="css">  <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding-left</span>: 200<span class="selector-tag">px</span>;      <span class="comment">/* LC width */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding-right</span>: 150<span class="selector-tag">px</span>;     <span class="comment">/* RC width */</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="css">  <span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">    float: left;</span></span><br><span class="line"><span class="undefined">    padding-top: 1em;</span></span><br><span class="line"><span class="undefined">    text-align: justify;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#DDD</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-id">#left</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span>: 200<span class="selector-tag">px</span>;             <span class="comment">/* LC width */</span></span></span><br><span class="line"><span class="undefined">    height: 400px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">right</span>: 200<span class="selector-tag">px</span>;             <span class="comment">/* LC width */</span></span></span><br><span class="line"><span class="undefined">    margin-left: -100%;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#66F</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span>: 150<span class="selector-tag">px</span>;             <span class="comment">/* RC width */</span></span></span><br><span class="line"><span class="undefined">    height: 400px;</span></span><br><span class="line"><span class="undefined">    margin-right: -100%;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#F66</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-id">#footer</span> &#123;</span></span><br><span class="line"><span class="undefined">    clear: both;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>This is the header.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is the main content.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>center<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is the left sidebar.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is the right sidebar.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>footer.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><p>子元素在父元素中居中且宽度均可变</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* inline-block + text-align */</span></span><br><span class="line"><span class="selector-class">.outer</span>&#123;<span class="attribute">text-align</span>: center;&#125;</span><br><span class="line"><span class="selector-class">.inner</span>&#123;<span class="attribute">display</span>: inline-block;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  margin</span></span><br><span class="line"><span class="comment">  .inner&#123;margin-left: auto;margin-right: auto;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  flex</span></span><br><span class="line"><span class="comment">  .outer&#123;display: flex;justify-content: center;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  table + margin 兼容性最好</span></span><br><span class="line"><span class="comment">  .inner&#123;display: table;margin-left: auto;margin-right: auto;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  absolute + transform</span></span><br><span class="line"><span class="comment">  .outer&#123;position: relative;&#125;</span></span><br><span class="line"><span class="comment">  .inner&#123;position: absolute;left: 50%;transform: translateX(-50%);&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;<span class="attribute">display</span>: table-cell;<span class="attribute">vertical-align</span>: middle;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  absolute + transform</span></span><br><span class="line"><span class="comment">  .outer&#123;position: relative;&#125;</span></span><br><span class="line"><span class="comment">  .inner&#123;position: absolute;top: 50%;transform: translateY(-50%);&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  .outer&#123;display: flex;align-item: center;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h4 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;<span class="attribute">text-align</span>: center;<span class="attribute">display</span>: table-cell;<span class="attribute">vertical-align</span>: middle;&#125;</span><br><span class="line"><span class="selector-class">.inner</span> &#123;<span class="attribute">display</span>: inline-block;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  absolute + transform</span></span><br><span class="line"><span class="comment">  .outer&#123;position: relative;&#125;</span></span><br><span class="line"><span class="comment">  .inner&#123;position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  .outer&#123;position: relative&#125;</span></span><br><span class="line"><span class="comment">  .inner&#123;width: 100px;height: 100px;position: absolute;top: calc(50% - 50px);left: calc(50% - 50px);&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  flex</span></span><br><span class="line"><span class="comment">  .outer&#123;display: flex;justify-content: center;align-items: center;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><p>基础真的很重要，不能只关注深层的东西而忽略了它，很多时候我们都只关注这个新的技术，各种各样的框架组件。感叹的同时却还在原地踏步！挖掘简单事物背后的不简单，想信我们就真的进步了！</p>
<p>风起于青萍之末，浪成于微澜之间。生活多姿多彩等待你我去发现！么么哒~</p>
]]></content>
      
        <categories>
            
            <category> layout </category>
            
        </categories>
        
        
        <tags>
            
            <tag> layout </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[animation]]></title>
      <url>/Css3/web/animation/</url>
      <content type="html"><![CDATA[<p><img src="http://www.alonely.com.cn/d/file/Html-CSS/2016-09-27/git1csitzbk.jpg" alt="animation"></p>
<a id="more"></a>
<blockquote>
<p>CSS3的animation动画，结合transform元素可以被转换（translate）、旋转（rotate）、缩放（scale）、倾斜（skew），可以做出很多有趣的效果。</p>
</blockquote>
<h2 id="transform、transition"><a href="#transform、transition" class="headerlink" title="transform、transition"></a>transform、transition</h2><p>首先CSS3的 <strong>transform </strong>属性 , 只对 <strong>block </strong>级元素生效！<em>transform</em> 是 <em>CSS3</em> 中一个可以针对2D或3D的变化属性 。transform只能定义几何变化，不能改变颜色，背景，透明度等<strong>非几何</strong>变化。列举一些常用的变化属性。</p>
<ul>
<li>translate，translateX, translateY, translateZ</li>
<li>rotate, rotateX, rotateY, rotateZ</li>
<li>scale, scaleX, scaleY</li>
<li>skew, skewX, skewY</li>
</ul>
<p>指定了 <strong>transform</strong> 的元素会立即发生改变，需要配合 <strong>transition</strong> 一起来使用，用transition属性为transform变化指定属性、持续时间、运动曲线、 延迟时间。添加了必要的动画参数才是一个完整的动画，否则单独的transform不会有动画效果。</p>
<blockquote>
<p>transition: &lt; property &gt; &lt; duration &gt; &lt; timing-function &gt; &lt; delay &gt;;</p>
</blockquote>
<p><code>tip</code>：transition与transform不同的地方在于前者可以改变非几何属性，即transform无法变化的属性。</p>
<p><em>example1</em></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">background-color</span>: red;<span class="attribute">margin</span>: <span class="number">100px</span> auto;<span class="attribute">transition</span>: width <span class="number">2s</span>;&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>并且可以变化多个属性通过逗号分隔。</p>
<p><em>example2</em></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">background-color</span>: red;<span class="attribute">margin</span>: <span class="number">100px</span> auto;<span class="attribute">transition</span>: width <span class="number">2s</span>, height <span class="number">2s</span>, background <span class="number">2s</span>, opacity <span class="number">2s</span>, transform <span class="number">2s</span>;&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">background</span>: blue;<span class="attribute">opacity</span>: .<span class="number">3</span>;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(180deg) <span class="built_in">translateX</span>(100px);&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>提醒一下transform如果在别的浏览器不兼容记得加浏览器兼容的前缀！</p>
<p>-webkit-transform: rotate();</p>
<p>-moz-transform: rotate();</p>
<p>-ms-transform: rotate();</p>
<p>-o-transform: rotate();</p>
</blockquote>
<p><em>example3</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="undefined">  /*transition-property: background-color, color;</span></span><br><span class="line"><span class="undefined">  transition-duration: 1s;</span></span><br><span class="line"><span class="undefined">  transition-timing-function: ease-out;*/</span></span><br><span class="line"><span class="css">  <span class="comment">/* 可以一句话写完 */</span></span></span><br><span class="line"><span class="undefined">  transition: background-color, color, 1s ease-out;</span></span><br><span class="line"><span class="css">  <span class="comment">/* transition: all 1s ease-out; */</span></span></span><br><span class="line"><span class="undefined">  background-color: grey; </span></span><br><span class="line"><span class="undefined">  width: 60px;</span></span><br><span class="line"><span class="undefined">  height: 26px;</span></span><br><span class="line"><span class="undefined">  color: white;</span></span><br><span class="line"><span class="undefined">  font-size: 20px;</span></span><br><span class="line"><span class="undefined">  text-align: center;</span></span><br><span class="line"><span class="undefined">  box-shadow: 2px 2px 1px black;</span></span><br><span class="line"><span class="undefined">  padding: 2px 4px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>:<span class="selector-id">#AA7EF6</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">color</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="undefined">  box-shadow: 2px 2px 1px black;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Css3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>example4</em></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#heart</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">90px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">::before</span>, <span class="selector-id">#heart</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-45deg);</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);<span class="attribute">transform-origin </span>:<span class="number">100%</span> <span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-id">#heart</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">transform</span>: <span class="built_in">scale</span>(1.2);&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子看到了一个新的属性 <code>transform-origin</code> 可以用来控制元素的旋转基点。x轴、y轴两个方向，可以使用top、left、right、bottom、%来设定基点位置。除了百分数其它的四个都是位置。设定一个就是对应的边的中点</p>
<h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><blockquote>
<p>@keyframes关键祯 是专门用来做动画的，它可以指定具体到某一帧的状态是什么样子的，以整数百分比来指定帧数，再给定CSS属性，就组成了一组状态的变化。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> move&#123;</span><br><span class="line">  <span class="selector-tag">from</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;&#125; </span><br><span class="line">  <span class="selector-tag">to</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> move&#123;</span><br><span class="line">  0%&#123;<span class="attribute">width</span>: <span class="number">100px</span>;&#125;</span><br><span class="line">  50%&#123;<span class="attribute">width</span>: <span class="number">150px</span>;&#125;</span><br><span class="line">  100%&#123;<span class="attribute">width</span>: <span class="number">200px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样在不同的浏览器如果没有效果的记得加前缀</p>
<blockquote>
<p>@-webkit-keyframes</p>
<p>@-moz-keyframes</p>
<p>@-ms-keyframes</p>
<p>@-o-keyframes</p>
</blockquote>
<p><code>@keyframes</code> 是制作动画的过程，<code>animation</code> 就是一台放映机，规定动画的播放时间、速率、延迟、次数、反向轮播。</p>
<p><em>example1</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.view</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span><span class="selector-pseudo">:black</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">width</span><span class="selector-pseudo">:500px</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">height</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="undefined">  margin: 100px auto;</span></span><br><span class="line"><span class="undefined">  overflow: hidden;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.eye</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line"><span class="undefined">  height: 100%;</span></span><br><span class="line"><span class="undefined">  width: 25%;</span></span><br><span class="line"><span class="undefined">  background-color: red;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-image</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">rgba</span>( 0,0,0,0<span class="selector-class">.9</span> ) 25%, <span class="selector-tag">rgba</span>( 0,0,0,0<span class="selector-class">.1</span> ) 50%, <span class="selector-tag">rgba</span>( 0,0,0,0<span class="selector-class">.9</span> ) 75%);</span></span><br><span class="line"><span class="undefined">  animation: move 4s linear 0s infinite alternate;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="css">@<span class="keyword">keyframes</span> move &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">from</span> &#123;<span class="attribute">margin-left</span>:-<span class="number">20%</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">to</span> &#123;<span class="attribute">margin-left</span>:<span class="number">100%</span>;&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eye"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3D"><a href="#3D" class="headerlink" title="3D"></a>3D</h2><p>两个属性</p>
<ul>
<li>perspective: 800</li>
<li>transform-style: preserve-3d;</li>
</ul>
<p>景深的大小决定的是元素距离你的视距的长短</p>
<p><em>example</em>  翻书demo </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.list</span>&#123;<span class="attribute">width</span>: <span class="number">400px</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">background-color</span>: white;<span class="attribute">margin</span>: <span class="number">100px</span> auto;<span class="attribute">position</span>: relative;<span class="attribute">-webkit-perspective</span>: <span class="number">800</span>;<span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;<span class="attribute">transform</span>: <span class="built_in">rotateX</span>(30deg);&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.list</span> <span class="selector-tag">li</span>&#123;<span class="attribute">position</span>: absolute;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">195px</span>;<span class="attribute">top</span>: <span class="number">2px</span>;<span class="attribute">background</span>: white;<span class="attribute">left</span>: <span class="number">200px</span>; <span class="attribute">transform-origin</span>: left;<span class="attribute">text-align</span>: center;<span class="attribute">line-height</span>: <span class="number">195px</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.list</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span></span><br><span class="line"><span class="undefined">    animation: move 3s linear infinite;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.list</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">animation</span>: <span class="selector-tag">move</span> 3<span class="selector-tag">s</span> <span class="selector-tag">linear</span> 1<span class="selector-class">.5s</span> <span class="selector-tag">infinite</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  @<span class="keyword">keyframes</span> move&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">from</span>&#123; <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(0deg);&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">to</span>&#123; <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-180deg);&#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我爱你<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>么么哒<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Css3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css3 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[position]]></title>
      <url>/html-css/web/position/</url>
      <content type="html"><![CDATA[<p><img src="http://htm5.oss-cn-beijing.aliyuncs.com/175576/1511886634890.jpg" alt="position"></p>
<a id="more"></a>
<p><code>ps</code>：图片和内容无关只是觉得好看，找不到图了。。。</p>
<h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><blockquote>
<p>CSS中定位是布局中经常会用到的。需要大家对文档流有一定的了解。</p>
</blockquote>
<h2 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h2><ul>
<li>static，默认值。位置设置为static的元素，它始终会处于文档流给予的位置。</li>
<li>absolute，生成绝对定位的元素，<strong>相对于距该元素最近的已定位的祖先元素</strong>进行定位。此元素的位置可通过 “left”、”top”、”right” 以及 “bottom” 属性来规定。</li>
<li>relative，生成相对定位的元素，<strong>相对于该元素在文档中的初始位置进行定位</strong>。通过 “left”、”top”、”right” 以及 “bottom” 属性来设置此元素相对于自身位置的偏移。</li>
<li>fixed，生成绝对定位的元素。默认情况下，可定位于<strong>相对于浏览器窗口</strong>的指定坐标。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。不论窗口滚动与否，元素都会留在那个位置。</li>
<li>sticky, 粘性定位(relative+fixed)。在一定阈值下是 <code>relative</code> 超过了变成 <code>fixed</code> 。</li>
</ul>
<p><strong>不管是哪种定位，都必须有一个参照物。找对了参照物，就成功了一半。</strong></p>
<h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><p><em>relative</em> 给定的元素，会相对与原来的正常位置进行定位。使用top、left、right、bottom来偏移。 </p>
<p><code>tip</code>：相对定位的元素会保留原来的位置，并且relative的元素没有脱离文档流，毕竟还占据原来的位置。</p>
<h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><p><em>absolute</em> 给定的元素，与相对定位的元素最大的区别就是，这个元素将<strong>脱离文档流的束缚</strong>，其它的元素会认为这个元素不存在而去填充它原来的位置，绝对定位的元素会参照定位上下文（定位父级） 来移动自己的位置。如果没有设定定位父级默认就是body。</p>
<p>设定了定位父级按照最近的父级做为参照。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">style</span>=<span class="string">"position: relative"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span> <span class="attr">style</span>=<span class="string">"position: absolute"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span> <span class="attr">style</span>=<span class="string">"position: absolute"</span>&gt;</span></span><br><span class="line">      	box3的定位父级是最近的box2 不是box1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>over</em> 遮罩层 </p>
<blockquote>
<p>注意点：这里设定的宽度高度是根据window的窗口大小来的，并不是body和html的大小，因为body和html的默认的大小是根据内容来撑开的。通过iframe设定高度可以得到验证。设置z-index遮罩层的层级一定是最高的所以一般可能会看到一些网站的遮罩层会设定99或者999当然这要能让它显示在最上边就好了。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.over</span>&#123;<span class="attribute">position</span>: absolute;<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;<span class="attribute">z-index</span>: <span class="number">99</span>;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"over"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>多个元素设定absolute时候会发生重叠，与单个元素设定定位不一样（与relative一样，暂时保持当前位置，只是脱离了文档流的束缚）。一些特定的场景需要设定absolute，比如二级菜单，banner等等。</p>
<h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><p><em>fixed</em> 给定的元素，定位上下文始终是浏览器窗口，不会随着body的移动而改变位置（这里讲错了，上课的时候说的是body，但是仔细想一下如果是相对与body的话，那么body在滚动的时候肯定也会发生位置的改变，注意一下）。</p>
<p>一般需要固定在页面上的元素，不会随着页面的滚动而发生偏移的元素，请使用 <em>fixed</em> 定位。</p>
<h2 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h2><p><em>example</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.wrap</span>&#123;<span class="attribute">width</span>: <span class="number">400px</span>;<span class="attribute">height</span>: <span class="number">300px</span>;<span class="attribute">margin</span>: <span class="number">30px</span> auto;<span class="attribute">overflow</span>: auto&#125;</span></span><br><span class="line"><span class="undefined">  dl &#123;</span></span><br><span class="line"><span class="undefined">    margin: 0;</span></span><br><span class="line"><span class="undefined">    padding: 10px 0 0 0;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  dt &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#B8C1C8</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#989EA4</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-top</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#717D85</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#FFF</span>;</span></span><br><span class="line"><span class="undefined">    font: bold 18px/21px sans-serif;</span></span><br><span class="line"><span class="undefined">    margin: 0;</span></span><br><span class="line"><span class="undefined">    padding: 2px 0 0 12px;</span></span><br><span class="line"><span class="undefined">    position: -webkit-sticky;</span></span><br><span class="line"><span class="undefined">    position: sticky;</span></span><br><span class="line"><span class="undefined">    top: -1px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  dd &#123;</span></span><br><span class="line"><span class="undefined">    font: bold 20px/45px sans-serif;</span></span><br><span class="line"><span class="undefined">    margin: 0;</span></span><br><span class="line"><span class="undefined">    padding: 0 0 0 12px;</span></span><br><span class="line"><span class="undefined">    white-space: nowrap;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-top</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#CCC</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>A<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Andrew W.K.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Apparat<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Arcade Fire<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>At The Drive-In<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Aziz Ansari<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>C<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Chromeo<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Common<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Converge<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Crystal Castles<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Cursive<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dt</span>&gt;</span>E<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Explosions In The Sky<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试下就明白了</p>
<h2 id="层级顺序"><a href="#层级顺序" class="headerlink" title="层级顺序"></a>层级顺序</h2><blockquote>
<p>页面文档中的元素会按照一定的规则去显示。</p>
</blockquote>
<p><img src="/img/css/z-index.png" alt="层级顺序"></p>
<p>内容是页面的很重要的实体，因此层叠水平较高。</p>
<p><em>example</em> </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.a</span>&#123;<span class="attribute">background</span>: red;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.b</span>&#123;<span class="attribute">background</span>: blue;<span class="attribute">margin</span>: -<span class="number">35px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上边的例子可以看到一些现象</p>
<ol>
<li>盒子 box2 会挡住盒子 box1 ，元素产生了覆盖，颜色的覆盖。页面中的排布遵循元素排布规则。相同的元素后来居上。</li>
<li>文字覆盖也是后来居上的。</li>
</ol>
<p><em>example</em> </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.a</span>&#123;<span class="attribute">display</span>: inline-block;<span class="attribute">background</span>: red;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.b</span>&#123;<span class="attribute">background</span>: blue;<span class="attribute">margin</span>: -<span class="number">35px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.c</span>&#123;<span class="attribute">background</span>: black;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.d</span>&#123;<span class="attribute">display</span>: inline-block;<span class="attribute">background</span>: green;<span class="attribute">margin</span>: -<span class="number">35px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span>box3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"d"</span>&gt;</span>box4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当设定了元素的显示属性的时候按照上边的层叠规则可发现，此时元素没有按照后来居上的原则来了。这里还可以加一个浮动元素去验证。</p>
<ol>
<li>此时盒子之间的覆盖，背景颜色的覆盖始终都是遵循层叠顺序。</li>
<li>文字还是后来居上。再次强调一下文字是内容实体很重要。</li>
</ol>
<h3 id="关于定位元素的层叠顺序"><a href="#关于定位元素的层叠顺序" class="headerlink" title="关于定位元素的层叠顺序"></a>关于定位元素的层叠顺序</h3><blockquote>
<p>首先要了解两个东西</p>
</blockquote>
<ol>
<li>层叠上下文：页面根节点（body），是根层叠上下文（参考对象），请把它理解成容器，容器就是盛放物品的，物品在其中是有层叠顺序的。</li>
<li>层叠水平：层叠上下文的元素，以及普通的元素都具有层叠水平。层叠水平决定了元素在同一个层叠上下中显示的顺序（学生和老师之间的距离）。</li>
</ol>
<p><em>example1</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.outer</span>&#123;<span class="attribute">width</span>: <span class="number">300px</span>;<span class="attribute">height</span>: <span class="number">300px</span>;<span class="attribute">border</span>: <span class="number">1px</span> solid red;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.inner</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">position</span>: absolute;<span class="comment">/* float: left */</span>&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 很多的文字 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>文字被inner元素所覆盖，因为设定了定位的元素具有默认的z-index： auto。和浮动比较，两者遵循层叠顺序 z-index： auto 的元素会排列在float元素之上。</p>
<p><em>example2</em> </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.outer</span>&#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">150px</span>;<span class="attribute">position</span>: relative;<span class="attribute">background</span>: red;<span class="comment">/* z-index: 1; */</span>&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.inner</span>&#123;<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;<span class="attribute">position</span>: absolute;<span class="attribute">z-index</span>: -<span class="number">1</span>;<span class="attribute">background</span>: black;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>给inner设定了z-index：-1时inner元素跑到了outer元素的后边。遵循负值z-index排列在block元素之后。</p>
<p>如果此时给父级元素设定z-index: 1;这里任意数值，会发现outer显示到了后边，这个时候再去调整inner的z-index值就算再大也不会超越outer的显示层级。什么原因呢？</p>
<p><code>tip</code>：定位元素具有z-index默认值auto，但是auto不会是元素成为层叠上下文。设定数值之后定位元素就会成为层叠上下文，inner此时在outer中就是遵循层叠顺序来排列，outer即变成了盛放内容的容器了。inner设定的z-index只是会影响outer内部的层叠水平。不会影响影响与outer之间的层叠顺序。</p>
<p><em>example3</em> ：最后一点就不举例子了。当有互相嵌套的时候并且父级也有z-index值的时候，层叠顺序的比较止步于父级的层叠上下文（父级在其层叠上下中的排列顺序）。</p>
<p>总结：</p>
<ol>
<li>定位元素默认具有z-index：auto（可以看成0）。</li>
<li>z-index：auto不会创建定位上下文。</li>
<li>z-index层叠顺序的比较止步与父级层叠上下文。</li>
</ol>
<h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>打完收工！有问题留言补充，再修改。晚安，么么哒~</p>
]]></content>
      
        <categories>
            
            <category> html&amp;css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> position </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[float]]></title>
      <url>/html-css/web/float/</url>
      <content type="html"><![CDATA[<p><img src="/img/css/float.png" alt=""></p>
<a id="more"></a>
<h1 id="float"><a href="#float" class="headerlink" title="float"></a>float</h1><blockquote>
<p>让人又爱又恨的~浮动</p>
</blockquote>
<h2 id="float-history"><a href="#float-history" class="headerlink" title="float history"></a>float history</h2><p>在很久很久很久以前（多么熟悉的旋律），浮动就已经出现了。拿来干嘛的呢？</p>
<p><em>one：</em> 最初仅仅为了实现传统报刊出版物上边的 <strong>文字环绕</strong> 效果。</p>
<p><em>two：</em> 让上下排列的元素不在堆叠，变成左右的排列，从而实现布局的很多的效果，例如分栏（不乖乖的呆着我要挣脱束缚 — <strong>文档流</strong>，还tm有这种操作，我什么操作要你管）。 </p>
<p><code>tip</code>：其实简单的来说就是在原有的空间支持的情况下，浮起来脱离常规的文档流，那么其后边的元素就会在空间支持的情况下向上提升与其他元素平起平坐。这里的话遵循一个原则就是能浪到哪就是哪，除非有东西挡住了或者说到了父元素的边界。要不然我是不会停止的（毕竟挣脱了束缚）。</p>
<h2 id="文字环绕"><a href="#文字环绕" class="headerlink" title="文字环绕"></a>文字环绕</h2><blockquote>
<p>float的最初目的</p>
</blockquote>
<p><em>example</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.example1</span> <span class="selector-tag">span</span>&#123;<span class="attribute">float</span>: left;<span class="attribute">background</span>: red;<span class="attribute">color</span>: <span class="number">#fff</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.example2</span> <span class="selector-tag">span</span>&#123;<span class="attribute">float</span>: left;<span class="attribute">backgorund</span>: red;<span class="attribute">color</span>: <span class="number">#fff</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 通过理解行内元素换行产生空字符来理解 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 1. 去空格化 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2. 会让元素block化 添加高度宽度有效果 自行测试 忘记说了 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"example1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- html解析的回车是一个空字符 本质是&amp;nbsp; span浮动之后，空字符去哪里了。最后面 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 那么其实就是文字环绕的效果 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"example2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>tip</code>：实在不行，请脑补皇帝后宫的故事，香艳的乾清宫，姿色万分的嫔妃，皇帝也是辛苦为了做到雨露均沾，从原来的厮守交欢独宠一人，到现在的百花齐放。不得以使用了邪恶的浮动。。。此处省略1w字。但是要注意一个点浮动非图片的时候一样的效果千万不要以为只有图片可以，若不是非图片元素记得给宽高，因为图片是有宽高的。</p>
<h2 id="float现代意义"><a href="#float现代意义" class="headerlink" title="float现代意义"></a>float现代意义</h2><ul>
<li>分列布局</li>
<li>导航栏、商品列表等等</li>
<li>注意点：浮动的时候可能会被高度不一的元素挡住，注意调整元素的高度到合适的位置，已经父元素的空间是否足够。请记住能用浮动办到的事情请不要使用定位，因为不利于页面的后期维护，迫不得已才去使用定位。</li>
</ul>
<h2 id="包裹与浮动"><a href="#包裹与浮动" class="headerlink" title="包裹与浮动"></a>包裹与浮动</h2><blockquote>
<p>浮动的元素脱离了文档流，必然会导致父元素高度丢失。因此不会包裹原有文档流中的子元素。这种情况不是我们想要的。</p>
</blockquote>
<p>原本的元素在正常文档流中是会受父元素限制（包裹）里边的改变应该只是在内部不会去影响到外部（内部翻江倒海，外部风平浪静。或者也可以是你和一个妹妹玩角色扮演。“你叫啊，叫破喉咙也不会有人来救你”）—块级格式化上下文。当然这个不是重点。</p>
<p>当元素被添加了浮动之后包裹就消失父元素塌陷，并且元素还会按照浮动的方向去移动。遭到了破坏。（想那个画的图）。没办法原本的作用就是环绕，所以忍了吧。</p>
<p>浮动元素的margin:auto失效，没有为什么，本来就相互违背为什么要生效。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><blockquote>
<p>清除浮动 回归文档流</p>
<p>明白清除浮动的目的带来的影响，浮动还是存在的，只是浮动元素对周围元素的影响以及父元素对其的包裹性。</p>
</blockquote>
<ul>
<li><p>插入元素添加属性clear：left / right / both。注意点</p>
<ol>
<li><p>插入的元素必须是块级属性的元素。clear会令插入元素的margin-top/bottom失效。</p>
</li>
<li><p>伪元素的使用在于低版本的IE不支持，并且一定是给父元素添加（也一定是有浮动的父元素）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 都可以 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 推荐 代码少 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE8- */</span></span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IE7 */</span></span><br><span class="line">.clearfix&#123;*zoom: 1;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>对父元素使用overflow：hidden</p>
</li>
<li><p>解决包裹问题对父元素使用浮动（没有清除的效果，请区别对待）</p>
</li>
</ul>
<h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><p>有什么问题请留言！<em>Good night~</em> (<em>^_^</em>)。</p>
]]></content>
      
        <categories>
            
            <category> html&amp;css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> float </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
